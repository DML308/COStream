###############################################################################
#
# Generic Makefile for C/C++ Program
#
# Author: tanhong (HUST digital media lab)
# Date: 2012/01/12

# Description:
# The makefile searches in directories for the source files
# with extensions specified in , then compiles the sources
# and finally produces the , the executable file, by linking
# the objectives.

# Usage:
# $ make compile and link the program.
# $ make objs compile only (no linking. Rarely used).
# $ make clean clean the objectives and dependencies.
# $ make cleanall clean the objectives, dependencies and executable.
# $ make rebuild rebuild the program. The same as make clean && make all.
#==============================================================================

## Customizing Section: adjust the following if necessary.
##=============================================================================
CC      = gcc
cxx		= g++
YACC    = bison -y
LEX     = flex
# The executable file name.
# It must be specified.
# PROGRAM := a.out # the executable name
PROGRAM := COStreamYr

# The directories in which source files reside.
# At least one path should be specified.
# SRCDIRS := . # current directory
SRCDIRS := .

# The source file types (headers excluded).
# At least one type should be specified.
# The valid suffixes are among of .c, .C, .cc, .cpp, .CPP, .c++, .cp, or .cxx.
# SRCEXTS := .c # C program
# SRCEXTS := .cpp # C++ program
# SRCEXTS := .c .cpp # C/C++ program
SRCEXTS := .c .cpp

# The flags used by the cpp (man cpp for more).
# CPPFLAGS := -Wall -Werror # show all warnings and take them as errors
CPPFLAGS :=

# The compiling flags used only for C.
# If it is a C++ program, no need to set these flags.
# If it is a C and C++ merging program, set these flags for the C parts.
CFLAGS := -g -w
CFLAGS += 

# The compiling flags used only for C++.
# If it is a C program, no need to set these flags.
# If it is a C and C++ merging program, set these flags for the C++ parts.
CXXFLAGS := -g -w
CXXFLAGS +=-I3rdpart/include
CXXFLAGS +=-I/usr/include -lm -I/usr/include

# The library and the link options ( C and C++ common).
LDFLAGS := -L3rdpart/lib -lmetis
LDFLAGS +=

## Implict Section: change the following only when necessary.
##=============================================================================
# The C program compiler. Uncomment it to specify yours explicitly.
#CC = gcc

# The C++ program compiler. Uncomment it to specify yours explicitly.
#CXX = g++

# Uncomment the 2 lines to compile C programs as C++ ones.
#CC = $(CXX)
#CFLAGS = $(CXXFLAGS)

# The command used to delete file.
#RM = rm -f

# The command used for yacc(.y) file
#YACC = bison -y

#The command used for lex(.l) file
#LEX = flex

## Stable Section: usually no need to be changed. But you can add more.
##=============================================================================
SHELL = /bin/sh
POBJ =  lex.o parser.o
SOURCES = $(foreach d,$(SRCDIRS),$(wildcard $(addprefix $(d)/*,$(SRCEXTS))))
OBJS = $(POBJ) $(foreach x,$(SRCEXTS), \
$(patsubst %$(x),%.o,$(filter %$(x),$(SOURCES)))) 
DEPS = $(patsubst %.o,%.d,$(OBJS))
	
#.PHONY :all objs clean cleanall rebuild yacc lex
.PHONY :all objs clean cleanall rebuild 
	
all : lex $(PROGRAM)
# Rules for creating the dependency files (.d).
#---------------------------------------------------
%.d : %.c
	$(CC) -MM -MD $(CFLAGS) $<

%.d : %.C
	$(CC) -MM -MD $(CXXFLAGS) $<

%.d : %.cc
	$(CC) -MM -MD $(CXXFLAGS) $<

%.d : %.cpp
	$(CC) -MM -MD $(CXXFLAGS) $<

%.d : %.CPP
	$(CC) -MM -MD $(CXXFLAGS) $<

%.d : %.c++
	$(CC) -MM -MD $(CXXFLAGS) $<

%.d : %.cp
	$(CC) -MM -MD $(CXXFLAGS) $<

%.d : %.cxx
	$(CC) -MM -MD $(CXXFLAGS) $<

# Rules for producing the objects.
#---------------------------------------------------
objs : $(OBJS)

%.o : %.c
	$(CC) -c $(CPPFLAGS) $(CFLAGS) $<

%.o : %.C
	$(CXX) -c $(CPPFLAGS) $(CXXFLAGS) $<

%.o : %.cc
	$(CXX) -c $(CPPFLAGS) $(CXXFLAGS) $<

%.o : %.cpp
	$(CXX) -c $(CPPFLAGS) $(CXXFLAGS) $<

%.o : %.CPP
	$(CXX) -c $(CPPFLAGS) $(CXXFLAGS) $<

%.o : %.c++
	$(CXX) -c $(CPPFLAGS) $(CXXFLAGS) $<

%.o : %.cp
	$(CXX) -c $(CPPFLAGS) $(CXXFLAGS) $<

%.o : %.cxx
	$(CXX) -c $(CPPFLAGS) $(CXXFLAGS) $<
# Rules for producing the executable.
#----------------------------------------------
$(PROGRAM) : $(OBJS)
ifeq ($(strip $(SRCEXTS)), .c) # C file
	$(CC) -o $(PROGRAM) $(OBJS) $(LDFLAGS)
else # C++ file
	$(CXX) -o $(PROGRAM) $(OBJS) $(LDFLAGS)
endif

#-include $(DEPS)

rebuild: clean all

old_clean :
	@$(RM) lex.c lex.yy.c parser.c y.tab.[ch] y.output *.o *.d

clean :
	@$(RM) lex.yy.c y.tab.c y.output  *.o *.d

cleanall: clean
	@$(RM) $(PROGRAM) $(PROGRAM).exe


install:
	make clean	
	make	
	./install.sh	


# Rules for producing the yacc and lex file.
#---------------------------------------------------

yacc: ANSI-C.y
	$(YACC) -dv ANSI-C.y
	mv y.tab.c parser.c
	
lex: yacc c4.l
	$(LEX) c4.l
	mv lex.yy.c lex.c
	
lex.o: lex.c
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c lex.c -o lex.o

parser.o: parser.c
	$(CC) $(CPPFLAGS) $(CFLAGS) -DYYDEBUG -I. -c parser.c -o parser.o
### End of the Makefile ## Suggestions are welcome ## All rights reserved ###
###############################################################################

