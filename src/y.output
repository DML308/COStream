Terminals unused in grammar

   UPLUS
   UMINUS
   INDIR
   ADDRESS
   POSTINC
   POSTDEC
   PREINC
   PREDEC
   WIDECHARconstant


State 544 conflicts: 1 shift/reduce
State 645 conflicts: 1 shift/reduce
State 714 conflicts: 1 shift/reduce


Grammar

    0 $accept: prog.start $end

    1 prog.start: translation.unit

    2 stream.type.specifier: STREAM '<' stream.declaration.list '>'

    3 stream.declaration.list: type.specifier paren.identifier.declarator
    4                        | type.specifier paren.identifier.declarator postfixing.abstract.declarator
    5                        | stream.declaration.list ',' type.specifier paren.identifier.declarator
    6                        | stream.declaration.list ',' type.specifier paren.identifier.declarator postfixing.abstract.declarator

    7 $@1: /* empty */

    8 composite.definition: composite.head $@1 composite.body.no.new.scope

    9 composite.head: COMPOSITE IDENTIFIER '(' composite.head.inout ')'

   10 composite.head.inout: /* empty */
   11                     | INPUT composite.head.inout.member.list ',' OUTPUT composite.head.inout.member.list
   12                     | INPUT composite.head.inout.member.list
   13                     | OUTPUT composite.head.inout.member.list
   14                     | OUTPUT composite.head.inout.member.list ',' INPUT composite.head.inout.member.list

   15 composite.head.inout.member.list: composite.head.inout.member
   16                                 | composite.head.inout.member.list ',' composite.head.inout.member

   17 composite.head.inout.member: stream.type.specifier IDENTIFIER

   18 composite.body.no.new.scope: '{' composite.body.param.opt composite.body.statement.list '}'
   19                            | '{' composite.body.param.opt declaration.list composite.body.statement.list '}'

   20 composite.body.param.opt: /* empty */
   21                         | PARAM parameter.list ';'

   22 composite.body.statement.list: costream.composite.statement
   23                              | composite.body.statement.list costream.composite.statement

   24 composite.body.operator: operator.add
   25                        | operator.file.writer

   26 operator.file.writer: FILEWRITER '(' IDENTIFIER ')' operator.arguments ';'

   27 operator.add: ADD operator.default.call
   28             | ADD operator.pipeline
   29             | ADD operator.splitjoin

   30 operator.pipeline: PIPELINE lblock splitjoinPipeline.statement.list rblock
   31                  | PIPELINE lblock declaration.list splitjoinPipeline.statement.list rblock

   32 operator.splitjoin: SPLITJOIN lblock split.statement splitjoinPipeline.statement.list join.statement rblock
   33                   | SPLITJOIN lblock declaration.list split.statement splitjoinPipeline.statement.list join.statement rblock
   34                   | SPLITJOIN lblock declaration.list statement.list split.statement splitjoinPipeline.statement.list join.statement rblock

   35 split.statement: SPLIT duplicate.statement
   36                | SPLIT roundrobin.statement

   37 splitjoinPipeline.statement.list: statement
   38                                 | operator.add
   39                                 | splitjoinPipeline.statement.list statement
   40                                 | splitjoinPipeline.statement.list operator.add

   41 join.statement: JOIN roundrobin.statement

   42 roundrobin.statement: ROUNDROBIN '(' ')' ';'
   43                     | ROUNDROBIN '(' argument.expression.list ')' ';'

   44 duplicate.statement: DUPLICATE '(' ')' ';'
   45                    | DUPLICATE '(' assignment.expression ')' ';'

   46 operator.default.call: IDENTIFIER operator.arguments ';'

   47 operator.arguments: '(' argument.expression.list ')'
   48                   | '(' ')'

   49 operator.selfdefine.body: lblock operator.selfdefine.body.init.opt operator.selfdefine.body.work operator.selfdefine.body.window.list.opt rblock
   50                         | lblock declaration.list operator.selfdefine.body.init.opt operator.selfdefine.body.work operator.selfdefine.body.window.list.opt rblock

   51 operator.selfdefine.body.init.opt: /* empty */
   52                                  | INIT compound.statement

   53 operator.selfdefine.body.work: WORK compound.statement

   54 operator.selfdefine.body.window.list.opt: /* empty */
   55                                         | WINDOW '{' operator.selfdefine.window.list '}'

   56 operator.selfdefine.window.list: operator.selfdefine.window
   57                                | operator.selfdefine.window.list operator.selfdefine.window

   58 operator.selfdefine.window: IDENTIFIER window.type ';'

   59 window.type: SLIDING '(' ')'
   60            | TUMBLING '(' ')'
   61            | SLIDING '(' expression ')'
   62            | TUMBLING '(' expression ')'

   63 primary.expression: IDENTIFIER
   64                   | constant
   65                   | string.literal.list
   66                   | '(' expression ')'
   67                   | '(' lblock statement.list rblock ')'
   68                   | '(' lblock declaration.list statement.list rblock ')'

   69 postfix.expression: primary.expression
   70                   | postfix.expression '[' expression ']'
   71                   | postfix.expression '(' ')'
   72                   | postfix.expression '(' argument.expression.list ')'
   73                   | postfix.expression '(' ')' operator.selfdefine.body
   74                   | postfix.expression '(' argument.expression.list ')' operator.selfdefine.body
   75                   | postfix.expression '(' ')' operator.arguments
   76                   | postfix.expression '(' argument.expression.list ')' operator.arguments
   77                   | SPLITJOIN '(' IDENTIFIER ')' lblock split.statement splitjoinPipeline.statement.list join.statement rblock
   78                   | SPLITJOIN '(' IDENTIFIER ')' lblock declaration.list split.statement splitjoinPipeline.statement.list join.statement rblock
   79                   | SPLITJOIN '(' IDENTIFIER ')' lblock declaration.list statement.list split.statement splitjoinPipeline.statement.list join.statement rblock
   80                   | PIPELINE '(' IDENTIFIER ')' lblock splitjoinPipeline.statement.list rblock
   81                   | PIPELINE '(' IDENTIFIER ')' lblock declaration.list splitjoinPipeline.statement.list rblock
   82                   | FILEREADER '(' ')' operator.arguments
   83                   | postfix.expression '.' IDENTIFIER
   84                   | postfix.expression ARROW IDENTIFIER
   85                   | postfix.expression ICR
   86                   | postfix.expression DECR
   87                   | postfix.expression '.' TYPEDEFname
   88                   | postfix.expression ARROW TYPEDEFname

   89 argument.expression.list: assignment.expression
   90                         | argument.expression.list ',' assignment.expression

   91 unary.expression: postfix.expression
   92                 | ICR unary.expression
   93                 | DECR unary.expression
   94                 | unary.operator cast.expression
   95                 | SIZEOF unary.expression
   96                 | SIZEOF '(' type.name ')'

   97 unary.operator: '&'
   98               | '*'
   99               | '+'
  100               | '-'
  101               | '~'
  102               | '!'

  103 cast.expression: unary.expression
  104                | '(' type.name ')' cast.expression

  105 multiplicative.expression: cast.expression
  106                          | multiplicative.expression '*' cast.expression
  107                          | multiplicative.expression '/' cast.expression
  108                          | multiplicative.expression '%' cast.expression

  109 additive.expression: multiplicative.expression
  110                    | additive.expression '+' multiplicative.expression
  111                    | additive.expression '-' multiplicative.expression

  112 shift.expression: additive.expression
  113                 | shift.expression LS additive.expression
  114                 | shift.expression RS additive.expression

  115 relational.expression: shift.expression
  116                      | relational.expression '<' shift.expression
  117                      | relational.expression '>' shift.expression
  118                      | relational.expression LE shift.expression
  119                      | relational.expression GE shift.expression

  120 equality.expression: relational.expression
  121                    | equality.expression EQ relational.expression
  122                    | equality.expression NE relational.expression

  123 AND.expression: equality.expression
  124               | AND.expression '&' equality.expression

  125 exclusive.OR.expression: AND.expression
  126                        | exclusive.OR.expression '^' AND.expression

  127 inclusive.OR.expression: exclusive.OR.expression
  128                        | inclusive.OR.expression '|' exclusive.OR.expression

  129 logical.AND.expression: inclusive.OR.expression
  130                       | logical.AND.expression ANDAND inclusive.OR.expression

  131 logical.OR.expression: logical.AND.expression
  132                      | logical.OR.expression OROR logical.AND.expression

  133 conditional.expression: logical.OR.expression
  134                       | logical.OR.expression '?' expression ':' conditional.expression

  135 assignment.expression: conditional.expression
  136                      | unary.expression assignment.operator assignment.expression

  137 assignment.operator: '='
  138                    | MULTassign
  139                    | DIVassign
  140                    | MODassign
  141                    | PLUSassign
  142                    | MINUSassign
  143                    | LSassign
  144                    | RSassign
  145                    | ANDassign
  146                    | ERassign
  147                    | ORassign

  148 expression: assignment.expression
  149           | expression ',' assignment.expression

  150 constant.expression: conditional.expression

  151 expression.opt: /* empty */
  152               | expression

  153 declaration: declaring.list ';'
  154            | default.declaring.list ';'
  155            | sue.declaration.specifier ';'
  156            | sue.type.specifier ';'

  157 $@2: /* empty */

  158 $@3: /* empty */

  159 declaring.list: declaration.specifier declarator $@2 attributes.opt $@3 initializer.opt

  160 $@4: /* empty */

  161 $@5: /* empty */

  162 declaring.list: type.specifier declarator $@4 attributes.opt $@5 initializer.opt

  163 @6: /* empty */

  164 $@7: /* empty */

  165 declaring.list: declaring.list ',' declarator @6 attributes.opt $@7 initializer.opt

  166 $@8: /* empty */

  167 declaring.list: declaration.specifier error $@8 attributes.opt initializer.opt

  168 $@9: /* empty */

  169 declaring.list: type.specifier error $@9 attributes.opt initializer.opt
  170               | declaring.list ',' error

  171 $@10: /* empty */

  172 $@11: /* empty */

  173 default.declaring.list: declaration.qualifier.list identifier.declarator $@10 attributes.opt $@11 initializer.opt
  174                       | stream.type.specifier identifier.declarator

  175 $@12: /* empty */

  176 $@13: /* empty */

  177 default.declaring.list: type.qualifier.list identifier.declarator $@12 attributes.opt $@13 initializer.opt

  178 @14: /* empty */

  179 $@15: /* empty */

  180 default.declaring.list: default.declaring.list ',' identifier.declarator @14 attributes.opt $@15 initializer.opt

  181 $@16: /* empty */

  182 default.declaring.list: declaration.qualifier.list error $@16 attributes.opt initializer.opt

  183 $@17: /* empty */

  184 default.declaring.list: type.qualifier.list error $@17 attributes.opt initializer.opt
  185                       | default.declaring.list ',' error

  186 declaration.specifier: basic.declaration.specifier
  187                      | sue.declaration.specifier
  188                      | typedef.declaration.specifier

  189 basic.declaration.specifier: basic.type.specifier storage.class
  190                            | declaration.qualifier.list basic.type.name
  191                            | basic.declaration.specifier declaration.qualifier
  192                            | basic.declaration.specifier basic.type.name

  193 sue.declaration.specifier: sue.type.specifier storage.class
  194                          | declaration.qualifier.list elaborated.type.name
  195                          | sue.declaration.specifier declaration.qualifier

  196 typedef.declaration.specifier: typedef.type.specifier storage.class
  197                              | declaration.qualifier.list TYPEDEFname
  198                              | typedef.declaration.specifier declaration.qualifier

  199 declaration.qualifier.list: storage.class
  200                           | type.qualifier.list storage.class
  201                           | declaration.qualifier.list declaration.qualifier

  202 declaration.qualifier: type.qualifier
  203                      | storage.class

  204 type.specifier: basic.type.specifier
  205               | sue.type.specifier
  206               | typedef.type.specifier

  207 basic.type.specifier: basic.type.name
  208                     | type.qualifier.list basic.type.name
  209                     | basic.type.specifier type.qualifier
  210                     | basic.type.specifier basic.type.name

  211 sue.type.specifier: elaborated.type.name
  212                   | type.qualifier.list elaborated.type.name
  213                   | sue.type.specifier type.qualifier

  214 typedef.type.specifier: TYPEDEFname
  215                       | type.qualifier.list TYPEDEFname
  216                       | typedef.type.specifier type.qualifier

  217 type.qualifier.list: type.qualifier
  218                    | type.qualifier.list type.qualifier

  219 pointer.type.qualifier.list: pointer.type.qualifier
  220                            | pointer.type.qualifier.list pointer.type.qualifier

  221 elaborated.type.name: struct.or.union.specifier
  222                     | enum.specifier

  223 declarator: paren.typedef.declarator
  224           | parameter.typedef.declarator
  225           | identifier.declarator
  226           | old.function.declarator

  227 paren.typedef.declarator: paren.postfix.typedef.declarator
  228                         | '*' paren.typedef.declarator
  229                         | '*' '(' simple.paren.typedef.declarator ')'
  230                         | '*' pointer.type.qualifier.list '(' simple.paren.typedef.declarator ')'
  231                         | '*' pointer.type.qualifier.list paren.typedef.declarator

  232 paren.postfix.typedef.declarator: '(' paren.typedef.declarator ')'
  233                                 | '(' simple.paren.typedef.declarator postfixing.abstract.declarator ')'
  234                                 | '(' paren.typedef.declarator ')' postfixing.abstract.declarator

  235 simple.paren.typedef.declarator: TYPEDEFname
  236                                | '(' simple.paren.typedef.declarator ')'

  237 parameter.typedef.declarator: TYPEDEFname
  238                             | TYPEDEFname postfixing.abstract.declarator
  239                             | clean.typedef.declarator

  240 clean.typedef.declarator: clean.postfix.typedef.declarator
  241                         | '*' parameter.typedef.declarator
  242                         | '*' pointer.type.qualifier.list parameter.typedef.declarator

  243 clean.postfix.typedef.declarator: '(' clean.typedef.declarator ')'
  244                                 | '(' clean.typedef.declarator ')' postfixing.abstract.declarator

  245 abstract.declarator: unary.abstract.declarator
  246                    | postfix.abstract.declarator
  247                    | postfixing.abstract.declarator

  248 unary.abstract.declarator: '*'
  249                          | '*' pointer.type.qualifier.list
  250                          | '*' abstract.declarator
  251                          | '*' pointer.type.qualifier.list abstract.declarator

  252 postfix.abstract.declarator: '(' unary.abstract.declarator ')'
  253                            | '(' postfix.abstract.declarator ')'
  254                            | '(' postfixing.abstract.declarator ')'
  255                            | '(' unary.abstract.declarator ')' postfixing.abstract.declarator

  256 postfixing.abstract.declarator: array.abstract.declarator
  257                               | '(' ')'
  258                               | '(' parameter.type.list ')'

  259 identifier.declarator: unary.identifier.declarator
  260                      | paren.identifier.declarator

  261 unary.identifier.declarator: postfix.identifier.declarator
  262                            | '*' identifier.declarator
  263                            | '*' pointer.type.qualifier.list identifier.declarator

  264 postfix.identifier.declarator: paren.identifier.declarator postfixing.abstract.declarator
  265                              | '(' unary.identifier.declarator ')'
  266                              | '(' unary.identifier.declarator ')' postfixing.abstract.declarator

  267 paren.identifier.declarator: IDENTIFIER
  268                            | '(' paren.identifier.declarator ')'

  269 old.function.declarator: postfix.old.function.declarator
  270                        | '*' old.function.declarator
  271                        | '*' pointer.type.qualifier.list old.function.declarator

  272 postfix.old.function.declarator: paren.identifier.declarator '(' identifier.list ')'
  273                                | '(' old.function.declarator ')'
  274                                | '(' old.function.declarator ')' postfixing.abstract.declarator

  275 identifier.list: IDENTIFIER
  276                | identifier.list ',' IDENTIFIER

  277 identifier.or.typedef.name: IDENTIFIER
  278                           | TYPEDEFname

  279 type.name: type.specifier
  280          | type.specifier abstract.declarator
  281          | type.qualifier.list
  282          | type.qualifier.list abstract.declarator

  283 attributes.opt: /* empty */
  284               | attributes

  285 attributes: attribute
  286           | attributes attribute

  287 attribute: ATTRIBUTE '(' '(' attribute.list ')' ')'

  288 attribute.list: attrib
  289               | attribute.list ',' attrib

  290 attrib: /* empty */
  291       | any.word
  292       | any.word '(' expression ')'

  293 any.word: IDENTIFIER
  294         | TYPEDEFname
  295         | CONST

  296 initializer.opt: /* empty */
  297                | '=' initializer

  298 initializer: '{' initializer.list '}'
  299            | '{' initializer.list ',' '}'
  300            | assignment.expression

  301 initializer.list: initializer
  302                 | initializer.list ',' initializer

  303 parameter.type.list: parameter.list
  304                    | parameter.list ',' ELLIPSIS
  305                    | ELLIPSIS

  306 parameter.list: parameter.declaration
  307               | parameter.list ',' parameter.declaration
  308               | parameter.declaration '=' initializer
  309               | parameter.list ',' error

  310 parameter.declaration: declaration.specifier
  311                      | declaration.specifier abstract.declarator
  312                      | declaration.specifier identifier.declarator
  313                      | declaration.specifier parameter.typedef.declarator
  314                      | declaration.qualifier.list
  315                      | declaration.qualifier.list abstract.declarator
  316                      | declaration.qualifier.list identifier.declarator
  317                      | type.specifier
  318                      | type.specifier abstract.declarator
  319                      | type.specifier identifier.declarator
  320                      | type.specifier parameter.typedef.declarator
  321                      | type.qualifier.list
  322                      | type.qualifier.list abstract.declarator
  323                      | type.qualifier.list identifier.declarator

  324 array.abstract.declarator: '[' ']'
  325                          | '[' constant.expression ']'
  326                          | array.abstract.declarator '[' constant.expression ']'
  327                          | array.abstract.declarator '[' ']'

  328 struct.or.union.specifier: struct.or.union '{' struct.declaration.list '}'
  329                          | struct.or.union identifier.or.typedef.name '{' struct.declaration.list '}'
  330                          | struct.or.union identifier.or.typedef.name
  331                          | struct.or.union '{' '}'
  332                          | struct.or.union identifier.or.typedef.name '{' '}'

  333 struct.or.union: STRUCT
  334                | UNION

  335 struct.declaration.list: struct.declaration
  336                        | struct.declaration.list struct.declaration

  337 struct.declaration: struct.declaring.list ';'
  338                   | struct.default.declaring.list ';'

  339 struct.default.declaring.list: type.qualifier.list struct.identifier.declarator
  340                              | struct.default.declaring.list ',' struct.identifier.declarator

  341 struct.declaring.list: type.specifier struct.declarator
  342                      | struct.declaring.list ',' struct.declarator

  343 struct.declarator: declarator bit.field.size.opt attributes.opt
  344                  | bit.field.size attributes.opt

  345 struct.identifier.declarator: identifier.declarator bit.field.size.opt attributes.opt
  346                             | bit.field.size attributes.opt

  347 bit.field.size.opt: /* empty */
  348                   | bit.field.size

  349 bit.field.size: ':' constant.expression

  350 enum.specifier: ENUM '{' enumerator.list comma.opt '}'
  351               | ENUM identifier.or.typedef.name '{' enumerator.list comma.opt '}'
  352               | ENUM identifier.or.typedef.name

  353 enumerator.list: identifier.or.typedef.name enumerator.value.opt
  354                | enumerator.list ',' identifier.or.typedef.name enumerator.value.opt

  355 enumerator.value.opt: /* empty */
  356                     | '=' constant.expression

  357 comma.opt: /* empty */
  358          | ','

  359 costream.composite.statement: composite.body.operator
  360                             | statement

  361 statement: labeled.statement
  362          | compound.statement
  363          | expression.statement
  364          | selection.statement
  365          | iteration.statement
  366          | jump.statement
  367          | error ';'

  368 @18: /* empty */

  369 labeled.statement: IDENTIFIER ':' @18 statement
  370                  | CASE constant.expression ':' statement
  371                  | DEFAULT ':' statement
  372                  | TYPEDEFname ':' statement

  373 compound.statement: lblock rblock
  374                   | lblock declaration.list rblock
  375                   | lblock composite.body.statement.list rblock
  376                   | lblock declaration.list composite.body.statement.list rblock

  377 lblock: '{'

  378 rblock: '}'

  379 compound.statement.no.new.scope: '{' '}'
  380                                | '{' declaration.list '}'
  381                                | '{' statement.list '}'
  382                                | '{' declaration.list statement.list '}'

  383 declaration.list: declaration
  384                 | declaration.list declaration

  385 statement.list: statement
  386               | statement.list statement

  387 expression.statement: expression.opt ';'

  388 selection.statement: IF '(' expression ')' costream.composite.statement
  389                    | IF '(' expression ')' costream.composite.statement ELSE costream.composite.statement

  390 $@19: /* empty */

  391 selection.statement: SWITCH $@19 '(' expression ')' statement

  392 $@20: /* empty */

  393 iteration.statement: WHILE $@20 '(' expression ')' statement

  394 $@21: /* empty */

  395 iteration.statement: DO $@21 statement WHILE '(' expression ')' ';'

  396 $@22: /* empty */

  397 iteration.statement: FOR '(' expression.opt ';' expression.opt ';' expression.opt ')' $@22 costream.composite.statement

  398 $@23: /* empty */

  399 iteration.statement: FOR '(' error ';' expression.opt ';' expression.opt ')' $@23 costream.composite.statement

  400 $@24: /* empty */

  401 iteration.statement: FOR '(' expression.opt ';' expression.opt ';' error ')' $@24 costream.composite.statement

  402 $@25: /* empty */

  403 iteration.statement: FOR '(' expression.opt ';' error ';' expression.opt ')' $@25 costream.composite.statement

  404 $@26: /* empty */

  405 iteration.statement: FOR '(' error ')' $@26 costream.composite.statement

  406 jump.statement: GOTO IDENTIFIER ';'
  407               | CONTINUE ';'
  408               | BREAK ';'
  409               | RETURN expression.opt ';'
  410               | GOTO TYPEDEFname ';'

  411 translation.unit: external.definition
  412                 | translation.unit external.definition

  413 external.definition: declaration
  414                    | function.definition
  415                    | composite.definition

  416 $@27: /* empty */

  417 function.definition: identifier.declarator $@27 compound.statement.no.new.scope
  418                    | identifier.declarator BOGUS

  419 $@28: /* empty */

  420 function.definition: declaration.specifier identifier.declarator $@28 compound.statement.no.new.scope

  421 $@29: /* empty */

  422 function.definition: type.specifier identifier.declarator $@29 compound.statement.no.new.scope

  423 $@30: /* empty */

  424 function.definition: declaration.qualifier.list identifier.declarator $@30 compound.statement.no.new.scope

  425 $@31: /* empty */

  426 function.definition: type.qualifier.list identifier.declarator $@31 compound.statement.no.new.scope

  427 $@32: /* empty */

  428 function.definition: old.function.declarator $@32 compound.statement.no.new.scope

  429 $@33: /* empty */

  430 function.definition: declaration.specifier old.function.declarator $@33 compound.statement.no.new.scope

  431 $@34: /* empty */

  432 function.definition: type.specifier old.function.declarator $@34 compound.statement.no.new.scope

  433 $@35: /* empty */

  434 function.definition: declaration.qualifier.list old.function.declarator $@35 compound.statement.no.new.scope

  435 $@36: /* empty */

  436 function.definition: type.qualifier.list old.function.declarator $@36 compound.statement.no.new.scope

  437 $@37: /* empty */

  438 function.definition: old.function.declarator old.function.declaration.list $@37 compound.statement.no.new.scope

  439 $@38: /* empty */

  440 function.definition: declaration.specifier old.function.declarator old.function.declaration.list $@38 compound.statement.no.new.scope

  441 $@39: /* empty */

  442 function.definition: type.specifier old.function.declarator old.function.declaration.list $@39 compound.statement.no.new.scope

  443 $@40: /* empty */

  444 function.definition: declaration.qualifier.list old.function.declarator old.function.declaration.list $@40 compound.statement.no.new.scope

  445 $@41: /* empty */

  446 function.definition: type.qualifier.list old.function.declarator old.function.declaration.list $@41 compound.statement.no.new.scope

  447 $@42: /* empty */

  448 old.function.declaration.list: $@42 declaration.list

  449 constant: FLOATINGconstant
  450         | INTEGERconstant
  451         | OCTALconstant
  452         | HEXconstant
  453         | CHARACTERconstant

  454 string.literal.list: STRINGliteral
  455                    | string.literal.list STRINGliteral

  456 type.qualifier: CONST
  457               | VOLATILE
  458               | INLINE

  459 pointer.type.qualifier: CONST
  460                       | VOLATILE

  461 storage.class: TYPEDEF
  462              | EXTERN
  463              | STATIC
  464              | AUTO
  465              | REGISTER

  466 basic.type.name: VOID
  467                | CHAR
  468                | INT
  469                | FLOAT
  470                | DOUBLE
  471                | SIGNED
  472                | UNSIGNED
  473                | SHORT
  474                | LONG


Terminals, with rules where they appear

$end (0) 0
'!' (33) 102
'%' (37) 108
'&' (38) 97 124
'(' (40) 9 26 42 43 44 45 47 48 59 60 61 62 66 67 68 71 72 73 74 75
    76 77 78 79 80 81 82 96 104 229 230 232 233 234 236 243 244 252
    253 254 255 257 258 265 266 268 272 273 274 287 292 388 389 391
    393 395 397 399 401 403 405
')' (41) 9 26 42 43 44 45 47 48 59 60 61 62 66 67 68 71 72 73 74 75
    76 77 78 79 80 81 82 96 104 229 230 232 233 234 236 243 244 252
    253 254 255 257 258 265 266 268 272 273 274 287 292 388 389 391
    393 395 397 399 401 403 405
'*' (42) 98 106 228 229 230 231 241 242 248 249 250 251 262 263 270
    271
'+' (43) 99 110
',' (44) 5 6 11 14 16 90 149 165 170 180 185 276 289 299 302 304 307
    309 340 342 354 358
'-' (45) 100 111
'.' (46) 83 87
'/' (47) 107
':' (58) 134 349 369 370 371 372
';' (59) 21 26 42 43 44 45 46 58 153 154 155 156 337 338 367 387 395
    397 399 401 403 406 407 408 409 410
'<' (60) 2 116
'=' (61) 137 297 308 356
'>' (62) 2 117
'?' (63) 134
'[' (91) 70 324 325 326 327
']' (93) 70 324 325 326 327
'^' (94) 126
'{' (123) 18 19 55 298 299 328 329 331 332 350 351 377 379 380 381
    382
'|' (124) 128
'}' (125) 18 19 55 298 299 328 329 331 332 350 351 378 379 380 381
    382
'~' (126) 101
error (256) 167 169 170 182 184 185 309 367 399 401 403 405
AUTO (258) 464
DOUBLE (259) 470
INT (260) 468
STRUCT (261) 333
BREAK (262) 408
ELSE (263) 389
LONG (264) 474
SWITCH (265) 391
CASE (266) 370
ENUM (267) 350 351 352
REGISTER (268) 465
TYPEDEF (269) 461
CHAR (270) 467
EXTERN (271) 462
RETURN (272) 409
UNION (273) 334
CONST (274) 295 456 459
FLOAT (275) 469
SHORT (276) 473
UNSIGNED (277) 472
CONTINUE (278) 407
FOR (279) 397 399 401 403 405
SIGNED (280) 471
VOID (281) 466
DEFAULT (282) 371
GOTO (283) 406 410
SIZEOF (284) 95 96
VOLATILE (285) 457 460
DO (286) 395
IF (287) 388 389
STATIC (288) 463
WHILE (289) 393 395
COMPOSITE (290) 9
INPUT (291) 11 12 14
OUTPUT (292) 11 13 14
STREAM (293) 2
PARAM (294) 21
ADD (295) 27 28 29
INIT (296) 52
WORK (297) 53
WINDOW (298) 55
TUMBLING (299) 60 62
SLIDING (300) 59 61
SPLITJOIN (301) 32 33 34 77 78 79
SPLIT (302) 35 36
JOIN (303) 41
DUPLICATE (304) 44 45
ROUNDROBIN (305) 42 43
PIPELINE (306) 30 31 80 81
FILEREADER (307) 82
FILEWRITER (308) 26
UPLUS (309)
UMINUS (310)
INDIR (311)
ADDRESS (312)
POSTINC (313)
POSTDEC (314)
PREINC (315)
PREDEC (316)
BOGUS (317) 418
IDENTIFIER (318) 9 17 26 46 58 63 77 78 79 80 81 83 84 267 275 276
    277 293 369 406
STRINGliteral (319) 454 455
FLOATINGconstant (320) 449
INTEGERconstant (321) 450
OCTALconstant (322) 451
HEXconstant (323) 452
WIDECHARconstant (324)
CHARACTERconstant (325) 453
TYPEDEFname (326) 87 88 197 214 215 235 237 238 278 294 372 410
ARROW (327) 84 88
ICR (328) 85 92
DECR (329) 86 93
LS (330) 113
RS (331) 114
LE (332) 118
GE (333) 119
EQ (334) 121
NE (335) 122
ANDAND (336) 130
OROR (337) 132
ELLIPSIS (338) 304 305
MULTassign (339) 138
DIVassign (340) 139
MODassign (341) 140
PLUSassign (342) 141
MINUSassign (343) 142
LSassign (344) 143
RSassign (345) 144
ANDassign (346) 145
ERassign (347) 146
ORassign (348) 147
INLINE (349) 458
ATTRIBUTE (350) 287


Nonterminals, with rules where they appear

$accept (120)
    on left: 0
prog.start (121)
    on left: 1, on right: 0
stream.type.specifier (122)
    on left: 2, on right: 17 174
stream.declaration.list (123)
    on left: 3 4 5 6, on right: 2 5 6
composite.definition (124)
    on left: 8, on right: 415
$@1 (125)
    on left: 7, on right: 8
composite.head (126)
    on left: 9, on right: 8
composite.head.inout (127)
    on left: 10 11 12 13 14, on right: 9
composite.head.inout.member.list (128)
    on left: 15 16, on right: 11 12 13 14 16
composite.head.inout.member (129)
    on left: 17, on right: 15 16
composite.body.no.new.scope (130)
    on left: 18 19, on right: 8
composite.body.param.opt (131)
    on left: 20 21, on right: 18 19
composite.body.statement.list (132)
    on left: 22 23, on right: 18 19 23 375 376
composite.body.operator (133)
    on left: 24 25, on right: 359
operator.file.writer (134)
    on left: 26, on right: 25
operator.add (135)
    on left: 27 28 29, on right: 24 38 40
operator.pipeline (136)
    on left: 30 31, on right: 28
operator.splitjoin (137)
    on left: 32 33 34, on right: 29
split.statement (138)
    on left: 35 36, on right: 32 33 34 77 78 79
splitjoinPipeline.statement.list (139)
    on left: 37 38 39 40, on right: 30 31 32 33 34 39 40 77 78 79 80
    81
join.statement (140)
    on left: 41, on right: 32 33 34 77 78 79
roundrobin.statement (141)
    on left: 42 43, on right: 36 41
duplicate.statement (142)
    on left: 44 45, on right: 35
operator.default.call (143)
    on left: 46, on right: 27
operator.arguments (144)
    on left: 47 48, on right: 26 46 75 76 82
operator.selfdefine.body (145)
    on left: 49 50, on right: 73 74
operator.selfdefine.body.init.opt (146)
    on left: 51 52, on right: 49 50
operator.selfdefine.body.work (147)
    on left: 53, on right: 49 50
operator.selfdefine.body.window.list.opt (148)
    on left: 54 55, on right: 49 50
operator.selfdefine.window.list (149)
    on left: 56 57, on right: 55 57
operator.selfdefine.window (150)
    on left: 58, on right: 56 57
window.type (151)
    on left: 59 60 61 62, on right: 58
primary.expression (152)
    on left: 63 64 65 66 67 68, on right: 69
postfix.expression (153)
    on left: 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86
    87 88, on right: 70 71 72 73 74 75 76 83 84 85 86 87 88 91
argument.expression.list (154)
    on left: 89 90, on right: 43 47 72 74 76 90
unary.expression (155)
    on left: 91 92 93 94 95 96, on right: 92 93 95 103 136
unary.operator (156)
    on left: 97 98 99 100 101 102, on right: 94
cast.expression (157)
    on left: 103 104, on right: 94 104 105 106 107 108
multiplicative.expression (158)
    on left: 105 106 107 108, on right: 106 107 108 109 110 111
additive.expression (159)
    on left: 109 110 111, on right: 110 111 112 113 114
shift.expression (160)
    on left: 112 113 114, on right: 113 114 115 116 117 118 119
relational.expression (161)
    on left: 115 116 117 118 119, on right: 116 117 118 119 120 121
    122
equality.expression (162)
    on left: 120 121 122, on right: 121 122 123 124
AND.expression (163)
    on left: 123 124, on right: 124 125 126
exclusive.OR.expression (164)
    on left: 125 126, on right: 126 127 128
inclusive.OR.expression (165)
    on left: 127 128, on right: 128 129 130
logical.AND.expression (166)
    on left: 129 130, on right: 130 131 132
logical.OR.expression (167)
    on left: 131 132, on right: 132 133 134
conditional.expression (168)
    on left: 133 134, on right: 134 135 150
assignment.expression (169)
    on left: 135 136, on right: 45 89 90 136 148 149 300
assignment.operator (170)
    on left: 137 138 139 140 141 142 143 144 145 146 147, on right:
    136
expression (171)
    on left: 148 149, on right: 61 62 66 70 134 149 152 292 388 389
    391 393 395
constant.expression (172)
    on left: 150, on right: 325 326 349 356 370
expression.opt (173)
    on left: 151 152, on right: 387 397 399 401 403 409
declaration (174)
    on left: 153 154 155 156, on right: 383 384 413
declaring.list (175)
    on left: 159 162 165 167 169 170, on right: 153 165 170
$@2 (176)
    on left: 157, on right: 159
$@3 (177)
    on left: 158, on right: 159
$@4 (178)
    on left: 160, on right: 162
$@5 (179)
    on left: 161, on right: 162
@6 (180)
    on left: 163, on right: 165
$@7 (181)
    on left: 164, on right: 165
$@8 (182)
    on left: 166, on right: 167
$@9 (183)
    on left: 168, on right: 169
default.declaring.list (184)
    on left: 173 174 177 180 182 184 185, on right: 154 180 185
$@10 (185)
    on left: 171, on right: 173
$@11 (186)
    on left: 172, on right: 173
$@12 (187)
    on left: 175, on right: 177
$@13 (188)
    on left: 176, on right: 177
@14 (189)
    on left: 178, on right: 180
$@15 (190)
    on left: 179, on right: 180
$@16 (191)
    on left: 181, on right: 182
$@17 (192)
    on left: 183, on right: 184
declaration.specifier (193)
    on left: 186 187 188, on right: 159 167 310 311 312 313 420 430
    440
basic.declaration.specifier (194)
    on left: 189 190 191 192, on right: 186 191 192
sue.declaration.specifier (195)
    on left: 193 194 195, on right: 155 187 195
typedef.declaration.specifier (196)
    on left: 196 197 198, on right: 188 198
declaration.qualifier.list (197)
    on left: 199 200 201, on right: 173 182 190 194 197 201 314 315
    316 424 434 444
declaration.qualifier (198)
    on left: 202 203, on right: 191 195 198 201
type.specifier (199)
    on left: 204 205 206, on right: 3 4 5 6 162 169 279 280 317 318
    319 320 341 422 432 442
basic.type.specifier (200)
    on left: 207 208 209 210, on right: 189 204 209 210
sue.type.specifier (201)
    on left: 211 212 213, on right: 156 193 205 213
typedef.type.specifier (202)
    on left: 214 215 216, on right: 196 206 216
type.qualifier.list (203)
    on left: 217 218, on right: 177 184 200 208 212 215 218 281 282
    321 322 323 339 426 436 446
pointer.type.qualifier.list (204)
    on left: 219 220, on right: 220 230 231 242 249 251 263 271
elaborated.type.name (205)
    on left: 221 222, on right: 194 211 212
declarator (206)
    on left: 223 224 225 226, on right: 159 162 165 343
paren.typedef.declarator (207)
    on left: 227 228 229 230 231, on right: 223 228 231 232 234
paren.postfix.typedef.declarator (208)
    on left: 232 233 234, on right: 227
simple.paren.typedef.declarator (209)
    on left: 235 236, on right: 229 230 233 236
parameter.typedef.declarator (210)
    on left: 237 238 239, on right: 224 241 242 313 320
clean.typedef.declarator (211)
    on left: 240 241 242, on right: 239 243 244
clean.postfix.typedef.declarator (212)
    on left: 243 244, on right: 240
abstract.declarator (213)
    on left: 245 246 247, on right: 250 251 280 282 311 315 318 322
unary.abstract.declarator (214)
    on left: 248 249 250 251, on right: 245 252 255
postfix.abstract.declarator (215)
    on left: 252 253 254 255, on right: 246 253
postfixing.abstract.declarator (216)
    on left: 256 257 258, on right: 4 6 233 234 238 244 247 254 255
    264 266 274
identifier.declarator (217)
    on left: 259 260, on right: 173 174 177 180 225 262 263 312 316
    319 323 345 417 418 420 422 424 426
unary.identifier.declarator (218)
    on left: 261 262 263, on right: 259 265 266
postfix.identifier.declarator (219)
    on left: 264 265 266, on right: 261
paren.identifier.declarator (220)
    on left: 267 268, on right: 3 4 5 6 260 264 268 272
old.function.declarator (221)
    on left: 269 270 271, on right: 226 270 271 273 274 428 430 432
    434 436 438 440 442 444 446
postfix.old.function.declarator (222)
    on left: 272 273 274, on right: 269
identifier.list (223)
    on left: 275 276, on right: 272 276
identifier.or.typedef.name (224)
    on left: 277 278, on right: 329 330 332 351 352 353 354
type.name (225)
    on left: 279 280 281 282, on right: 96 104
attributes.opt (226)
    on left: 283 284, on right: 159 162 165 167 169 173 177 180 182
    184 343 344 345 346
attributes (227)
    on left: 285 286, on right: 284 286
attribute (228)
    on left: 287, on right: 285 286
attribute.list (229)
    on left: 288 289, on right: 287 289
attrib (230)
    on left: 290 291 292, on right: 288 289
any.word (231)
    on left: 293 294 295, on right: 291 292
initializer.opt (232)
    on left: 296 297, on right: 159 162 165 167 169 173 177 180 182
    184
initializer (233)
    on left: 298 299 300, on right: 297 301 302 308
initializer.list (234)
    on left: 301 302, on right: 298 299 302
parameter.type.list (235)
    on left: 303 304 305, on right: 258
parameter.list (236)
    on left: 306 307 308 309, on right: 21 303 304 307 309
parameter.declaration (237)
    on left: 310 311 312 313 314 315 316 317 318 319 320 321 322 323,
    on right: 306 307 308
array.abstract.declarator (238)
    on left: 324 325 326 327, on right: 256 326 327
struct.or.union.specifier (239)
    on left: 328 329 330 331 332, on right: 221
struct.or.union (240)
    on left: 333 334, on right: 328 329 330 331 332
struct.declaration.list (241)
    on left: 335 336, on right: 328 329 336
struct.declaration (242)
    on left: 337 338, on right: 335 336
struct.default.declaring.list (243)
    on left: 339 340, on right: 338 340
struct.declaring.list (244)
    on left: 341 342, on right: 337 342
struct.declarator (245)
    on left: 343 344, on right: 341 342
struct.identifier.declarator (246)
    on left: 345 346, on right: 339 340
bit.field.size.opt (247)
    on left: 347 348, on right: 343 345
bit.field.size (248)
    on left: 349, on right: 344 346 348
enum.specifier (249)
    on left: 350 351 352, on right: 222
enumerator.list (250)
    on left: 353 354, on right: 350 351 354
enumerator.value.opt (251)
    on left: 355 356, on right: 353 354
comma.opt (252)
    on left: 357 358, on right: 350 351
costream.composite.statement (253)
    on left: 359 360, on right: 22 23 388 389 397 399 401 403 405
statement (254)
    on left: 361 362 363 364 365 366 367, on right: 37 39 360 369 370
    371 372 385 386 391 393 395
labeled.statement (255)
    on left: 369 370 371 372, on right: 361
@18 (256)
    on left: 368, on right: 369
compound.statement (257)
    on left: 373 374 375 376, on right: 52 53 362
lblock (258)
    on left: 377, on right: 30 31 32 33 34 49 50 67 68 77 78 79 80
    81 373 374 375 376
rblock (259)
    on left: 378, on right: 30 31 32 33 34 49 50 67 68 77 78 79 80
    81 373 374 375 376
compound.statement.no.new.scope (260)
    on left: 379 380 381 382, on right: 417 420 422 424 426 428 430
    432 434 436 438 440 442 444 446
declaration.list (261)
    on left: 383 384, on right: 19 31 33 34 50 68 78 79 81 374 376
    380 382 384 448
statement.list (262)
    on left: 385 386, on right: 34 67 68 79 381 382 386
expression.statement (263)
    on left: 387, on right: 363
selection.statement (264)
    on left: 388 389 391, on right: 364
$@19 (265)
    on left: 390, on right: 391
iteration.statement (266)
    on left: 393 395 397 399 401 403 405, on right: 365
$@20 (267)
    on left: 392, on right: 393
$@21 (268)
    on left: 394, on right: 395
$@22 (269)
    on left: 396, on right: 397
$@23 (270)
    on left: 398, on right: 399
$@24 (271)
    on left: 400, on right: 401
$@25 (272)
    on left: 402, on right: 403
$@26 (273)
    on left: 404, on right: 405
jump.statement (274)
    on left: 406 407 408 409 410, on right: 366
translation.unit (275)
    on left: 411 412, on right: 1 412
external.definition (276)
    on left: 413 414 415, on right: 411 412
function.definition (277)
    on left: 417 418 420 422 424 426 428 430 432 434 436 438 440 442
    444 446, on right: 414
$@27 (278)
    on left: 416, on right: 417
$@28 (279)
    on left: 419, on right: 420
$@29 (280)
    on left: 421, on right: 422
$@30 (281)
    on left: 423, on right: 424
$@31 (282)
    on left: 425, on right: 426
$@32 (283)
    on left: 427, on right: 428
$@33 (284)
    on left: 429, on right: 430
$@34 (285)
    on left: 431, on right: 432
$@35 (286)
    on left: 433, on right: 434
$@36 (287)
    on left: 435, on right: 436
$@37 (288)
    on left: 437, on right: 438
$@38 (289)
    on left: 439, on right: 440
$@39 (290)
    on left: 441, on right: 442
$@40 (291)
    on left: 443, on right: 444
$@41 (292)
    on left: 445, on right: 446
old.function.declaration.list (293)
    on left: 448, on right: 438 440 442 444 446
$@42 (294)
    on left: 447, on right: 448
constant (295)
    on left: 449 450 451 452 453, on right: 64
string.literal.list (296)
    on left: 454 455, on right: 65 455
type.qualifier (297)
    on left: 456 457 458, on right: 202 209 213 216 217 218
pointer.type.qualifier (298)
    on left: 459 460, on right: 219 220
storage.class (299)
    on left: 461 462 463 464 465, on right: 189 193 196 199 200 203
basic.type.name (300)
    on left: 466 467 468 469 470 471 472 473 474, on right: 190 192
    207 208 210


state 0

    0 $accept: . prog.start $end

    '*'          shift, and go to state 1
    '('          shift, and go to state 2
    AUTO         shift, and go to state 3
    DOUBLE       shift, and go to state 4
    INT          shift, and go to state 5
    STRUCT       shift, and go to state 6
    LONG         shift, and go to state 7
    ENUM         shift, and go to state 8
    REGISTER     shift, and go to state 9
    TYPEDEF      shift, and go to state 10
    CHAR         shift, and go to state 11
    EXTERN       shift, and go to state 12
    UNION        shift, and go to state 13
    CONST        shift, and go to state 14
    FLOAT        shift, and go to state 15
    SHORT        shift, and go to state 16
    UNSIGNED     shift, and go to state 17
    SIGNED       shift, and go to state 18
    VOID         shift, and go to state 19
    VOLATILE     shift, and go to state 20
    STATIC       shift, and go to state 21
    COMPOSITE    shift, and go to state 22
    STREAM       shift, and go to state 23
    IDENTIFIER   shift, and go to state 24
    TYPEDEFname  shift, and go to state 25
    INLINE       shift, and go to state 26

    prog.start                       go to state 27
    stream.type.specifier            go to state 28
    composite.definition             go to state 29
    composite.head                   go to state 30
    declaration                      go to state 31
    declaring.list                   go to state 32
    default.declaring.list           go to state 33
    declaration.specifier            go to state 34
    basic.declaration.specifier      go to state 35
    sue.declaration.specifier        go to state 36
    typedef.declaration.specifier    go to state 37
    declaration.qualifier.list       go to state 38
    type.specifier                   go to state 39
    basic.type.specifier             go to state 40
    sue.type.specifier               go to state 41
    typedef.type.specifier           go to state 42
    type.qualifier.list              go to state 43
    elaborated.type.name             go to state 44
    identifier.declarator            go to state 45
    unary.identifier.declarator      go to state 46
    postfix.identifier.declarator    go to state 47
    paren.identifier.declarator      go to state 48
    old.function.declarator          go to state 49
    postfix.old.function.declarator  go to state 50
    struct.or.union.specifier        go to state 51
    struct.or.union                  go to state 52
    enum.specifier                   go to state 53
    translation.unit                 go to state 54
    external.definition              go to state 55
    function.definition              go to state 56
    type.qualifier                   go to state 57
    storage.class                    go to state 58
    basic.type.name                  go to state 59


state 1

  262 unary.identifier.declarator: '*' . identifier.declarator
  263                            | '*' . pointer.type.qualifier.list identifier.declarator
  270 old.function.declarator: '*' . old.function.declarator
  271                        | '*' . pointer.type.qualifier.list old.function.declarator

    '*'         shift, and go to state 1
    '('         shift, and go to state 2
    CONST       shift, and go to state 60
    VOLATILE    shift, and go to state 61
    IDENTIFIER  shift, and go to state 24

    pointer.type.qualifier.list      go to state 62
    identifier.declarator            go to state 63
    unary.identifier.declarator      go to state 46
    postfix.identifier.declarator    go to state 47
    paren.identifier.declarator      go to state 48
    old.function.declarator          go to state 64
    postfix.old.function.declarator  go to state 50
    pointer.type.qualifier           go to state 65


state 2

  265 postfix.identifier.declarator: '(' . unary.identifier.declarator ')'
  266                              | '(' . unary.identifier.declarator ')' postfixing.abstract.declarator
  268 paren.identifier.declarator: '(' . paren.identifier.declarator ')'
  273 postfix.old.function.declarator: '(' . old.function.declarator ')'
  274                                | '(' . old.function.declarator ')' postfixing.abstract.declarator

    '*'         shift, and go to state 1
    '('         shift, and go to state 2
    IDENTIFIER  shift, and go to state 24

    unary.identifier.declarator      go to state 66
    postfix.identifier.declarator    go to state 47
    paren.identifier.declarator      go to state 67
    old.function.declarator          go to state 68
    postfix.old.function.declarator  go to state 50


state 3

  464 storage.class: AUTO .

    $default  reduce using rule 464 (storage.class)


state 4

  470 basic.type.name: DOUBLE .

    $default  reduce using rule 470 (basic.type.name)


state 5

  468 basic.type.name: INT .

    $default  reduce using rule 468 (basic.type.name)


state 6

  333 struct.or.union: STRUCT .

    $default  reduce using rule 333 (struct.or.union)


state 7

  474 basic.type.name: LONG .

    $default  reduce using rule 474 (basic.type.name)


state 8

  350 enum.specifier: ENUM . '{' enumerator.list comma.opt '}'
  351               | ENUM . identifier.or.typedef.name '{' enumerator.list comma.opt '}'
  352               | ENUM . identifier.or.typedef.name

    '{'          shift, and go to state 69
    IDENTIFIER   shift, and go to state 70
    TYPEDEFname  shift, and go to state 71

    identifier.or.typedef.name  go to state 72


state 9

  465 storage.class: REGISTER .

    $default  reduce using rule 465 (storage.class)


state 10

  461 storage.class: TYPEDEF .

    $default  reduce using rule 461 (storage.class)


state 11

  467 basic.type.name: CHAR .

    $default  reduce using rule 467 (basic.type.name)


state 12

  462 storage.class: EXTERN .

    $default  reduce using rule 462 (storage.class)


state 13

  334 struct.or.union: UNION .

    $default  reduce using rule 334 (struct.or.union)


state 14

  456 type.qualifier: CONST .

    $default  reduce using rule 456 (type.qualifier)


state 15

  469 basic.type.name: FLOAT .

    $default  reduce using rule 469 (basic.type.name)


state 16

  473 basic.type.name: SHORT .

    $default  reduce using rule 473 (basic.type.name)


state 17

  472 basic.type.name: UNSIGNED .

    $default  reduce using rule 472 (basic.type.name)


state 18

  471 basic.type.name: SIGNED .

    $default  reduce using rule 471 (basic.type.name)


state 19

  466 basic.type.name: VOID .

    $default  reduce using rule 466 (basic.type.name)


state 20

  457 type.qualifier: VOLATILE .

    $default  reduce using rule 457 (type.qualifier)


state 21

  463 storage.class: STATIC .

    $default  reduce using rule 463 (storage.class)


state 22

    9 composite.head: COMPOSITE . IDENTIFIER '(' composite.head.inout ')'

    IDENTIFIER  shift, and go to state 73


state 23

    2 stream.type.specifier: STREAM . '<' stream.declaration.list '>'

    '<'  shift, and go to state 74


state 24

  267 paren.identifier.declarator: IDENTIFIER .

    $default  reduce using rule 267 (paren.identifier.declarator)


state 25

  214 typedef.type.specifier: TYPEDEFname .

    $default  reduce using rule 214 (typedef.type.specifier)


state 26

  458 type.qualifier: INLINE .

    $default  reduce using rule 458 (type.qualifier)


state 27

    0 $accept: prog.start . $end

    $end  shift, and go to state 75


state 28

  174 default.declaring.list: stream.type.specifier . identifier.declarator

    '*'         shift, and go to state 76
    '('         shift, and go to state 77
    IDENTIFIER  shift, and go to state 24

    identifier.declarator          go to state 78
    unary.identifier.declarator    go to state 46
    postfix.identifier.declarator  go to state 47
    paren.identifier.declarator    go to state 79


state 29

  415 external.definition: composite.definition .

    $default  reduce using rule 415 (external.definition)


state 30

    8 composite.definition: composite.head . $@1 composite.body.no.new.scope

    $default  reduce using rule 7 ($@1)

    $@1  go to state 80


state 31

  413 external.definition: declaration .

    $default  reduce using rule 413 (external.definition)


state 32

  153 declaration: declaring.list . ';'
  165 declaring.list: declaring.list . ',' declarator @6 attributes.opt $@7 initializer.opt
  170               | declaring.list . ',' error

    ';'  shift, and go to state 81
    ','  shift, and go to state 82


state 33

  154 declaration: default.declaring.list . ';'
  180 default.declaring.list: default.declaring.list . ',' identifier.declarator @14 attributes.opt $@15 initializer.opt
  185                       | default.declaring.list . ',' error

    ';'  shift, and go to state 83
    ','  shift, and go to state 84


state 34

  159 declaring.list: declaration.specifier . declarator $@2 attributes.opt $@3 initializer.opt
  167               | declaration.specifier . error $@8 attributes.opt initializer.opt
  420 function.definition: declaration.specifier . identifier.declarator $@28 compound.statement.no.new.scope
  430                    | declaration.specifier . old.function.declarator $@33 compound.statement.no.new.scope
  440                    | declaration.specifier . old.function.declarator old.function.declaration.list $@38 compound.statement.no.new.scope

    error        shift, and go to state 85
    '*'          shift, and go to state 86
    '('          shift, and go to state 87
    IDENTIFIER   shift, and go to state 24
    TYPEDEFname  shift, and go to state 88

    declarator                        go to state 89
    paren.typedef.declarator          go to state 90
    paren.postfix.typedef.declarator  go to state 91
    parameter.typedef.declarator      go to state 92
    clean.typedef.declarator          go to state 93
    clean.postfix.typedef.declarator  go to state 94
    identifier.declarator             go to state 95
    unary.identifier.declarator       go to state 46
    postfix.identifier.declarator     go to state 47
    paren.identifier.declarator       go to state 48
    old.function.declarator           go to state 96
    postfix.old.function.declarator   go to state 50


state 35

  186 declaration.specifier: basic.declaration.specifier .
  191 basic.declaration.specifier: basic.declaration.specifier . declaration.qualifier
  192                            | basic.declaration.specifier . basic.type.name

    AUTO      shift, and go to state 3
    DOUBLE    shift, and go to state 4
    INT       shift, and go to state 5
    LONG      shift, and go to state 7
    REGISTER  shift, and go to state 9
    TYPEDEF   shift, and go to state 10
    CHAR      shift, and go to state 11
    EXTERN    shift, and go to state 12
    CONST     shift, and go to state 14
    FLOAT     shift, and go to state 15
    SHORT     shift, and go to state 16
    UNSIGNED  shift, and go to state 17
    SIGNED    shift, and go to state 18
    VOID      shift, and go to state 19
    VOLATILE  shift, and go to state 20
    STATIC    shift, and go to state 21
    INLINE    shift, and go to state 26

    $default  reduce using rule 186 (declaration.specifier)

    declaration.qualifier  go to state 97
    type.qualifier         go to state 98
    storage.class          go to state 99
    basic.type.name        go to state 100


state 36

  155 declaration: sue.declaration.specifier . ';'
  187 declaration.specifier: sue.declaration.specifier .
  195 sue.declaration.specifier: sue.declaration.specifier . declaration.qualifier

    ';'       shift, and go to state 101
    AUTO      shift, and go to state 3
    REGISTER  shift, and go to state 9
    TYPEDEF   shift, and go to state 10
    EXTERN    shift, and go to state 12
    CONST     shift, and go to state 14
    VOLATILE  shift, and go to state 20
    STATIC    shift, and go to state 21
    INLINE    shift, and go to state 26

    $default  reduce using rule 187 (declaration.specifier)

    declaration.qualifier  go to state 102
    type.qualifier         go to state 98
    storage.class          go to state 99


state 37

  188 declaration.specifier: typedef.declaration.specifier .
  198 typedef.declaration.specifier: typedef.declaration.specifier . declaration.qualifier

    AUTO      shift, and go to state 3
    REGISTER  shift, and go to state 9
    TYPEDEF   shift, and go to state 10
    EXTERN    shift, and go to state 12
    CONST     shift, and go to state 14
    VOLATILE  shift, and go to state 20
    STATIC    shift, and go to state 21
    INLINE    shift, and go to state 26

    $default  reduce using rule 188 (declaration.specifier)

    declaration.qualifier  go to state 103
    type.qualifier         go to state 98
    storage.class          go to state 99


state 38

  173 default.declaring.list: declaration.qualifier.list . identifier.declarator $@10 attributes.opt $@11 initializer.opt
  182                       | declaration.qualifier.list . error $@16 attributes.opt initializer.opt
  190 basic.declaration.specifier: declaration.qualifier.list . basic.type.name
  194 sue.declaration.specifier: declaration.qualifier.list . elaborated.type.name
  197 typedef.declaration.specifier: declaration.qualifier.list . TYPEDEFname
  201 declaration.qualifier.list: declaration.qualifier.list . declaration.qualifier
  424 function.definition: declaration.qualifier.list . identifier.declarator $@30 compound.statement.no.new.scope
  434                    | declaration.qualifier.list . old.function.declarator $@35 compound.statement.no.new.scope
  444                    | declaration.qualifier.list . old.function.declarator old.function.declaration.list $@40 compound.statement.no.new.scope

    error        shift, and go to state 104
    '*'          shift, and go to state 1
    '('          shift, and go to state 2
    AUTO         shift, and go to state 3
    DOUBLE       shift, and go to state 4
    INT          shift, and go to state 5
    STRUCT       shift, and go to state 6
    LONG         shift, and go to state 7
    ENUM         shift, and go to state 8
    REGISTER     shift, and go to state 9
    TYPEDEF      shift, and go to state 10
    CHAR         shift, and go to state 11
    EXTERN       shift, and go to state 12
    UNION        shift, and go to state 13
    CONST        shift, and go to state 14
    FLOAT        shift, and go to state 15
    SHORT        shift, and go to state 16
    UNSIGNED     shift, and go to state 17
    SIGNED       shift, and go to state 18
    VOID         shift, and go to state 19
    VOLATILE     shift, and go to state 20
    STATIC       shift, and go to state 21
    IDENTIFIER   shift, and go to state 24
    TYPEDEFname  shift, and go to state 105
    INLINE       shift, and go to state 26

    declaration.qualifier            go to state 106
    elaborated.type.name             go to state 107
    identifier.declarator            go to state 108
    unary.identifier.declarator      go to state 46
    postfix.identifier.declarator    go to state 47
    paren.identifier.declarator      go to state 48
    old.function.declarator          go to state 109
    postfix.old.function.declarator  go to state 50
    struct.or.union.specifier        go to state 51
    struct.or.union                  go to state 52
    enum.specifier                   go to state 53
    type.qualifier                   go to state 98
    storage.class                    go to state 99
    basic.type.name                  go to state 110


state 39

  162 declaring.list: type.specifier . declarator $@4 attributes.opt $@5 initializer.opt
  169               | type.specifier . error $@9 attributes.opt initializer.opt
  422 function.definition: type.specifier . identifier.declarator $@29 compound.statement.no.new.scope
  432                    | type.specifier . old.function.declarator $@34 compound.statement.no.new.scope
  442                    | type.specifier . old.function.declarator old.function.declaration.list $@39 compound.statement.no.new.scope

    error        shift, and go to state 111
    '*'          shift, and go to state 86
    '('          shift, and go to state 87
    IDENTIFIER   shift, and go to state 24
    TYPEDEFname  shift, and go to state 88

    declarator                        go to state 112
    paren.typedef.declarator          go to state 90
    paren.postfix.typedef.declarator  go to state 91
    parameter.typedef.declarator      go to state 92
    clean.typedef.declarator          go to state 93
    clean.postfix.typedef.declarator  go to state 94
    identifier.declarator             go to state 113
    unary.identifier.declarator       go to state 46
    postfix.identifier.declarator     go to state 47
    paren.identifier.declarator       go to state 48
    old.function.declarator           go to state 114
    postfix.old.function.declarator   go to state 50


state 40

  189 basic.declaration.specifier: basic.type.specifier . storage.class
  204 type.specifier: basic.type.specifier .
  209 basic.type.specifier: basic.type.specifier . type.qualifier
  210                     | basic.type.specifier . basic.type.name

    AUTO      shift, and go to state 3
    DOUBLE    shift, and go to state 4
    INT       shift, and go to state 5
    LONG      shift, and go to state 7
    REGISTER  shift, and go to state 9
    TYPEDEF   shift, and go to state 10
    CHAR      shift, and go to state 11
    EXTERN    shift, and go to state 12
    CONST     shift, and go to state 14
    FLOAT     shift, and go to state 15
    SHORT     shift, and go to state 16
    UNSIGNED  shift, and go to state 17
    SIGNED    shift, and go to state 18
    VOID      shift, and go to state 19
    VOLATILE  shift, and go to state 20
    STATIC    shift, and go to state 21
    INLINE    shift, and go to state 26

    $default  reduce using rule 204 (type.specifier)

    type.qualifier   go to state 115
    storage.class    go to state 116
    basic.type.name  go to state 117


state 41

  156 declaration: sue.type.specifier . ';'
  193 sue.declaration.specifier: sue.type.specifier . storage.class
  205 type.specifier: sue.type.specifier .
  213 sue.type.specifier: sue.type.specifier . type.qualifier

    ';'       shift, and go to state 118
    AUTO      shift, and go to state 3
    REGISTER  shift, and go to state 9
    TYPEDEF   shift, and go to state 10
    EXTERN    shift, and go to state 12
    CONST     shift, and go to state 14
    VOLATILE  shift, and go to state 20
    STATIC    shift, and go to state 21
    INLINE    shift, and go to state 26

    $default  reduce using rule 205 (type.specifier)

    type.qualifier  go to state 119
    storage.class   go to state 120


state 42

  196 typedef.declaration.specifier: typedef.type.specifier . storage.class
  206 type.specifier: typedef.type.specifier .
  216 typedef.type.specifier: typedef.type.specifier . type.qualifier

    AUTO      shift, and go to state 3
    REGISTER  shift, and go to state 9
    TYPEDEF   shift, and go to state 10
    EXTERN    shift, and go to state 12
    CONST     shift, and go to state 14
    VOLATILE  shift, and go to state 20
    STATIC    shift, and go to state 21
    INLINE    shift, and go to state 26

    $default  reduce using rule 206 (type.specifier)

    type.qualifier  go to state 121
    storage.class   go to state 122


state 43

  177 default.declaring.list: type.qualifier.list . identifier.declarator $@12 attributes.opt $@13 initializer.opt
  184                       | type.qualifier.list . error $@17 attributes.opt initializer.opt
  200 declaration.qualifier.list: type.qualifier.list . storage.class
  208 basic.type.specifier: type.qualifier.list . basic.type.name
  212 sue.type.specifier: type.qualifier.list . elaborated.type.name
  215 typedef.type.specifier: type.qualifier.list . TYPEDEFname
  218 type.qualifier.list: type.qualifier.list . type.qualifier
  426 function.definition: type.qualifier.list . identifier.declarator $@31 compound.statement.no.new.scope
  436                    | type.qualifier.list . old.function.declarator $@36 compound.statement.no.new.scope
  446                    | type.qualifier.list . old.function.declarator old.function.declaration.list $@41 compound.statement.no.new.scope

    error        shift, and go to state 123
    '*'          shift, and go to state 1
    '('          shift, and go to state 2
    AUTO         shift, and go to state 3
    DOUBLE       shift, and go to state 4
    INT          shift, and go to state 5
    STRUCT       shift, and go to state 6
    LONG         shift, and go to state 7
    ENUM         shift, and go to state 8
    REGISTER     shift, and go to state 9
    TYPEDEF      shift, and go to state 10
    CHAR         shift, and go to state 11
    EXTERN       shift, and go to state 12
    UNION        shift, and go to state 13
    CONST        shift, and go to state 14
    FLOAT        shift, and go to state 15
    SHORT        shift, and go to state 16
    UNSIGNED     shift, and go to state 17
    SIGNED       shift, and go to state 18
    VOID         shift, and go to state 19
    VOLATILE     shift, and go to state 20
    STATIC       shift, and go to state 21
    IDENTIFIER   shift, and go to state 24
    TYPEDEFname  shift, and go to state 124
    INLINE       shift, and go to state 26

    elaborated.type.name             go to state 125
    identifier.declarator            go to state 126
    unary.identifier.declarator      go to state 46
    postfix.identifier.declarator    go to state 47
    paren.identifier.declarator      go to state 48
    old.function.declarator          go to state 127
    postfix.old.function.declarator  go to state 50
    struct.or.union.specifier        go to state 51
    struct.or.union                  go to state 52
    enum.specifier                   go to state 53
    type.qualifier                   go to state 128
    storage.class                    go to state 129
    basic.type.name                  go to state 130


state 44

  211 sue.type.specifier: elaborated.type.name .

    $default  reduce using rule 211 (sue.type.specifier)


state 45

  417 function.definition: identifier.declarator . $@27 compound.statement.no.new.scope
  418                    | identifier.declarator . BOGUS

    BOGUS  shift, and go to state 131

    $default  reduce using rule 416 ($@27)

    $@27  go to state 132


state 46

  259 identifier.declarator: unary.identifier.declarator .

    $default  reduce using rule 259 (identifier.declarator)


state 47

  261 unary.identifier.declarator: postfix.identifier.declarator .

    $default  reduce using rule 261 (unary.identifier.declarator)


state 48

  260 identifier.declarator: paren.identifier.declarator .
  264 postfix.identifier.declarator: paren.identifier.declarator . postfixing.abstract.declarator
  272 postfix.old.function.declarator: paren.identifier.declarator . '(' identifier.list ')'

    '('  shift, and go to state 133
    '['  shift, and go to state 134

    $default  reduce using rule 260 (identifier.declarator)

    postfixing.abstract.declarator  go to state 135
    array.abstract.declarator       go to state 136


state 49

  428 function.definition: old.function.declarator . $@32 compound.statement.no.new.scope
  438                    | old.function.declarator . old.function.declaration.list $@37 compound.statement.no.new.scope

    '{'       reduce using rule 427 ($@32)
    $default  reduce using rule 447 ($@42)

    $@32                           go to state 137
    old.function.declaration.list  go to state 138
    $@42                           go to state 139


state 50

  269 old.function.declarator: postfix.old.function.declarator .

    $default  reduce using rule 269 (old.function.declarator)


state 51

  221 elaborated.type.name: struct.or.union.specifier .

    $default  reduce using rule 221 (elaborated.type.name)


state 52

  328 struct.or.union.specifier: struct.or.union . '{' struct.declaration.list '}'
  329                          | struct.or.union . identifier.or.typedef.name '{' struct.declaration.list '}'
  330                          | struct.or.union . identifier.or.typedef.name
  331                          | struct.or.union . '{' '}'
  332                          | struct.or.union . identifier.or.typedef.name '{' '}'

    '{'          shift, and go to state 140
    IDENTIFIER   shift, and go to state 70
    TYPEDEFname  shift, and go to state 71

    identifier.or.typedef.name  go to state 141


state 53

  222 elaborated.type.name: enum.specifier .

    $default  reduce using rule 222 (elaborated.type.name)


state 54

    1 prog.start: translation.unit .
  412 translation.unit: translation.unit . external.definition

    '*'          shift, and go to state 1
    '('          shift, and go to state 2
    AUTO         shift, and go to state 3
    DOUBLE       shift, and go to state 4
    INT          shift, and go to state 5
    STRUCT       shift, and go to state 6
    LONG         shift, and go to state 7
    ENUM         shift, and go to state 8
    REGISTER     shift, and go to state 9
    TYPEDEF      shift, and go to state 10
    CHAR         shift, and go to state 11
    EXTERN       shift, and go to state 12
    UNION        shift, and go to state 13
    CONST        shift, and go to state 14
    FLOAT        shift, and go to state 15
    SHORT        shift, and go to state 16
    UNSIGNED     shift, and go to state 17
    SIGNED       shift, and go to state 18
    VOID         shift, and go to state 19
    VOLATILE     shift, and go to state 20
    STATIC       shift, and go to state 21
    COMPOSITE    shift, and go to state 22
    STREAM       shift, and go to state 23
    IDENTIFIER   shift, and go to state 24
    TYPEDEFname  shift, and go to state 25
    INLINE       shift, and go to state 26

    $default  reduce using rule 1 (prog.start)

    stream.type.specifier            go to state 28
    composite.definition             go to state 29
    composite.head                   go to state 30
    declaration                      go to state 31
    declaring.list                   go to state 32
    default.declaring.list           go to state 33
    declaration.specifier            go to state 34
    basic.declaration.specifier      go to state 35
    sue.declaration.specifier        go to state 36
    typedef.declaration.specifier    go to state 37
    declaration.qualifier.list       go to state 38
    type.specifier                   go to state 39
    basic.type.specifier             go to state 40
    sue.type.specifier               go to state 41
    typedef.type.specifier           go to state 42
    type.qualifier.list              go to state 43
    elaborated.type.name             go to state 44
    identifier.declarator            go to state 45
    unary.identifier.declarator      go to state 46
    postfix.identifier.declarator    go to state 47
    paren.identifier.declarator      go to state 48
    old.function.declarator          go to state 49
    postfix.old.function.declarator  go to state 50
    struct.or.union.specifier        go to state 51
    struct.or.union                  go to state 52
    enum.specifier                   go to state 53
    external.definition              go to state 142
    function.definition              go to state 56
    type.qualifier                   go to state 57
    storage.class                    go to state 58
    basic.type.name                  go to state 59


state 55

  411 translation.unit: external.definition .

    $default  reduce using rule 411 (translation.unit)


state 56

  414 external.definition: function.definition .

    $default  reduce using rule 414 (external.definition)


state 57

  217 type.qualifier.list: type.qualifier .

    $default  reduce using rule 217 (type.qualifier.list)


state 58

  199 declaration.qualifier.list: storage.class .

    $default  reduce using rule 199 (declaration.qualifier.list)


state 59

  207 basic.type.specifier: basic.type.name .

    $default  reduce using rule 207 (basic.type.specifier)


state 60

  459 pointer.type.qualifier: CONST .

    $default  reduce using rule 459 (pointer.type.qualifier)


state 61

  460 pointer.type.qualifier: VOLATILE .

    $default  reduce using rule 460 (pointer.type.qualifier)


state 62

  220 pointer.type.qualifier.list: pointer.type.qualifier.list . pointer.type.qualifier
  263 unary.identifier.declarator: '*' pointer.type.qualifier.list . identifier.declarator
  271 old.function.declarator: '*' pointer.type.qualifier.list . old.function.declarator

    '*'         shift, and go to state 1
    '('         shift, and go to state 2
    CONST       shift, and go to state 60
    VOLATILE    shift, and go to state 61
    IDENTIFIER  shift, and go to state 24

    identifier.declarator            go to state 143
    unary.identifier.declarator      go to state 46
    postfix.identifier.declarator    go to state 47
    paren.identifier.declarator      go to state 48
    old.function.declarator          go to state 144
    postfix.old.function.declarator  go to state 50
    pointer.type.qualifier           go to state 145


state 63

  262 unary.identifier.declarator: '*' identifier.declarator .

    $default  reduce using rule 262 (unary.identifier.declarator)


state 64

  270 old.function.declarator: '*' old.function.declarator .

    $default  reduce using rule 270 (old.function.declarator)


state 65

  219 pointer.type.qualifier.list: pointer.type.qualifier .

    $default  reduce using rule 219 (pointer.type.qualifier.list)


state 66

  265 postfix.identifier.declarator: '(' unary.identifier.declarator . ')'
  266                              | '(' unary.identifier.declarator . ')' postfixing.abstract.declarator

    ')'  shift, and go to state 146


state 67

  264 postfix.identifier.declarator: paren.identifier.declarator . postfixing.abstract.declarator
  268 paren.identifier.declarator: '(' paren.identifier.declarator . ')'
  272 postfix.old.function.declarator: paren.identifier.declarator . '(' identifier.list ')'

    '('  shift, and go to state 133
    ')'  shift, and go to state 147
    '['  shift, and go to state 134

    postfixing.abstract.declarator  go to state 135
    array.abstract.declarator       go to state 136


state 68

  273 postfix.old.function.declarator: '(' old.function.declarator . ')'
  274                                | '(' old.function.declarator . ')' postfixing.abstract.declarator

    ')'  shift, and go to state 148


state 69

  350 enum.specifier: ENUM '{' . enumerator.list comma.opt '}'

    IDENTIFIER   shift, and go to state 70
    TYPEDEFname  shift, and go to state 71

    identifier.or.typedef.name  go to state 149
    enumerator.list             go to state 150


state 70

  277 identifier.or.typedef.name: IDENTIFIER .

    $default  reduce using rule 277 (identifier.or.typedef.name)


state 71

  278 identifier.or.typedef.name: TYPEDEFname .

    $default  reduce using rule 278 (identifier.or.typedef.name)


state 72

  351 enum.specifier: ENUM identifier.or.typedef.name . '{' enumerator.list comma.opt '}'
  352               | ENUM identifier.or.typedef.name .

    '{'  shift, and go to state 151

    $default  reduce using rule 352 (enum.specifier)


state 73

    9 composite.head: COMPOSITE IDENTIFIER . '(' composite.head.inout ')'

    '('  shift, and go to state 152


state 74

    2 stream.type.specifier: STREAM '<' . stream.declaration.list '>'

    DOUBLE       shift, and go to state 4
    INT          shift, and go to state 5
    STRUCT       shift, and go to state 6
    LONG         shift, and go to state 7
    ENUM         shift, and go to state 8
    CHAR         shift, and go to state 11
    UNION        shift, and go to state 13
    CONST        shift, and go to state 14
    FLOAT        shift, and go to state 15
    SHORT        shift, and go to state 16
    UNSIGNED     shift, and go to state 17
    SIGNED       shift, and go to state 18
    VOID         shift, and go to state 19
    VOLATILE     shift, and go to state 20
    TYPEDEFname  shift, and go to state 25
    INLINE       shift, and go to state 26

    stream.declaration.list    go to state 153
    type.specifier             go to state 154
    basic.type.specifier       go to state 155
    sue.type.specifier         go to state 156
    typedef.type.specifier     go to state 157
    type.qualifier.list        go to state 158
    elaborated.type.name       go to state 44
    struct.or.union.specifier  go to state 51
    struct.or.union            go to state 52
    enum.specifier             go to state 53
    type.qualifier             go to state 57
    basic.type.name            go to state 59


state 75

    0 $accept: prog.start $end .

    $default  accept


state 76

  262 unary.identifier.declarator: '*' . identifier.declarator
  263                            | '*' . pointer.type.qualifier.list identifier.declarator

    '*'         shift, and go to state 76
    '('         shift, and go to state 77
    CONST       shift, and go to state 60
    VOLATILE    shift, and go to state 61
    IDENTIFIER  shift, and go to state 24

    pointer.type.qualifier.list    go to state 159
    identifier.declarator          go to state 63
    unary.identifier.declarator    go to state 46
    postfix.identifier.declarator  go to state 47
    paren.identifier.declarator    go to state 79
    pointer.type.qualifier         go to state 65


state 77

  265 postfix.identifier.declarator: '(' . unary.identifier.declarator ')'
  266                              | '(' . unary.identifier.declarator ')' postfixing.abstract.declarator
  268 paren.identifier.declarator: '(' . paren.identifier.declarator ')'

    '*'         shift, and go to state 76
    '('         shift, and go to state 77
    IDENTIFIER  shift, and go to state 24

    unary.identifier.declarator    go to state 66
    postfix.identifier.declarator  go to state 47
    paren.identifier.declarator    go to state 160


state 78

  174 default.declaring.list: stream.type.specifier identifier.declarator .

    $default  reduce using rule 174 (default.declaring.list)


state 79

  260 identifier.declarator: paren.identifier.declarator .
  264 postfix.identifier.declarator: paren.identifier.declarator . postfixing.abstract.declarator

    '('  shift, and go to state 161
    '['  shift, and go to state 134

    $default  reduce using rule 260 (identifier.declarator)

    postfixing.abstract.declarator  go to state 135
    array.abstract.declarator       go to state 136


state 80

    8 composite.definition: composite.head $@1 . composite.body.no.new.scope

    '{'  shift, and go to state 162

    composite.body.no.new.scope  go to state 163


state 81

  153 declaration: declaring.list ';' .

    $default  reduce using rule 153 (declaration)


state 82

  165 declaring.list: declaring.list ',' . declarator @6 attributes.opt $@7 initializer.opt
  170               | declaring.list ',' . error

    error        shift, and go to state 164
    '*'          shift, and go to state 86
    '('          shift, and go to state 87
    IDENTIFIER   shift, and go to state 24
    TYPEDEFname  shift, and go to state 88

    declarator                        go to state 165
    paren.typedef.declarator          go to state 90
    paren.postfix.typedef.declarator  go to state 91
    parameter.typedef.declarator      go to state 92
    clean.typedef.declarator          go to state 93
    clean.postfix.typedef.declarator  go to state 94
    identifier.declarator             go to state 166
    unary.identifier.declarator       go to state 46
    postfix.identifier.declarator     go to state 47
    paren.identifier.declarator       go to state 48
    old.function.declarator           go to state 167
    postfix.old.function.declarator   go to state 50


state 83

  154 declaration: default.declaring.list ';' .

    $default  reduce using rule 154 (declaration)


state 84

  180 default.declaring.list: default.declaring.list ',' . identifier.declarator @14 attributes.opt $@15 initializer.opt
  185                       | default.declaring.list ',' . error

    error       shift, and go to state 168
    '*'         shift, and go to state 76
    '('         shift, and go to state 77
    IDENTIFIER  shift, and go to state 24

    identifier.declarator          go to state 169
    unary.identifier.declarator    go to state 46
    postfix.identifier.declarator  go to state 47
    paren.identifier.declarator    go to state 79


state 85

  167 declaring.list: declaration.specifier error . $@8 attributes.opt initializer.opt

    $default  reduce using rule 166 ($@8)

    $@8  go to state 170


state 86

  228 paren.typedef.declarator: '*' . paren.typedef.declarator
  229                         | '*' . '(' simple.paren.typedef.declarator ')'
  230                         | '*' . pointer.type.qualifier.list '(' simple.paren.typedef.declarator ')'
  231                         | '*' . pointer.type.qualifier.list paren.typedef.declarator
  241 clean.typedef.declarator: '*' . parameter.typedef.declarator
  242                         | '*' . pointer.type.qualifier.list parameter.typedef.declarator
  262 unary.identifier.declarator: '*' . identifier.declarator
  263                            | '*' . pointer.type.qualifier.list identifier.declarator
  270 old.function.declarator: '*' . old.function.declarator
  271                        | '*' . pointer.type.qualifier.list old.function.declarator

    '*'          shift, and go to state 86
    '('          shift, and go to state 171
    CONST        shift, and go to state 60
    VOLATILE     shift, and go to state 61
    IDENTIFIER   shift, and go to state 24
    TYPEDEFname  shift, and go to state 88

    pointer.type.qualifier.list       go to state 172
    paren.typedef.declarator          go to state 173
    paren.postfix.typedef.declarator  go to state 91
    parameter.typedef.declarator      go to state 174
    clean.typedef.declarator          go to state 93
    clean.postfix.typedef.declarator  go to state 94
    identifier.declarator             go to state 63
    unary.identifier.declarator       go to state 46
    postfix.identifier.declarator     go to state 47
    paren.identifier.declarator       go to state 48
    old.function.declarator           go to state 64
    postfix.old.function.declarator   go to state 50
    pointer.type.qualifier            go to state 65


state 87

  232 paren.postfix.typedef.declarator: '(' . paren.typedef.declarator ')'
  233                                 | '(' . simple.paren.typedef.declarator postfixing.abstract.declarator ')'
  234                                 | '(' . paren.typedef.declarator ')' postfixing.abstract.declarator
  243 clean.postfix.typedef.declarator: '(' . clean.typedef.declarator ')'
  244                                 | '(' . clean.typedef.declarator ')' postfixing.abstract.declarator
  265 postfix.identifier.declarator: '(' . unary.identifier.declarator ')'
  266                              | '(' . unary.identifier.declarator ')' postfixing.abstract.declarator
  268 paren.identifier.declarator: '(' . paren.identifier.declarator ')'
  273 postfix.old.function.declarator: '(' . old.function.declarator ')'
  274                                | '(' . old.function.declarator ')' postfixing.abstract.declarator

    '*'          shift, and go to state 86
    '('          shift, and go to state 175
    IDENTIFIER   shift, and go to state 24
    TYPEDEFname  shift, and go to state 176

    paren.typedef.declarator          go to state 177
    paren.postfix.typedef.declarator  go to state 91
    simple.paren.typedef.declarator   go to state 178
    clean.typedef.declarator          go to state 179
    clean.postfix.typedef.declarator  go to state 94
    unary.identifier.declarator       go to state 66
    postfix.identifier.declarator     go to state 47
    paren.identifier.declarator       go to state 67
    old.function.declarator           go to state 68
    postfix.old.function.declarator   go to state 50


state 88

  237 parameter.typedef.declarator: TYPEDEFname .
  238                             | TYPEDEFname . postfixing.abstract.declarator

    '('  shift, and go to state 161
    '['  shift, and go to state 134

    $default  reduce using rule 237 (parameter.typedef.declarator)

    postfixing.abstract.declarator  go to state 180
    array.abstract.declarator       go to state 136


state 89

  159 declaring.list: declaration.specifier declarator . $@2 attributes.opt $@3 initializer.opt

    $default  reduce using rule 157 ($@2)

    $@2  go to state 181


state 90

  223 declarator: paren.typedef.declarator .

    $default  reduce using rule 223 (declarator)


state 91

  227 paren.typedef.declarator: paren.postfix.typedef.declarator .

    $default  reduce using rule 227 (paren.typedef.declarator)


state 92

  224 declarator: parameter.typedef.declarator .

    $default  reduce using rule 224 (declarator)


state 93

  239 parameter.typedef.declarator: clean.typedef.declarator .

    $default  reduce using rule 239 (parameter.typedef.declarator)


state 94

  240 clean.typedef.declarator: clean.postfix.typedef.declarator .

    $default  reduce using rule 240 (clean.typedef.declarator)


state 95

  225 declarator: identifier.declarator .
  420 function.definition: declaration.specifier identifier.declarator . $@28 compound.statement.no.new.scope

    '{'       reduce using rule 419 ($@28)
    $default  reduce using rule 225 (declarator)

    $@28  go to state 182


state 96

  226 declarator: old.function.declarator .
  430 function.definition: declaration.specifier old.function.declarator . $@33 compound.statement.no.new.scope
  440                    | declaration.specifier old.function.declarator . old.function.declaration.list $@38 compound.statement.no.new.scope

    ';'        reduce using rule 226 (declarator)
    '{'        reduce using rule 429 ($@33)
    ','        reduce using rule 226 (declarator)
    '='        reduce using rule 226 (declarator)
    ATTRIBUTE  reduce using rule 226 (declarator)
    $default   reduce using rule 447 ($@42)

    $@33                           go to state 183
    old.function.declaration.list  go to state 184
    $@42                           go to state 139


state 97

  191 basic.declaration.specifier: basic.declaration.specifier declaration.qualifier .

    $default  reduce using rule 191 (basic.declaration.specifier)


state 98

  202 declaration.qualifier: type.qualifier .

    $default  reduce using rule 202 (declaration.qualifier)


state 99

  203 declaration.qualifier: storage.class .

    $default  reduce using rule 203 (declaration.qualifier)


state 100

  192 basic.declaration.specifier: basic.declaration.specifier basic.type.name .

    $default  reduce using rule 192 (basic.declaration.specifier)


state 101

  155 declaration: sue.declaration.specifier ';' .

    $default  reduce using rule 155 (declaration)


state 102

  195 sue.declaration.specifier: sue.declaration.specifier declaration.qualifier .

    $default  reduce using rule 195 (sue.declaration.specifier)


state 103

  198 typedef.declaration.specifier: typedef.declaration.specifier declaration.qualifier .

    $default  reduce using rule 198 (typedef.declaration.specifier)


state 104

  182 default.declaring.list: declaration.qualifier.list error . $@16 attributes.opt initializer.opt

    $default  reduce using rule 181 ($@16)

    $@16  go to state 185


state 105

  197 typedef.declaration.specifier: declaration.qualifier.list TYPEDEFname .

    $default  reduce using rule 197 (typedef.declaration.specifier)


state 106

  201 declaration.qualifier.list: declaration.qualifier.list declaration.qualifier .

    $default  reduce using rule 201 (declaration.qualifier.list)


state 107

  194 sue.declaration.specifier: declaration.qualifier.list elaborated.type.name .

    $default  reduce using rule 194 (sue.declaration.specifier)


state 108

  173 default.declaring.list: declaration.qualifier.list identifier.declarator . $@10 attributes.opt $@11 initializer.opt
  424 function.definition: declaration.qualifier.list identifier.declarator . $@30 compound.statement.no.new.scope

    '{'       reduce using rule 423 ($@30)
    $default  reduce using rule 171 ($@10)

    $@10  go to state 186
    $@30  go to state 187


state 109

  434 function.definition: declaration.qualifier.list old.function.declarator . $@35 compound.statement.no.new.scope
  444                    | declaration.qualifier.list old.function.declarator . old.function.declaration.list $@40 compound.statement.no.new.scope

    '{'       reduce using rule 433 ($@35)
    $default  reduce using rule 447 ($@42)

    $@35                           go to state 188
    old.function.declaration.list  go to state 189
    $@42                           go to state 139


state 110

  190 basic.declaration.specifier: declaration.qualifier.list basic.type.name .

    $default  reduce using rule 190 (basic.declaration.specifier)


state 111

  169 declaring.list: type.specifier error . $@9 attributes.opt initializer.opt

    $default  reduce using rule 168 ($@9)

    $@9  go to state 190


state 112

  162 declaring.list: type.specifier declarator . $@4 attributes.opt $@5 initializer.opt

    $default  reduce using rule 160 ($@4)

    $@4  go to state 191


state 113

  225 declarator: identifier.declarator .
  422 function.definition: type.specifier identifier.declarator . $@29 compound.statement.no.new.scope

    '{'       reduce using rule 421 ($@29)
    $default  reduce using rule 225 (declarator)

    $@29  go to state 192


state 114

  226 declarator: old.function.declarator .
  432 function.definition: type.specifier old.function.declarator . $@34 compound.statement.no.new.scope
  442                    | type.specifier old.function.declarator . old.function.declaration.list $@39 compound.statement.no.new.scope

    ';'        reduce using rule 226 (declarator)
    '{'        reduce using rule 431 ($@34)
    ','        reduce using rule 226 (declarator)
    '='        reduce using rule 226 (declarator)
    ATTRIBUTE  reduce using rule 226 (declarator)
    $default   reduce using rule 447 ($@42)

    $@34                           go to state 193
    old.function.declaration.list  go to state 194
    $@42                           go to state 139


state 115

  209 basic.type.specifier: basic.type.specifier type.qualifier .

    $default  reduce using rule 209 (basic.type.specifier)


state 116

  189 basic.declaration.specifier: basic.type.specifier storage.class .

    $default  reduce using rule 189 (basic.declaration.specifier)


state 117

  210 basic.type.specifier: basic.type.specifier basic.type.name .

    $default  reduce using rule 210 (basic.type.specifier)


state 118

  156 declaration: sue.type.specifier ';' .

    $default  reduce using rule 156 (declaration)


state 119

  213 sue.type.specifier: sue.type.specifier type.qualifier .

    $default  reduce using rule 213 (sue.type.specifier)


state 120

  193 sue.declaration.specifier: sue.type.specifier storage.class .

    $default  reduce using rule 193 (sue.declaration.specifier)


state 121

  216 typedef.type.specifier: typedef.type.specifier type.qualifier .

    $default  reduce using rule 216 (typedef.type.specifier)


state 122

  196 typedef.declaration.specifier: typedef.type.specifier storage.class .

    $default  reduce using rule 196 (typedef.declaration.specifier)


state 123

  184 default.declaring.list: type.qualifier.list error . $@17 attributes.opt initializer.opt

    $default  reduce using rule 183 ($@17)

    $@17  go to state 195


state 124

  215 typedef.type.specifier: type.qualifier.list TYPEDEFname .

    $default  reduce using rule 215 (typedef.type.specifier)


state 125

  212 sue.type.specifier: type.qualifier.list elaborated.type.name .

    $default  reduce using rule 212 (sue.type.specifier)


state 126

  177 default.declaring.list: type.qualifier.list identifier.declarator . $@12 attributes.opt $@13 initializer.opt
  426 function.definition: type.qualifier.list identifier.declarator . $@31 compound.statement.no.new.scope

    '{'       reduce using rule 425 ($@31)
    $default  reduce using rule 175 ($@12)

    $@12  go to state 196
    $@31  go to state 197


state 127

  436 function.definition: type.qualifier.list old.function.declarator . $@36 compound.statement.no.new.scope
  446                    | type.qualifier.list old.function.declarator . old.function.declaration.list $@41 compound.statement.no.new.scope

    '{'       reduce using rule 435 ($@36)
    $default  reduce using rule 447 ($@42)

    $@36                           go to state 198
    old.function.declaration.list  go to state 199
    $@42                           go to state 139


state 128

  218 type.qualifier.list: type.qualifier.list type.qualifier .

    $default  reduce using rule 218 (type.qualifier.list)


state 129

  200 declaration.qualifier.list: type.qualifier.list storage.class .

    $default  reduce using rule 200 (declaration.qualifier.list)


state 130

  208 basic.type.specifier: type.qualifier.list basic.type.name .

    $default  reduce using rule 208 (basic.type.specifier)


state 131

  418 function.definition: identifier.declarator BOGUS .

    $default  reduce using rule 418 (function.definition)


state 132

  417 function.definition: identifier.declarator $@27 . compound.statement.no.new.scope

    '{'  shift, and go to state 200

    compound.statement.no.new.scope  go to state 201


state 133

  257 postfixing.abstract.declarator: '(' . ')'
  258                               | '(' . parameter.type.list ')'
  272 postfix.old.function.declarator: paren.identifier.declarator '(' . identifier.list ')'

    ')'          shift, and go to state 202
    AUTO         shift, and go to state 3
    DOUBLE       shift, and go to state 4
    INT          shift, and go to state 5
    STRUCT       shift, and go to state 6
    LONG         shift, and go to state 7
    ENUM         shift, and go to state 8
    REGISTER     shift, and go to state 9
    TYPEDEF      shift, and go to state 10
    CHAR         shift, and go to state 11
    EXTERN       shift, and go to state 12
    UNION        shift, and go to state 13
    CONST        shift, and go to state 14
    FLOAT        shift, and go to state 15
    SHORT        shift, and go to state 16
    UNSIGNED     shift, and go to state 17
    SIGNED       shift, and go to state 18
    VOID         shift, and go to state 19
    VOLATILE     shift, and go to state 20
    STATIC       shift, and go to state 21
    IDENTIFIER   shift, and go to state 203
    TYPEDEFname  shift, and go to state 25
    ELLIPSIS     shift, and go to state 204
    INLINE       shift, and go to state 26

    declaration.specifier          go to state 205
    basic.declaration.specifier    go to state 35
    sue.declaration.specifier      go to state 206
    typedef.declaration.specifier  go to state 37
    declaration.qualifier.list     go to state 207
    type.specifier                 go to state 208
    basic.type.specifier           go to state 40
    sue.type.specifier             go to state 209
    typedef.type.specifier         go to state 42
    type.qualifier.list            go to state 210
    elaborated.type.name           go to state 44
    identifier.list                go to state 211
    parameter.type.list            go to state 212
    parameter.list                 go to state 213
    parameter.declaration          go to state 214
    struct.or.union.specifier      go to state 51
    struct.or.union                go to state 52
    enum.specifier                 go to state 53
    type.qualifier                 go to state 57
    storage.class                  go to state 58
    basic.type.name                go to state 59


state 134

  324 array.abstract.declarator: '[' . ']'
  325                          | '[' . constant.expression ']'

    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    ']'                shift, and go to state 222
    SIZEOF             shift, and go to state 223
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 227
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    primary.expression         go to state 236
    postfix.expression         go to state 237
    unary.expression           go to state 238
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 241
    additive.expression        go to state 242
    shift.expression           go to state 243
    relational.expression      go to state 244
    equality.expression        go to state 245
    AND.expression             go to state 246
    exclusive.OR.expression    go to state 247
    inclusive.OR.expression    go to state 248
    logical.AND.expression     go to state 249
    logical.OR.expression      go to state 250
    conditional.expression     go to state 251
    constant.expression        go to state 252
    constant                   go to state 253
    string.literal.list        go to state 254


state 135

  264 postfix.identifier.declarator: paren.identifier.declarator postfixing.abstract.declarator .

    $default  reduce using rule 264 (postfix.identifier.declarator)


state 136

  256 postfixing.abstract.declarator: array.abstract.declarator .
  326 array.abstract.declarator: array.abstract.declarator . '[' constant.expression ']'
  327                          | array.abstract.declarator . '[' ']'

    '['  shift, and go to state 255

    $default  reduce using rule 256 (postfixing.abstract.declarator)


state 137

  428 function.definition: old.function.declarator $@32 . compound.statement.no.new.scope

    '{'  shift, and go to state 200

    compound.statement.no.new.scope  go to state 256


state 138

  438 function.definition: old.function.declarator old.function.declaration.list . $@37 compound.statement.no.new.scope

    $default  reduce using rule 437 ($@37)

    $@37  go to state 257


state 139

  448 old.function.declaration.list: $@42 . declaration.list

    AUTO         shift, and go to state 3
    DOUBLE       shift, and go to state 4
    INT          shift, and go to state 5
    STRUCT       shift, and go to state 6
    LONG         shift, and go to state 7
    ENUM         shift, and go to state 8
    REGISTER     shift, and go to state 9
    TYPEDEF      shift, and go to state 10
    CHAR         shift, and go to state 11
    EXTERN       shift, and go to state 12
    UNION        shift, and go to state 13
    CONST        shift, and go to state 14
    FLOAT        shift, and go to state 15
    SHORT        shift, and go to state 16
    UNSIGNED     shift, and go to state 17
    SIGNED       shift, and go to state 18
    VOID         shift, and go to state 19
    VOLATILE     shift, and go to state 20
    STATIC       shift, and go to state 21
    STREAM       shift, and go to state 23
    TYPEDEFname  shift, and go to state 25
    INLINE       shift, and go to state 26

    stream.type.specifier          go to state 28
    declaration                    go to state 258
    declaring.list                 go to state 32
    default.declaring.list         go to state 33
    declaration.specifier          go to state 259
    basic.declaration.specifier    go to state 35
    sue.declaration.specifier      go to state 36
    typedef.declaration.specifier  go to state 37
    declaration.qualifier.list     go to state 260
    type.specifier                 go to state 261
    basic.type.specifier           go to state 40
    sue.type.specifier             go to state 41
    typedef.type.specifier         go to state 42
    type.qualifier.list            go to state 262
    elaborated.type.name           go to state 44
    struct.or.union.specifier      go to state 51
    struct.or.union                go to state 52
    enum.specifier                 go to state 53
    declaration.list               go to state 263
    type.qualifier                 go to state 57
    storage.class                  go to state 58
    basic.type.name                go to state 59


state 140

  328 struct.or.union.specifier: struct.or.union '{' . struct.declaration.list '}'
  331                          | struct.or.union '{' . '}'

    '}'          shift, and go to state 264
    DOUBLE       shift, and go to state 4
    INT          shift, and go to state 5
    STRUCT       shift, and go to state 6
    LONG         shift, and go to state 7
    ENUM         shift, and go to state 8
    CHAR         shift, and go to state 11
    UNION        shift, and go to state 13
    CONST        shift, and go to state 14
    FLOAT        shift, and go to state 15
    SHORT        shift, and go to state 16
    UNSIGNED     shift, and go to state 17
    SIGNED       shift, and go to state 18
    VOID         shift, and go to state 19
    VOLATILE     shift, and go to state 20
    TYPEDEFname  shift, and go to state 25
    INLINE       shift, and go to state 26

    type.specifier                 go to state 265
    basic.type.specifier           go to state 155
    sue.type.specifier             go to state 156
    typedef.type.specifier         go to state 157
    type.qualifier.list            go to state 266
    elaborated.type.name           go to state 44
    struct.or.union.specifier      go to state 51
    struct.or.union                go to state 52
    struct.declaration.list        go to state 267
    struct.declaration             go to state 268
    struct.default.declaring.list  go to state 269
    struct.declaring.list          go to state 270
    enum.specifier                 go to state 53
    type.qualifier                 go to state 57
    basic.type.name                go to state 59


state 141

  329 struct.or.union.specifier: struct.or.union identifier.or.typedef.name . '{' struct.declaration.list '}'
  330                          | struct.or.union identifier.or.typedef.name .
  332                          | struct.or.union identifier.or.typedef.name . '{' '}'

    '{'  shift, and go to state 271

    $default  reduce using rule 330 (struct.or.union.specifier)


state 142

  412 translation.unit: translation.unit external.definition .

    $default  reduce using rule 412 (translation.unit)


state 143

  263 unary.identifier.declarator: '*' pointer.type.qualifier.list identifier.declarator .

    $default  reduce using rule 263 (unary.identifier.declarator)


state 144

  271 old.function.declarator: '*' pointer.type.qualifier.list old.function.declarator .

    $default  reduce using rule 271 (old.function.declarator)


state 145

  220 pointer.type.qualifier.list: pointer.type.qualifier.list pointer.type.qualifier .

    $default  reduce using rule 220 (pointer.type.qualifier.list)


state 146

  265 postfix.identifier.declarator: '(' unary.identifier.declarator ')' .
  266                              | '(' unary.identifier.declarator ')' . postfixing.abstract.declarator

    '('  shift, and go to state 161
    '['  shift, and go to state 134

    $default  reduce using rule 265 (postfix.identifier.declarator)

    postfixing.abstract.declarator  go to state 272
    array.abstract.declarator       go to state 136


state 147

  268 paren.identifier.declarator: '(' paren.identifier.declarator ')' .

    $default  reduce using rule 268 (paren.identifier.declarator)


state 148

  273 postfix.old.function.declarator: '(' old.function.declarator ')' .
  274                                | '(' old.function.declarator ')' . postfixing.abstract.declarator

    '('  shift, and go to state 161
    '['  shift, and go to state 134

    $default  reduce using rule 273 (postfix.old.function.declarator)

    postfixing.abstract.declarator  go to state 273
    array.abstract.declarator       go to state 136


state 149

  353 enumerator.list: identifier.or.typedef.name . enumerator.value.opt

    '='  shift, and go to state 274

    $default  reduce using rule 355 (enumerator.value.opt)

    enumerator.value.opt  go to state 275


state 150

  350 enum.specifier: ENUM '{' enumerator.list . comma.opt '}'
  354 enumerator.list: enumerator.list . ',' identifier.or.typedef.name enumerator.value.opt

    ','  shift, and go to state 276

    $default  reduce using rule 357 (comma.opt)

    comma.opt  go to state 277


state 151

  351 enum.specifier: ENUM identifier.or.typedef.name '{' . enumerator.list comma.opt '}'

    IDENTIFIER   shift, and go to state 70
    TYPEDEFname  shift, and go to state 71

    identifier.or.typedef.name  go to state 149
    enumerator.list             go to state 278


state 152

    9 composite.head: COMPOSITE IDENTIFIER '(' . composite.head.inout ')'

    INPUT   shift, and go to state 279
    OUTPUT  shift, and go to state 280

    $default  reduce using rule 10 (composite.head.inout)

    composite.head.inout  go to state 281


state 153

    2 stream.type.specifier: STREAM '<' stream.declaration.list . '>'
    5 stream.declaration.list: stream.declaration.list . ',' type.specifier paren.identifier.declarator
    6                        | stream.declaration.list . ',' type.specifier paren.identifier.declarator postfixing.abstract.declarator

    '>'  shift, and go to state 282
    ','  shift, and go to state 283


state 154

    3 stream.declaration.list: type.specifier . paren.identifier.declarator
    4                        | type.specifier . paren.identifier.declarator postfixing.abstract.declarator

    '('         shift, and go to state 284
    IDENTIFIER  shift, and go to state 24

    paren.identifier.declarator  go to state 285


state 155

  204 type.specifier: basic.type.specifier .
  209 basic.type.specifier: basic.type.specifier . type.qualifier
  210                     | basic.type.specifier . basic.type.name

    DOUBLE    shift, and go to state 4
    INT       shift, and go to state 5
    LONG      shift, and go to state 7
    CHAR      shift, and go to state 11
    CONST     shift, and go to state 14
    FLOAT     shift, and go to state 15
    SHORT     shift, and go to state 16
    UNSIGNED  shift, and go to state 17
    SIGNED    shift, and go to state 18
    VOID      shift, and go to state 19
    VOLATILE  shift, and go to state 20
    INLINE    shift, and go to state 26

    $default  reduce using rule 204 (type.specifier)

    type.qualifier   go to state 115
    basic.type.name  go to state 117


state 156

  205 type.specifier: sue.type.specifier .
  213 sue.type.specifier: sue.type.specifier . type.qualifier

    CONST     shift, and go to state 14
    VOLATILE  shift, and go to state 20
    INLINE    shift, and go to state 26

    $default  reduce using rule 205 (type.specifier)

    type.qualifier  go to state 119


state 157

  206 type.specifier: typedef.type.specifier .
  216 typedef.type.specifier: typedef.type.specifier . type.qualifier

    CONST     shift, and go to state 14
    VOLATILE  shift, and go to state 20
    INLINE    shift, and go to state 26

    $default  reduce using rule 206 (type.specifier)

    type.qualifier  go to state 121


state 158

  208 basic.type.specifier: type.qualifier.list . basic.type.name
  212 sue.type.specifier: type.qualifier.list . elaborated.type.name
  215 typedef.type.specifier: type.qualifier.list . TYPEDEFname
  218 type.qualifier.list: type.qualifier.list . type.qualifier

    DOUBLE       shift, and go to state 4
    INT          shift, and go to state 5
    STRUCT       shift, and go to state 6
    LONG         shift, and go to state 7
    ENUM         shift, and go to state 8
    CHAR         shift, and go to state 11
    UNION        shift, and go to state 13
    CONST        shift, and go to state 14
    FLOAT        shift, and go to state 15
    SHORT        shift, and go to state 16
    UNSIGNED     shift, and go to state 17
    SIGNED       shift, and go to state 18
    VOID         shift, and go to state 19
    VOLATILE     shift, and go to state 20
    TYPEDEFname  shift, and go to state 124
    INLINE       shift, and go to state 26

    elaborated.type.name       go to state 125
    struct.or.union.specifier  go to state 51
    struct.or.union            go to state 52
    enum.specifier             go to state 53
    type.qualifier             go to state 128
    basic.type.name            go to state 130


state 159

  220 pointer.type.qualifier.list: pointer.type.qualifier.list . pointer.type.qualifier
  263 unary.identifier.declarator: '*' pointer.type.qualifier.list . identifier.declarator

    '*'         shift, and go to state 76
    '('         shift, and go to state 77
    CONST       shift, and go to state 60
    VOLATILE    shift, and go to state 61
    IDENTIFIER  shift, and go to state 24

    identifier.declarator          go to state 143
    unary.identifier.declarator    go to state 46
    postfix.identifier.declarator  go to state 47
    paren.identifier.declarator    go to state 79
    pointer.type.qualifier         go to state 145


state 160

  264 postfix.identifier.declarator: paren.identifier.declarator . postfixing.abstract.declarator
  268 paren.identifier.declarator: '(' paren.identifier.declarator . ')'

    '('  shift, and go to state 161
    ')'  shift, and go to state 147
    '['  shift, and go to state 134

    postfixing.abstract.declarator  go to state 135
    array.abstract.declarator       go to state 136


state 161

  257 postfixing.abstract.declarator: '(' . ')'
  258                               | '(' . parameter.type.list ')'

    ')'          shift, and go to state 202
    AUTO         shift, and go to state 3
    DOUBLE       shift, and go to state 4
    INT          shift, and go to state 5
    STRUCT       shift, and go to state 6
    LONG         shift, and go to state 7
    ENUM         shift, and go to state 8
    REGISTER     shift, and go to state 9
    TYPEDEF      shift, and go to state 10
    CHAR         shift, and go to state 11
    EXTERN       shift, and go to state 12
    UNION        shift, and go to state 13
    CONST        shift, and go to state 14
    FLOAT        shift, and go to state 15
    SHORT        shift, and go to state 16
    UNSIGNED     shift, and go to state 17
    SIGNED       shift, and go to state 18
    VOID         shift, and go to state 19
    VOLATILE     shift, and go to state 20
    STATIC       shift, and go to state 21
    TYPEDEFname  shift, and go to state 25
    ELLIPSIS     shift, and go to state 204
    INLINE       shift, and go to state 26

    declaration.specifier          go to state 205
    basic.declaration.specifier    go to state 35
    sue.declaration.specifier      go to state 206
    typedef.declaration.specifier  go to state 37
    declaration.qualifier.list     go to state 207
    type.specifier                 go to state 208
    basic.type.specifier           go to state 40
    sue.type.specifier             go to state 209
    typedef.type.specifier         go to state 42
    type.qualifier.list            go to state 210
    elaborated.type.name           go to state 44
    parameter.type.list            go to state 212
    parameter.list                 go to state 213
    parameter.declaration          go to state 214
    struct.or.union.specifier      go to state 51
    struct.or.union                go to state 52
    enum.specifier                 go to state 53
    type.qualifier                 go to state 57
    storage.class                  go to state 58
    basic.type.name                go to state 59


state 162

   18 composite.body.no.new.scope: '{' . composite.body.param.opt composite.body.statement.list '}'
   19                            | '{' . composite.body.param.opt declaration.list composite.body.statement.list '}'

    PARAM  shift, and go to state 286

    $default  reduce using rule 20 (composite.body.param.opt)

    composite.body.param.opt  go to state 287


state 163

    8 composite.definition: composite.head $@1 composite.body.no.new.scope .

    $default  reduce using rule 8 (composite.definition)


state 164

  170 declaring.list: declaring.list ',' error .

    $default  reduce using rule 170 (declaring.list)


state 165

  165 declaring.list: declaring.list ',' declarator . @6 attributes.opt $@7 initializer.opt

    $default  reduce using rule 163 (@6)

    @6  go to state 288


state 166

  225 declarator: identifier.declarator .

    $default  reduce using rule 225 (declarator)


state 167

  226 declarator: old.function.declarator .

    $default  reduce using rule 226 (declarator)


state 168

  185 default.declaring.list: default.declaring.list ',' error .

    $default  reduce using rule 185 (default.declaring.list)


state 169

  180 default.declaring.list: default.declaring.list ',' identifier.declarator . @14 attributes.opt $@15 initializer.opt

    $default  reduce using rule 178 (@14)

    @14  go to state 289


state 170

  167 declaring.list: declaration.specifier error $@8 . attributes.opt initializer.opt

    ATTRIBUTE  shift, and go to state 290

    $default  reduce using rule 283 (attributes.opt)

    attributes.opt  go to state 291
    attributes      go to state 292
    attribute       go to state 293


state 171

  229 paren.typedef.declarator: '*' '(' . simple.paren.typedef.declarator ')'
  232 paren.postfix.typedef.declarator: '(' . paren.typedef.declarator ')'
  233                                 | '(' . simple.paren.typedef.declarator postfixing.abstract.declarator ')'
  234                                 | '(' . paren.typedef.declarator ')' postfixing.abstract.declarator
  243 clean.postfix.typedef.declarator: '(' . clean.typedef.declarator ')'
  244                                 | '(' . clean.typedef.declarator ')' postfixing.abstract.declarator
  265 postfix.identifier.declarator: '(' . unary.identifier.declarator ')'
  266                              | '(' . unary.identifier.declarator ')' postfixing.abstract.declarator
  268 paren.identifier.declarator: '(' . paren.identifier.declarator ')'
  273 postfix.old.function.declarator: '(' . old.function.declarator ')'
  274                                | '(' . old.function.declarator ')' postfixing.abstract.declarator

    '*'          shift, and go to state 86
    '('          shift, and go to state 175
    IDENTIFIER   shift, and go to state 24
    TYPEDEFname  shift, and go to state 176

    paren.typedef.declarator          go to state 177
    paren.postfix.typedef.declarator  go to state 91
    simple.paren.typedef.declarator   go to state 294
    clean.typedef.declarator          go to state 179
    clean.postfix.typedef.declarator  go to state 94
    unary.identifier.declarator       go to state 66
    postfix.identifier.declarator     go to state 47
    paren.identifier.declarator       go to state 67
    old.function.declarator           go to state 68
    postfix.old.function.declarator   go to state 50


state 172

  220 pointer.type.qualifier.list: pointer.type.qualifier.list . pointer.type.qualifier
  230 paren.typedef.declarator: '*' pointer.type.qualifier.list . '(' simple.paren.typedef.declarator ')'
  231                         | '*' pointer.type.qualifier.list . paren.typedef.declarator
  242 clean.typedef.declarator: '*' pointer.type.qualifier.list . parameter.typedef.declarator
  263 unary.identifier.declarator: '*' pointer.type.qualifier.list . identifier.declarator
  271 old.function.declarator: '*' pointer.type.qualifier.list . old.function.declarator

    '*'          shift, and go to state 86
    '('          shift, and go to state 295
    CONST        shift, and go to state 60
    VOLATILE     shift, and go to state 61
    IDENTIFIER   shift, and go to state 24
    TYPEDEFname  shift, and go to state 88

    paren.typedef.declarator          go to state 296
    paren.postfix.typedef.declarator  go to state 91
    parameter.typedef.declarator      go to state 297
    clean.typedef.declarator          go to state 93
    clean.postfix.typedef.declarator  go to state 94
    identifier.declarator             go to state 143
    unary.identifier.declarator       go to state 46
    postfix.identifier.declarator     go to state 47
    paren.identifier.declarator       go to state 48
    old.function.declarator           go to state 144
    postfix.old.function.declarator   go to state 50
    pointer.type.qualifier            go to state 145


state 173

  228 paren.typedef.declarator: '*' paren.typedef.declarator .

    $default  reduce using rule 228 (paren.typedef.declarator)


state 174

  241 clean.typedef.declarator: '*' parameter.typedef.declarator .

    $default  reduce using rule 241 (clean.typedef.declarator)


state 175

  232 paren.postfix.typedef.declarator: '(' . paren.typedef.declarator ')'
  233                                 | '(' . simple.paren.typedef.declarator postfixing.abstract.declarator ')'
  234                                 | '(' . paren.typedef.declarator ')' postfixing.abstract.declarator
  236 simple.paren.typedef.declarator: '(' . simple.paren.typedef.declarator ')'
  243 clean.postfix.typedef.declarator: '(' . clean.typedef.declarator ')'
  244                                 | '(' . clean.typedef.declarator ')' postfixing.abstract.declarator
  265 postfix.identifier.declarator: '(' . unary.identifier.declarator ')'
  266                              | '(' . unary.identifier.declarator ')' postfixing.abstract.declarator
  268 paren.identifier.declarator: '(' . paren.identifier.declarator ')'
  273 postfix.old.function.declarator: '(' . old.function.declarator ')'
  274                                | '(' . old.function.declarator ')' postfixing.abstract.declarator

    '*'          shift, and go to state 86
    '('          shift, and go to state 175
    IDENTIFIER   shift, and go to state 24
    TYPEDEFname  shift, and go to state 176

    paren.typedef.declarator          go to state 177
    paren.postfix.typedef.declarator  go to state 91
    simple.paren.typedef.declarator   go to state 298
    clean.typedef.declarator          go to state 179
    clean.postfix.typedef.declarator  go to state 94
    unary.identifier.declarator       go to state 66
    postfix.identifier.declarator     go to state 47
    paren.identifier.declarator       go to state 67
    old.function.declarator           go to state 68
    postfix.old.function.declarator   go to state 50


state 176

  235 simple.paren.typedef.declarator: TYPEDEFname .

    $default  reduce using rule 235 (simple.paren.typedef.declarator)


state 177

  232 paren.postfix.typedef.declarator: '(' paren.typedef.declarator . ')'
  234                                 | '(' paren.typedef.declarator . ')' postfixing.abstract.declarator

    ')'  shift, and go to state 299


state 178

  233 paren.postfix.typedef.declarator: '(' simple.paren.typedef.declarator . postfixing.abstract.declarator ')'

    '('  shift, and go to state 161
    '['  shift, and go to state 134

    postfixing.abstract.declarator  go to state 300
    array.abstract.declarator       go to state 136


state 179

  243 clean.postfix.typedef.declarator: '(' clean.typedef.declarator . ')'
  244                                 | '(' clean.typedef.declarator . ')' postfixing.abstract.declarator

    ')'  shift, and go to state 301


state 180

  238 parameter.typedef.declarator: TYPEDEFname postfixing.abstract.declarator .

    $default  reduce using rule 238 (parameter.typedef.declarator)


state 181

  159 declaring.list: declaration.specifier declarator $@2 . attributes.opt $@3 initializer.opt

    ATTRIBUTE  shift, and go to state 290

    $default  reduce using rule 283 (attributes.opt)

    attributes.opt  go to state 302
    attributes      go to state 292
    attribute       go to state 293


state 182

  420 function.definition: declaration.specifier identifier.declarator $@28 . compound.statement.no.new.scope

    '{'  shift, and go to state 200

    compound.statement.no.new.scope  go to state 303


state 183

  430 function.definition: declaration.specifier old.function.declarator $@33 . compound.statement.no.new.scope

    '{'  shift, and go to state 200

    compound.statement.no.new.scope  go to state 304


state 184

  440 function.definition: declaration.specifier old.function.declarator old.function.declaration.list . $@38 compound.statement.no.new.scope

    $default  reduce using rule 439 ($@38)

    $@38  go to state 305


state 185

  182 default.declaring.list: declaration.qualifier.list error $@16 . attributes.opt initializer.opt

    ATTRIBUTE  shift, and go to state 290

    $default  reduce using rule 283 (attributes.opt)

    attributes.opt  go to state 306
    attributes      go to state 292
    attribute       go to state 293


state 186

  173 default.declaring.list: declaration.qualifier.list identifier.declarator $@10 . attributes.opt $@11 initializer.opt

    ATTRIBUTE  shift, and go to state 290

    $default  reduce using rule 283 (attributes.opt)

    attributes.opt  go to state 307
    attributes      go to state 292
    attribute       go to state 293


state 187

  424 function.definition: declaration.qualifier.list identifier.declarator $@30 . compound.statement.no.new.scope

    '{'  shift, and go to state 200

    compound.statement.no.new.scope  go to state 308


state 188

  434 function.definition: declaration.qualifier.list old.function.declarator $@35 . compound.statement.no.new.scope

    '{'  shift, and go to state 200

    compound.statement.no.new.scope  go to state 309


state 189

  444 function.definition: declaration.qualifier.list old.function.declarator old.function.declaration.list . $@40 compound.statement.no.new.scope

    $default  reduce using rule 443 ($@40)

    $@40  go to state 310


state 190

  169 declaring.list: type.specifier error $@9 . attributes.opt initializer.opt

    ATTRIBUTE  shift, and go to state 290

    $default  reduce using rule 283 (attributes.opt)

    attributes.opt  go to state 311
    attributes      go to state 292
    attribute       go to state 293


state 191

  162 declaring.list: type.specifier declarator $@4 . attributes.opt $@5 initializer.opt

    ATTRIBUTE  shift, and go to state 290

    $default  reduce using rule 283 (attributes.opt)

    attributes.opt  go to state 312
    attributes      go to state 292
    attribute       go to state 293


state 192

  422 function.definition: type.specifier identifier.declarator $@29 . compound.statement.no.new.scope

    '{'  shift, and go to state 200

    compound.statement.no.new.scope  go to state 313


state 193

  432 function.definition: type.specifier old.function.declarator $@34 . compound.statement.no.new.scope

    '{'  shift, and go to state 200

    compound.statement.no.new.scope  go to state 314


state 194

  442 function.definition: type.specifier old.function.declarator old.function.declaration.list . $@39 compound.statement.no.new.scope

    $default  reduce using rule 441 ($@39)

    $@39  go to state 315


state 195

  184 default.declaring.list: type.qualifier.list error $@17 . attributes.opt initializer.opt

    ATTRIBUTE  shift, and go to state 290

    $default  reduce using rule 283 (attributes.opt)

    attributes.opt  go to state 316
    attributes      go to state 292
    attribute       go to state 293


state 196

  177 default.declaring.list: type.qualifier.list identifier.declarator $@12 . attributes.opt $@13 initializer.opt

    ATTRIBUTE  shift, and go to state 290

    $default  reduce using rule 283 (attributes.opt)

    attributes.opt  go to state 317
    attributes      go to state 292
    attribute       go to state 293


state 197

  426 function.definition: type.qualifier.list identifier.declarator $@31 . compound.statement.no.new.scope

    '{'  shift, and go to state 200

    compound.statement.no.new.scope  go to state 318


state 198

  436 function.definition: type.qualifier.list old.function.declarator $@36 . compound.statement.no.new.scope

    '{'  shift, and go to state 200

    compound.statement.no.new.scope  go to state 319


state 199

  446 function.definition: type.qualifier.list old.function.declarator old.function.declaration.list . $@41 compound.statement.no.new.scope

    $default  reduce using rule 445 ($@41)

    $@41  go to state 320


state 200

  379 compound.statement.no.new.scope: '{' . '}'
  380                                | '{' . declaration.list '}'
  381                                | '{' . statement.list '}'
  382                                | '{' . declaration.list statement.list '}'

    error              shift, and go to state 321
    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    '{'                shift, and go to state 322
    '}'                shift, and go to state 323
    AUTO               shift, and go to state 3
    DOUBLE             shift, and go to state 4
    INT                shift, and go to state 5
    STRUCT             shift, and go to state 6
    BREAK              shift, and go to state 324
    LONG               shift, and go to state 7
    SWITCH             shift, and go to state 325
    CASE               shift, and go to state 326
    ENUM               shift, and go to state 8
    REGISTER           shift, and go to state 9
    TYPEDEF            shift, and go to state 10
    CHAR               shift, and go to state 11
    EXTERN             shift, and go to state 12
    RETURN             shift, and go to state 327
    UNION              shift, and go to state 13
    CONST              shift, and go to state 14
    FLOAT              shift, and go to state 15
    SHORT              shift, and go to state 16
    UNSIGNED           shift, and go to state 17
    CONTINUE           shift, and go to state 328
    FOR                shift, and go to state 329
    SIGNED             shift, and go to state 18
    VOID               shift, and go to state 19
    DEFAULT            shift, and go to state 330
    GOTO               shift, and go to state 331
    SIZEOF             shift, and go to state 223
    VOLATILE           shift, and go to state 20
    DO                 shift, and go to state 332
    IF                 shift, and go to state 333
    STATIC             shift, and go to state 21
    WHILE              shift, and go to state 334
    STREAM             shift, and go to state 23
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 335
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    TYPEDEFname        shift, and go to state 336
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235
    INLINE             shift, and go to state 26

    ';'  reduce using rule 151 (expression.opt)

    stream.type.specifier          go to state 28
    primary.expression             go to state 236
    postfix.expression             go to state 237
    unary.expression               go to state 337
    unary.operator                 go to state 239
    cast.expression                go to state 240
    multiplicative.expression      go to state 241
    additive.expression            go to state 242
    shift.expression               go to state 243
    relational.expression          go to state 244
    equality.expression            go to state 245
    AND.expression                 go to state 246
    exclusive.OR.expression        go to state 247
    inclusive.OR.expression        go to state 248
    logical.AND.expression         go to state 249
    logical.OR.expression          go to state 250
    conditional.expression         go to state 338
    assignment.expression          go to state 339
    expression                     go to state 340
    expression.opt                 go to state 341
    declaration                    go to state 258
    declaring.list                 go to state 32
    default.declaring.list         go to state 33
    declaration.specifier          go to state 259
    basic.declaration.specifier    go to state 35
    sue.declaration.specifier      go to state 36
    typedef.declaration.specifier  go to state 37
    declaration.qualifier.list     go to state 260
    type.specifier                 go to state 261
    basic.type.specifier           go to state 40
    sue.type.specifier             go to state 41
    typedef.type.specifier         go to state 42
    type.qualifier.list            go to state 262
    elaborated.type.name           go to state 44
    struct.or.union.specifier      go to state 51
    struct.or.union                go to state 52
    enum.specifier                 go to state 53
    statement                      go to state 342
    labeled.statement              go to state 343
    compound.statement             go to state 344
    lblock                         go to state 345
    declaration.list               go to state 346
    statement.list                 go to state 347
    expression.statement           go to state 348
    selection.statement            go to state 349
    iteration.statement            go to state 350
    jump.statement                 go to state 351
    constant                       go to state 253
    string.literal.list            go to state 254
    type.qualifier                 go to state 57
    storage.class                  go to state 58
    basic.type.name                go to state 59


state 201

  417 function.definition: identifier.declarator $@27 compound.statement.no.new.scope .

    $default  reduce using rule 417 (function.definition)


state 202

  257 postfixing.abstract.declarator: '(' ')' .

    $default  reduce using rule 257 (postfixing.abstract.declarator)


state 203

  275 identifier.list: IDENTIFIER .

    $default  reduce using rule 275 (identifier.list)


state 204

  305 parameter.type.list: ELLIPSIS .

    $default  reduce using rule 305 (parameter.type.list)


state 205

  310 parameter.declaration: declaration.specifier .
  311                      | declaration.specifier . abstract.declarator
  312                      | declaration.specifier . identifier.declarator
  313                      | declaration.specifier . parameter.typedef.declarator

    '*'          shift, and go to state 352
    '('          shift, and go to state 353
    '['          shift, and go to state 134
    IDENTIFIER   shift, and go to state 24
    TYPEDEFname  shift, and go to state 88

    $default  reduce using rule 310 (parameter.declaration)

    parameter.typedef.declarator      go to state 354
    clean.typedef.declarator          go to state 93
    clean.postfix.typedef.declarator  go to state 94
    abstract.declarator               go to state 355
    unary.abstract.declarator         go to state 356
    postfix.abstract.declarator       go to state 357
    postfixing.abstract.declarator    go to state 358
    identifier.declarator             go to state 359
    unary.identifier.declarator       go to state 46
    postfix.identifier.declarator     go to state 47
    paren.identifier.declarator       go to state 79
    array.abstract.declarator         go to state 136


state 206

  187 declaration.specifier: sue.declaration.specifier .
  195 sue.declaration.specifier: sue.declaration.specifier . declaration.qualifier

    AUTO      shift, and go to state 3
    REGISTER  shift, and go to state 9
    TYPEDEF   shift, and go to state 10
    EXTERN    shift, and go to state 12
    CONST     shift, and go to state 14
    VOLATILE  shift, and go to state 20
    STATIC    shift, and go to state 21
    INLINE    shift, and go to state 26

    $default  reduce using rule 187 (declaration.specifier)

    declaration.qualifier  go to state 102
    type.qualifier         go to state 98
    storage.class          go to state 99


state 207

  190 basic.declaration.specifier: declaration.qualifier.list . basic.type.name
  194 sue.declaration.specifier: declaration.qualifier.list . elaborated.type.name
  197 typedef.declaration.specifier: declaration.qualifier.list . TYPEDEFname
  201 declaration.qualifier.list: declaration.qualifier.list . declaration.qualifier
  314 parameter.declaration: declaration.qualifier.list .
  315                      | declaration.qualifier.list . abstract.declarator
  316                      | declaration.qualifier.list . identifier.declarator

    '*'          shift, and go to state 360
    '('          shift, and go to state 361
    '['          shift, and go to state 134
    AUTO         shift, and go to state 3
    DOUBLE       shift, and go to state 4
    INT          shift, and go to state 5
    STRUCT       shift, and go to state 6
    LONG         shift, and go to state 7
    ENUM         shift, and go to state 8
    REGISTER     shift, and go to state 9
    TYPEDEF      shift, and go to state 10
    CHAR         shift, and go to state 11
    EXTERN       shift, and go to state 12
    UNION        shift, and go to state 13
    CONST        shift, and go to state 14
    FLOAT        shift, and go to state 15
    SHORT        shift, and go to state 16
    UNSIGNED     shift, and go to state 17
    SIGNED       shift, and go to state 18
    VOID         shift, and go to state 19
    VOLATILE     shift, and go to state 20
    STATIC       shift, and go to state 21
    IDENTIFIER   shift, and go to state 24
    TYPEDEFname  shift, and go to state 105
    INLINE       shift, and go to state 26

    $default  reduce using rule 314 (parameter.declaration)

    declaration.qualifier           go to state 106
    elaborated.type.name            go to state 107
    abstract.declarator             go to state 362
    unary.abstract.declarator       go to state 356
    postfix.abstract.declarator     go to state 357
    postfixing.abstract.declarator  go to state 358
    identifier.declarator           go to state 363
    unary.identifier.declarator     go to state 46
    postfix.identifier.declarator   go to state 47
    paren.identifier.declarator     go to state 79
    array.abstract.declarator       go to state 136
    struct.or.union.specifier       go to state 51
    struct.or.union                 go to state 52
    enum.specifier                  go to state 53
    type.qualifier                  go to state 98
    storage.class                   go to state 99
    basic.type.name                 go to state 110


state 208

  317 parameter.declaration: type.specifier .
  318                      | type.specifier . abstract.declarator
  319                      | type.specifier . identifier.declarator
  320                      | type.specifier . parameter.typedef.declarator

    '*'          shift, and go to state 352
    '('          shift, and go to state 353
    '['          shift, and go to state 134
    IDENTIFIER   shift, and go to state 24
    TYPEDEFname  shift, and go to state 88

    $default  reduce using rule 317 (parameter.declaration)

    parameter.typedef.declarator      go to state 364
    clean.typedef.declarator          go to state 93
    clean.postfix.typedef.declarator  go to state 94
    abstract.declarator               go to state 365
    unary.abstract.declarator         go to state 356
    postfix.abstract.declarator       go to state 357
    postfixing.abstract.declarator    go to state 358
    identifier.declarator             go to state 366
    unary.identifier.declarator       go to state 46
    postfix.identifier.declarator     go to state 47
    paren.identifier.declarator       go to state 79
    array.abstract.declarator         go to state 136


state 209

  193 sue.declaration.specifier: sue.type.specifier . storage.class
  205 type.specifier: sue.type.specifier .
  213 sue.type.specifier: sue.type.specifier . type.qualifier

    AUTO      shift, and go to state 3
    REGISTER  shift, and go to state 9
    TYPEDEF   shift, and go to state 10
    EXTERN    shift, and go to state 12
    CONST     shift, and go to state 14
    VOLATILE  shift, and go to state 20
    STATIC    shift, and go to state 21
    INLINE    shift, and go to state 26

    $default  reduce using rule 205 (type.specifier)

    type.qualifier  go to state 119
    storage.class   go to state 120


state 210

  200 declaration.qualifier.list: type.qualifier.list . storage.class
  208 basic.type.specifier: type.qualifier.list . basic.type.name
  212 sue.type.specifier: type.qualifier.list . elaborated.type.name
  215 typedef.type.specifier: type.qualifier.list . TYPEDEFname
  218 type.qualifier.list: type.qualifier.list . type.qualifier
  321 parameter.declaration: type.qualifier.list .
  322                      | type.qualifier.list . abstract.declarator
  323                      | type.qualifier.list . identifier.declarator

    '*'          shift, and go to state 360
    '('          shift, and go to state 361
    '['          shift, and go to state 134
    AUTO         shift, and go to state 3
    DOUBLE       shift, and go to state 4
    INT          shift, and go to state 5
    STRUCT       shift, and go to state 6
    LONG         shift, and go to state 7
    ENUM         shift, and go to state 8
    REGISTER     shift, and go to state 9
    TYPEDEF      shift, and go to state 10
    CHAR         shift, and go to state 11
    EXTERN       shift, and go to state 12
    UNION        shift, and go to state 13
    CONST        shift, and go to state 14
    FLOAT        shift, and go to state 15
    SHORT        shift, and go to state 16
    UNSIGNED     shift, and go to state 17
    SIGNED       shift, and go to state 18
    VOID         shift, and go to state 19
    VOLATILE     shift, and go to state 20
    STATIC       shift, and go to state 21
    IDENTIFIER   shift, and go to state 24
    TYPEDEFname  shift, and go to state 124
    INLINE       shift, and go to state 26

    $default  reduce using rule 321 (parameter.declaration)

    elaborated.type.name            go to state 125
    abstract.declarator             go to state 367
    unary.abstract.declarator       go to state 356
    postfix.abstract.declarator     go to state 357
    postfixing.abstract.declarator  go to state 358
    identifier.declarator           go to state 368
    unary.identifier.declarator     go to state 46
    postfix.identifier.declarator   go to state 47
    paren.identifier.declarator     go to state 79
    array.abstract.declarator       go to state 136
    struct.or.union.specifier       go to state 51
    struct.or.union                 go to state 52
    enum.specifier                  go to state 53
    type.qualifier                  go to state 128
    storage.class                   go to state 129
    basic.type.name                 go to state 130


state 211

  272 postfix.old.function.declarator: paren.identifier.declarator '(' identifier.list . ')'
  276 identifier.list: identifier.list . ',' IDENTIFIER

    ')'  shift, and go to state 369
    ','  shift, and go to state 370


state 212

  258 postfixing.abstract.declarator: '(' parameter.type.list . ')'

    ')'  shift, and go to state 371


state 213

  303 parameter.type.list: parameter.list .
  304                    | parameter.list . ',' ELLIPSIS
  307 parameter.list: parameter.list . ',' parameter.declaration
  309               | parameter.list . ',' error

    ','  shift, and go to state 372

    $default  reduce using rule 303 (parameter.type.list)


state 214

  306 parameter.list: parameter.declaration .
  308               | parameter.declaration . '=' initializer

    '='  shift, and go to state 373

    $default  reduce using rule 306 (parameter.list)


state 215

   97 unary.operator: '&' .

    $default  reduce using rule 97 (unary.operator)


state 216

   98 unary.operator: '*' .

    $default  reduce using rule 98 (unary.operator)


state 217

   99 unary.operator: '+' .

    $default  reduce using rule 99 (unary.operator)


state 218

  100 unary.operator: '-' .

    $default  reduce using rule 100 (unary.operator)


state 219

  101 unary.operator: '~' .

    $default  reduce using rule 101 (unary.operator)


state 220

  102 unary.operator: '!' .

    $default  reduce using rule 102 (unary.operator)


state 221

   66 primary.expression: '(' . expression ')'
   67                   | '(' . lblock statement.list rblock ')'
   68                   | '(' . lblock declaration.list statement.list rblock ')'
  104 cast.expression: '(' . type.name ')' cast.expression

    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    '{'                shift, and go to state 322
    DOUBLE             shift, and go to state 4
    INT                shift, and go to state 5
    STRUCT             shift, and go to state 6
    LONG               shift, and go to state 7
    ENUM               shift, and go to state 8
    CHAR               shift, and go to state 11
    UNION              shift, and go to state 13
    CONST              shift, and go to state 14
    FLOAT              shift, and go to state 15
    SHORT              shift, and go to state 16
    UNSIGNED           shift, and go to state 17
    SIGNED             shift, and go to state 18
    VOID               shift, and go to state 19
    SIZEOF             shift, and go to state 223
    VOLATILE           shift, and go to state 20
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 227
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    TYPEDEFname        shift, and go to state 25
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235
    INLINE             shift, and go to state 26

    primary.expression         go to state 236
    postfix.expression         go to state 237
    unary.expression           go to state 337
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 241
    additive.expression        go to state 242
    shift.expression           go to state 243
    relational.expression      go to state 244
    equality.expression        go to state 245
    AND.expression             go to state 246
    exclusive.OR.expression    go to state 247
    inclusive.OR.expression    go to state 248
    logical.AND.expression     go to state 249
    logical.OR.expression      go to state 250
    conditional.expression     go to state 338
    assignment.expression      go to state 339
    expression                 go to state 374
    type.specifier             go to state 375
    basic.type.specifier       go to state 155
    sue.type.specifier         go to state 156
    typedef.type.specifier     go to state 157
    type.qualifier.list        go to state 376
    elaborated.type.name       go to state 44
    type.name                  go to state 377
    struct.or.union.specifier  go to state 51
    struct.or.union            go to state 52
    enum.specifier             go to state 53
    lblock                     go to state 378
    constant                   go to state 253
    string.literal.list        go to state 254
    type.qualifier             go to state 57
    basic.type.name            go to state 59


state 222

  324 array.abstract.declarator: '[' ']' .

    $default  reduce using rule 324 (array.abstract.declarator)


state 223

   95 unary.expression: SIZEOF . unary.expression
   96                 | SIZEOF . '(' type.name ')'

    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 379
    SIZEOF             shift, and go to state 223
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 227
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    primary.expression   go to state 236
    postfix.expression   go to state 237
    unary.expression     go to state 380
    unary.operator       go to state 239
    constant             go to state 253
    string.literal.list  go to state 254


state 224

   77 postfix.expression: SPLITJOIN . '(' IDENTIFIER ')' lblock split.statement splitjoinPipeline.statement.list join.statement rblock
   78                   | SPLITJOIN . '(' IDENTIFIER ')' lblock declaration.list split.statement splitjoinPipeline.statement.list join.statement rblock
   79                   | SPLITJOIN . '(' IDENTIFIER ')' lblock declaration.list statement.list split.statement splitjoinPipeline.statement.list join.statement rblock

    '('  shift, and go to state 381


state 225

   80 postfix.expression: PIPELINE . '(' IDENTIFIER ')' lblock splitjoinPipeline.statement.list rblock
   81                   | PIPELINE . '(' IDENTIFIER ')' lblock declaration.list splitjoinPipeline.statement.list rblock

    '('  shift, and go to state 382


state 226

   82 postfix.expression: FILEREADER . '(' ')' operator.arguments

    '('  shift, and go to state 383


state 227

   63 primary.expression: IDENTIFIER .

    $default  reduce using rule 63 (primary.expression)


state 228

  454 string.literal.list: STRINGliteral .

    $default  reduce using rule 454 (string.literal.list)


state 229

  449 constant: FLOATINGconstant .

    $default  reduce using rule 449 (constant)


state 230

  450 constant: INTEGERconstant .

    $default  reduce using rule 450 (constant)


state 231

  451 constant: OCTALconstant .

    $default  reduce using rule 451 (constant)


state 232

  452 constant: HEXconstant .

    $default  reduce using rule 452 (constant)


state 233

  453 constant: CHARACTERconstant .

    $default  reduce using rule 453 (constant)


state 234

   92 unary.expression: ICR . unary.expression

    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 384
    SIZEOF             shift, and go to state 223
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 227
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    primary.expression   go to state 236
    postfix.expression   go to state 237
    unary.expression     go to state 385
    unary.operator       go to state 239
    constant             go to state 253
    string.literal.list  go to state 254


state 235

   93 unary.expression: DECR . unary.expression

    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 384
    SIZEOF             shift, and go to state 223
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 227
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    primary.expression   go to state 236
    postfix.expression   go to state 237
    unary.expression     go to state 386
    unary.operator       go to state 239
    constant             go to state 253
    string.literal.list  go to state 254


state 236

   69 postfix.expression: primary.expression .

    $default  reduce using rule 69 (postfix.expression)


state 237

   70 postfix.expression: postfix.expression . '[' expression ']'
   71                   | postfix.expression . '(' ')'
   72                   | postfix.expression . '(' argument.expression.list ')'
   73                   | postfix.expression . '(' ')' operator.selfdefine.body
   74                   | postfix.expression . '(' argument.expression.list ')' operator.selfdefine.body
   75                   | postfix.expression . '(' ')' operator.arguments
   76                   | postfix.expression . '(' argument.expression.list ')' operator.arguments
   83                   | postfix.expression . '.' IDENTIFIER
   84                   | postfix.expression . ARROW IDENTIFIER
   85                   | postfix.expression . ICR
   86                   | postfix.expression . DECR
   87                   | postfix.expression . '.' TYPEDEFname
   88                   | postfix.expression . ARROW TYPEDEFname
   91 unary.expression: postfix.expression .

    '('    shift, and go to state 387
    '.'    shift, and go to state 388
    '['    shift, and go to state 389
    ARROW  shift, and go to state 390
    ICR    shift, and go to state 391
    DECR   shift, and go to state 392

    $default  reduce using rule 91 (unary.expression)


state 238

  103 cast.expression: unary.expression .

    $default  reduce using rule 103 (cast.expression)


state 239

   94 unary.expression: unary.operator . cast.expression

    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    SIZEOF             shift, and go to state 223
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 227
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    primary.expression   go to state 236
    postfix.expression   go to state 237
    unary.expression     go to state 238
    unary.operator       go to state 239
    cast.expression      go to state 393
    constant             go to state 253
    string.literal.list  go to state 254


state 240

  105 multiplicative.expression: cast.expression .

    $default  reduce using rule 105 (multiplicative.expression)


state 241

  106 multiplicative.expression: multiplicative.expression . '*' cast.expression
  107                          | multiplicative.expression . '/' cast.expression
  108                          | multiplicative.expression . '%' cast.expression
  109 additive.expression: multiplicative.expression .

    '*'  shift, and go to state 394
    '%'  shift, and go to state 395
    '/'  shift, and go to state 396

    $default  reduce using rule 109 (additive.expression)


state 242

  110 additive.expression: additive.expression . '+' multiplicative.expression
  111                    | additive.expression . '-' multiplicative.expression
  112 shift.expression: additive.expression .

    '+'  shift, and go to state 397
    '-'  shift, and go to state 398

    $default  reduce using rule 112 (shift.expression)


state 243

  113 shift.expression: shift.expression . LS additive.expression
  114                 | shift.expression . RS additive.expression
  115 relational.expression: shift.expression .

    LS  shift, and go to state 399
    RS  shift, and go to state 400

    $default  reduce using rule 115 (relational.expression)


state 244

  116 relational.expression: relational.expression . '<' shift.expression
  117                      | relational.expression . '>' shift.expression
  118                      | relational.expression . LE shift.expression
  119                      | relational.expression . GE shift.expression
  120 equality.expression: relational.expression .

    '<'  shift, and go to state 401
    '>'  shift, and go to state 402
    LE   shift, and go to state 403
    GE   shift, and go to state 404

    $default  reduce using rule 120 (equality.expression)


state 245

  121 equality.expression: equality.expression . EQ relational.expression
  122                    | equality.expression . NE relational.expression
  123 AND.expression: equality.expression .

    EQ  shift, and go to state 405
    NE  shift, and go to state 406

    $default  reduce using rule 123 (AND.expression)


state 246

  124 AND.expression: AND.expression . '&' equality.expression
  125 exclusive.OR.expression: AND.expression .

    '&'  shift, and go to state 407

    $default  reduce using rule 125 (exclusive.OR.expression)


state 247

  126 exclusive.OR.expression: exclusive.OR.expression . '^' AND.expression
  127 inclusive.OR.expression: exclusive.OR.expression .

    '^'  shift, and go to state 408

    $default  reduce using rule 127 (inclusive.OR.expression)


state 248

  128 inclusive.OR.expression: inclusive.OR.expression . '|' exclusive.OR.expression
  129 logical.AND.expression: inclusive.OR.expression .

    '|'  shift, and go to state 409

    $default  reduce using rule 129 (logical.AND.expression)


state 249

  130 logical.AND.expression: logical.AND.expression . ANDAND inclusive.OR.expression
  131 logical.OR.expression: logical.AND.expression .

    ANDAND  shift, and go to state 410

    $default  reduce using rule 131 (logical.OR.expression)


state 250

  132 logical.OR.expression: logical.OR.expression . OROR logical.AND.expression
  133 conditional.expression: logical.OR.expression .
  134                       | logical.OR.expression . '?' expression ':' conditional.expression

    '?'   shift, and go to state 411
    OROR  shift, and go to state 412

    $default  reduce using rule 133 (conditional.expression)


state 251

  150 constant.expression: conditional.expression .

    $default  reduce using rule 150 (constant.expression)


state 252

  325 array.abstract.declarator: '[' constant.expression . ']'

    ']'  shift, and go to state 413


state 253

   64 primary.expression: constant .

    $default  reduce using rule 64 (primary.expression)


state 254

   65 primary.expression: string.literal.list .
  455 string.literal.list: string.literal.list . STRINGliteral

    STRINGliteral  shift, and go to state 414

    $default  reduce using rule 65 (primary.expression)


state 255

  326 array.abstract.declarator: array.abstract.declarator '[' . constant.expression ']'
  327                          | array.abstract.declarator '[' . ']'

    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    ']'                shift, and go to state 415
    SIZEOF             shift, and go to state 223
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 227
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    primary.expression         go to state 236
    postfix.expression         go to state 237
    unary.expression           go to state 238
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 241
    additive.expression        go to state 242
    shift.expression           go to state 243
    relational.expression      go to state 244
    equality.expression        go to state 245
    AND.expression             go to state 246
    exclusive.OR.expression    go to state 247
    inclusive.OR.expression    go to state 248
    logical.AND.expression     go to state 249
    logical.OR.expression      go to state 250
    conditional.expression     go to state 251
    constant.expression        go to state 416
    constant                   go to state 253
    string.literal.list        go to state 254


state 256

  428 function.definition: old.function.declarator $@32 compound.statement.no.new.scope .

    $default  reduce using rule 428 (function.definition)


state 257

  438 function.definition: old.function.declarator old.function.declaration.list $@37 . compound.statement.no.new.scope

    '{'  shift, and go to state 200

    compound.statement.no.new.scope  go to state 417


state 258

  383 declaration.list: declaration .

    $default  reduce using rule 383 (declaration.list)


state 259

  159 declaring.list: declaration.specifier . declarator $@2 attributes.opt $@3 initializer.opt
  167               | declaration.specifier . error $@8 attributes.opt initializer.opt

    error        shift, and go to state 85
    '*'          shift, and go to state 86
    '('          shift, and go to state 87
    IDENTIFIER   shift, and go to state 24
    TYPEDEFname  shift, and go to state 88

    declarator                        go to state 89
    paren.typedef.declarator          go to state 90
    paren.postfix.typedef.declarator  go to state 91
    parameter.typedef.declarator      go to state 92
    clean.typedef.declarator          go to state 93
    clean.postfix.typedef.declarator  go to state 94
    identifier.declarator             go to state 166
    unary.identifier.declarator       go to state 46
    postfix.identifier.declarator     go to state 47
    paren.identifier.declarator       go to state 48
    old.function.declarator           go to state 167
    postfix.old.function.declarator   go to state 50


state 260

  173 default.declaring.list: declaration.qualifier.list . identifier.declarator $@10 attributes.opt $@11 initializer.opt
  182                       | declaration.qualifier.list . error $@16 attributes.opt initializer.opt
  190 basic.declaration.specifier: declaration.qualifier.list . basic.type.name
  194 sue.declaration.specifier: declaration.qualifier.list . elaborated.type.name
  197 typedef.declaration.specifier: declaration.qualifier.list . TYPEDEFname
  201 declaration.qualifier.list: declaration.qualifier.list . declaration.qualifier

    error        shift, and go to state 104
    '*'          shift, and go to state 76
    '('          shift, and go to state 77
    AUTO         shift, and go to state 3
    DOUBLE       shift, and go to state 4
    INT          shift, and go to state 5
    STRUCT       shift, and go to state 6
    LONG         shift, and go to state 7
    ENUM         shift, and go to state 8
    REGISTER     shift, and go to state 9
    TYPEDEF      shift, and go to state 10
    CHAR         shift, and go to state 11
    EXTERN       shift, and go to state 12
    UNION        shift, and go to state 13
    CONST        shift, and go to state 14
    FLOAT        shift, and go to state 15
    SHORT        shift, and go to state 16
    UNSIGNED     shift, and go to state 17
    SIGNED       shift, and go to state 18
    VOID         shift, and go to state 19
    VOLATILE     shift, and go to state 20
    STATIC       shift, and go to state 21
    IDENTIFIER   shift, and go to state 24
    TYPEDEFname  shift, and go to state 105
    INLINE       shift, and go to state 26

    declaration.qualifier          go to state 106
    elaborated.type.name           go to state 107
    identifier.declarator          go to state 418
    unary.identifier.declarator    go to state 46
    postfix.identifier.declarator  go to state 47
    paren.identifier.declarator    go to state 79
    struct.or.union.specifier      go to state 51
    struct.or.union                go to state 52
    enum.specifier                 go to state 53
    type.qualifier                 go to state 98
    storage.class                  go to state 99
    basic.type.name                go to state 110


state 261

  162 declaring.list: type.specifier . declarator $@4 attributes.opt $@5 initializer.opt
  169               | type.specifier . error $@9 attributes.opt initializer.opt

    error        shift, and go to state 111
    '*'          shift, and go to state 86
    '('          shift, and go to state 87
    IDENTIFIER   shift, and go to state 24
    TYPEDEFname  shift, and go to state 88

    declarator                        go to state 112
    paren.typedef.declarator          go to state 90
    paren.postfix.typedef.declarator  go to state 91
    parameter.typedef.declarator      go to state 92
    clean.typedef.declarator          go to state 93
    clean.postfix.typedef.declarator  go to state 94
    identifier.declarator             go to state 166
    unary.identifier.declarator       go to state 46
    postfix.identifier.declarator     go to state 47
    paren.identifier.declarator       go to state 48
    old.function.declarator           go to state 167
    postfix.old.function.declarator   go to state 50


state 262

  177 default.declaring.list: type.qualifier.list . identifier.declarator $@12 attributes.opt $@13 initializer.opt
  184                       | type.qualifier.list . error $@17 attributes.opt initializer.opt
  200 declaration.qualifier.list: type.qualifier.list . storage.class
  208 basic.type.specifier: type.qualifier.list . basic.type.name
  212 sue.type.specifier: type.qualifier.list . elaborated.type.name
  215 typedef.type.specifier: type.qualifier.list . TYPEDEFname
  218 type.qualifier.list: type.qualifier.list . type.qualifier

    error        shift, and go to state 123
    '*'          shift, and go to state 76
    '('          shift, and go to state 77
    AUTO         shift, and go to state 3
    DOUBLE       shift, and go to state 4
    INT          shift, and go to state 5
    STRUCT       shift, and go to state 6
    LONG         shift, and go to state 7
    ENUM         shift, and go to state 8
    REGISTER     shift, and go to state 9
    TYPEDEF      shift, and go to state 10
    CHAR         shift, and go to state 11
    EXTERN       shift, and go to state 12
    UNION        shift, and go to state 13
    CONST        shift, and go to state 14
    FLOAT        shift, and go to state 15
    SHORT        shift, and go to state 16
    UNSIGNED     shift, and go to state 17
    SIGNED       shift, and go to state 18
    VOID         shift, and go to state 19
    VOLATILE     shift, and go to state 20
    STATIC       shift, and go to state 21
    IDENTIFIER   shift, and go to state 24
    TYPEDEFname  shift, and go to state 124
    INLINE       shift, and go to state 26

    elaborated.type.name           go to state 125
    identifier.declarator          go to state 419
    unary.identifier.declarator    go to state 46
    postfix.identifier.declarator  go to state 47
    paren.identifier.declarator    go to state 79
    struct.or.union.specifier      go to state 51
    struct.or.union                go to state 52
    enum.specifier                 go to state 53
    type.qualifier                 go to state 128
    storage.class                  go to state 129
    basic.type.name                go to state 130


state 263

  384 declaration.list: declaration.list . declaration
  448 old.function.declaration.list: $@42 declaration.list .

    AUTO         shift, and go to state 3
    DOUBLE       shift, and go to state 4
    INT          shift, and go to state 5
    STRUCT       shift, and go to state 6
    LONG         shift, and go to state 7
    ENUM         shift, and go to state 8
    REGISTER     shift, and go to state 9
    TYPEDEF      shift, and go to state 10
    CHAR         shift, and go to state 11
    EXTERN       shift, and go to state 12
    UNION        shift, and go to state 13
    CONST        shift, and go to state 14
    FLOAT        shift, and go to state 15
    SHORT        shift, and go to state 16
    UNSIGNED     shift, and go to state 17
    SIGNED       shift, and go to state 18
    VOID         shift, and go to state 19
    VOLATILE     shift, and go to state 20
    STATIC       shift, and go to state 21
    STREAM       shift, and go to state 23
    TYPEDEFname  shift, and go to state 25
    INLINE       shift, and go to state 26

    $default  reduce using rule 448 (old.function.declaration.list)

    stream.type.specifier          go to state 28
    declaration                    go to state 420
    declaring.list                 go to state 32
    default.declaring.list         go to state 33
    declaration.specifier          go to state 259
    basic.declaration.specifier    go to state 35
    sue.declaration.specifier      go to state 36
    typedef.declaration.specifier  go to state 37
    declaration.qualifier.list     go to state 260
    type.specifier                 go to state 261
    basic.type.specifier           go to state 40
    sue.type.specifier             go to state 41
    typedef.type.specifier         go to state 42
    type.qualifier.list            go to state 262
    elaborated.type.name           go to state 44
    struct.or.union.specifier      go to state 51
    struct.or.union                go to state 52
    enum.specifier                 go to state 53
    type.qualifier                 go to state 57
    storage.class                  go to state 58
    basic.type.name                go to state 59


state 264

  331 struct.or.union.specifier: struct.or.union '{' '}' .

    $default  reduce using rule 331 (struct.or.union.specifier)


state 265

  341 struct.declaring.list: type.specifier . struct.declarator

    '*'          shift, and go to state 86
    '('          shift, and go to state 87
    ':'          shift, and go to state 421
    IDENTIFIER   shift, and go to state 24
    TYPEDEFname  shift, and go to state 88

    declarator                        go to state 422
    paren.typedef.declarator          go to state 90
    paren.postfix.typedef.declarator  go to state 91
    parameter.typedef.declarator      go to state 92
    clean.typedef.declarator          go to state 93
    clean.postfix.typedef.declarator  go to state 94
    identifier.declarator             go to state 166
    unary.identifier.declarator       go to state 46
    postfix.identifier.declarator     go to state 47
    paren.identifier.declarator       go to state 48
    old.function.declarator           go to state 167
    postfix.old.function.declarator   go to state 50
    struct.declarator                 go to state 423
    bit.field.size                    go to state 424


state 266

  208 basic.type.specifier: type.qualifier.list . basic.type.name
  212 sue.type.specifier: type.qualifier.list . elaborated.type.name
  215 typedef.type.specifier: type.qualifier.list . TYPEDEFname
  218 type.qualifier.list: type.qualifier.list . type.qualifier
  339 struct.default.declaring.list: type.qualifier.list . struct.identifier.declarator

    '*'          shift, and go to state 76
    '('          shift, and go to state 77
    ':'          shift, and go to state 421
    DOUBLE       shift, and go to state 4
    INT          shift, and go to state 5
    STRUCT       shift, and go to state 6
    LONG         shift, and go to state 7
    ENUM         shift, and go to state 8
    CHAR         shift, and go to state 11
    UNION        shift, and go to state 13
    CONST        shift, and go to state 14
    FLOAT        shift, and go to state 15
    SHORT        shift, and go to state 16
    UNSIGNED     shift, and go to state 17
    SIGNED       shift, and go to state 18
    VOID         shift, and go to state 19
    VOLATILE     shift, and go to state 20
    IDENTIFIER   shift, and go to state 24
    TYPEDEFname  shift, and go to state 124
    INLINE       shift, and go to state 26

    elaborated.type.name           go to state 125
    identifier.declarator          go to state 425
    unary.identifier.declarator    go to state 46
    postfix.identifier.declarator  go to state 47
    paren.identifier.declarator    go to state 79
    struct.or.union.specifier      go to state 51
    struct.or.union                go to state 52
    struct.identifier.declarator   go to state 426
    bit.field.size                 go to state 427
    enum.specifier                 go to state 53
    type.qualifier                 go to state 128
    basic.type.name                go to state 130


state 267

  328 struct.or.union.specifier: struct.or.union '{' struct.declaration.list . '}'
  336 struct.declaration.list: struct.declaration.list . struct.declaration

    '}'          shift, and go to state 428
    DOUBLE       shift, and go to state 4
    INT          shift, and go to state 5
    STRUCT       shift, and go to state 6
    LONG         shift, and go to state 7
    ENUM         shift, and go to state 8
    CHAR         shift, and go to state 11
    UNION        shift, and go to state 13
    CONST        shift, and go to state 14
    FLOAT        shift, and go to state 15
    SHORT        shift, and go to state 16
    UNSIGNED     shift, and go to state 17
    SIGNED       shift, and go to state 18
    VOID         shift, and go to state 19
    VOLATILE     shift, and go to state 20
    TYPEDEFname  shift, and go to state 25
    INLINE       shift, and go to state 26

    type.specifier                 go to state 265
    basic.type.specifier           go to state 155
    sue.type.specifier             go to state 156
    typedef.type.specifier         go to state 157
    type.qualifier.list            go to state 266
    elaborated.type.name           go to state 44
    struct.or.union.specifier      go to state 51
    struct.or.union                go to state 52
    struct.declaration             go to state 429
    struct.default.declaring.list  go to state 269
    struct.declaring.list          go to state 270
    enum.specifier                 go to state 53
    type.qualifier                 go to state 57
    basic.type.name                go to state 59


state 268

  335 struct.declaration.list: struct.declaration .

    $default  reduce using rule 335 (struct.declaration.list)


state 269

  338 struct.declaration: struct.default.declaring.list . ';'
  340 struct.default.declaring.list: struct.default.declaring.list . ',' struct.identifier.declarator

    ';'  shift, and go to state 430
    ','  shift, and go to state 431


state 270

  337 struct.declaration: struct.declaring.list . ';'
  342 struct.declaring.list: struct.declaring.list . ',' struct.declarator

    ';'  shift, and go to state 432
    ','  shift, and go to state 433


state 271

  329 struct.or.union.specifier: struct.or.union identifier.or.typedef.name '{' . struct.declaration.list '}'
  332                          | struct.or.union identifier.or.typedef.name '{' . '}'

    '}'          shift, and go to state 434
    DOUBLE       shift, and go to state 4
    INT          shift, and go to state 5
    STRUCT       shift, and go to state 6
    LONG         shift, and go to state 7
    ENUM         shift, and go to state 8
    CHAR         shift, and go to state 11
    UNION        shift, and go to state 13
    CONST        shift, and go to state 14
    FLOAT        shift, and go to state 15
    SHORT        shift, and go to state 16
    UNSIGNED     shift, and go to state 17
    SIGNED       shift, and go to state 18
    VOID         shift, and go to state 19
    VOLATILE     shift, and go to state 20
    TYPEDEFname  shift, and go to state 25
    INLINE       shift, and go to state 26

    type.specifier                 go to state 265
    basic.type.specifier           go to state 155
    sue.type.specifier             go to state 156
    typedef.type.specifier         go to state 157
    type.qualifier.list            go to state 266
    elaborated.type.name           go to state 44
    struct.or.union.specifier      go to state 51
    struct.or.union                go to state 52
    struct.declaration.list        go to state 435
    struct.declaration             go to state 268
    struct.default.declaring.list  go to state 269
    struct.declaring.list          go to state 270
    enum.specifier                 go to state 53
    type.qualifier                 go to state 57
    basic.type.name                go to state 59


state 272

  266 postfix.identifier.declarator: '(' unary.identifier.declarator ')' postfixing.abstract.declarator .

    $default  reduce using rule 266 (postfix.identifier.declarator)


state 273

  274 postfix.old.function.declarator: '(' old.function.declarator ')' postfixing.abstract.declarator .

    $default  reduce using rule 274 (postfix.old.function.declarator)


state 274

  356 enumerator.value.opt: '=' . constant.expression

    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    SIZEOF             shift, and go to state 223
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 227
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    primary.expression         go to state 236
    postfix.expression         go to state 237
    unary.expression           go to state 238
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 241
    additive.expression        go to state 242
    shift.expression           go to state 243
    relational.expression      go to state 244
    equality.expression        go to state 245
    AND.expression             go to state 246
    exclusive.OR.expression    go to state 247
    inclusive.OR.expression    go to state 248
    logical.AND.expression     go to state 249
    logical.OR.expression      go to state 250
    conditional.expression     go to state 251
    constant.expression        go to state 436
    constant                   go to state 253
    string.literal.list        go to state 254


state 275

  353 enumerator.list: identifier.or.typedef.name enumerator.value.opt .

    $default  reduce using rule 353 (enumerator.list)


state 276

  354 enumerator.list: enumerator.list ',' . identifier.or.typedef.name enumerator.value.opt
  358 comma.opt: ',' .

    IDENTIFIER   shift, and go to state 70
    TYPEDEFname  shift, and go to state 71

    $default  reduce using rule 358 (comma.opt)

    identifier.or.typedef.name  go to state 437


state 277

  350 enum.specifier: ENUM '{' enumerator.list comma.opt . '}'

    '}'  shift, and go to state 438


state 278

  351 enum.specifier: ENUM identifier.or.typedef.name '{' enumerator.list . comma.opt '}'
  354 enumerator.list: enumerator.list . ',' identifier.or.typedef.name enumerator.value.opt

    ','  shift, and go to state 276

    $default  reduce using rule 357 (comma.opt)

    comma.opt  go to state 439


state 279

   11 composite.head.inout: INPUT . composite.head.inout.member.list ',' OUTPUT composite.head.inout.member.list
   12                     | INPUT . composite.head.inout.member.list

    STREAM  shift, and go to state 23

    stream.type.specifier             go to state 440
    composite.head.inout.member.list  go to state 441
    composite.head.inout.member       go to state 442


state 280

   13 composite.head.inout: OUTPUT . composite.head.inout.member.list
   14                     | OUTPUT . composite.head.inout.member.list ',' INPUT composite.head.inout.member.list

    STREAM  shift, and go to state 23

    stream.type.specifier             go to state 440
    composite.head.inout.member.list  go to state 443
    composite.head.inout.member       go to state 442


state 281

    9 composite.head: COMPOSITE IDENTIFIER '(' composite.head.inout . ')'

    ')'  shift, and go to state 444


state 282

    2 stream.type.specifier: STREAM '<' stream.declaration.list '>' .

    $default  reduce using rule 2 (stream.type.specifier)


state 283

    5 stream.declaration.list: stream.declaration.list ',' . type.specifier paren.identifier.declarator
    6                        | stream.declaration.list ',' . type.specifier paren.identifier.declarator postfixing.abstract.declarator

    DOUBLE       shift, and go to state 4
    INT          shift, and go to state 5
    STRUCT       shift, and go to state 6
    LONG         shift, and go to state 7
    ENUM         shift, and go to state 8
    CHAR         shift, and go to state 11
    UNION        shift, and go to state 13
    CONST        shift, and go to state 14
    FLOAT        shift, and go to state 15
    SHORT        shift, and go to state 16
    UNSIGNED     shift, and go to state 17
    SIGNED       shift, and go to state 18
    VOID         shift, and go to state 19
    VOLATILE     shift, and go to state 20
    TYPEDEFname  shift, and go to state 25
    INLINE       shift, and go to state 26

    type.specifier             go to state 445
    basic.type.specifier       go to state 155
    sue.type.specifier         go to state 156
    typedef.type.specifier     go to state 157
    type.qualifier.list        go to state 158
    elaborated.type.name       go to state 44
    struct.or.union.specifier  go to state 51
    struct.or.union            go to state 52
    enum.specifier             go to state 53
    type.qualifier             go to state 57
    basic.type.name            go to state 59


state 284

  268 paren.identifier.declarator: '(' . paren.identifier.declarator ')'

    '('         shift, and go to state 284
    IDENTIFIER  shift, and go to state 24

    paren.identifier.declarator  go to state 446


state 285

    3 stream.declaration.list: type.specifier paren.identifier.declarator .
    4                        | type.specifier paren.identifier.declarator . postfixing.abstract.declarator

    '('  shift, and go to state 161
    '['  shift, and go to state 134

    $default  reduce using rule 3 (stream.declaration.list)

    postfixing.abstract.declarator  go to state 447
    array.abstract.declarator       go to state 136


state 286

   21 composite.body.param.opt: PARAM . parameter.list ';'

    AUTO         shift, and go to state 3
    DOUBLE       shift, and go to state 4
    INT          shift, and go to state 5
    STRUCT       shift, and go to state 6
    LONG         shift, and go to state 7
    ENUM         shift, and go to state 8
    REGISTER     shift, and go to state 9
    TYPEDEF      shift, and go to state 10
    CHAR         shift, and go to state 11
    EXTERN       shift, and go to state 12
    UNION        shift, and go to state 13
    CONST        shift, and go to state 14
    FLOAT        shift, and go to state 15
    SHORT        shift, and go to state 16
    UNSIGNED     shift, and go to state 17
    SIGNED       shift, and go to state 18
    VOID         shift, and go to state 19
    VOLATILE     shift, and go to state 20
    STATIC       shift, and go to state 21
    TYPEDEFname  shift, and go to state 25
    INLINE       shift, and go to state 26

    declaration.specifier          go to state 205
    basic.declaration.specifier    go to state 35
    sue.declaration.specifier      go to state 206
    typedef.declaration.specifier  go to state 37
    declaration.qualifier.list     go to state 207
    type.specifier                 go to state 208
    basic.type.specifier           go to state 40
    sue.type.specifier             go to state 209
    typedef.type.specifier         go to state 42
    type.qualifier.list            go to state 210
    elaborated.type.name           go to state 44
    parameter.list                 go to state 448
    parameter.declaration          go to state 214
    struct.or.union.specifier      go to state 51
    struct.or.union                go to state 52
    enum.specifier                 go to state 53
    type.qualifier                 go to state 57
    storage.class                  go to state 58
    basic.type.name                go to state 59


state 287

   18 composite.body.no.new.scope: '{' composite.body.param.opt . composite.body.statement.list '}'
   19                            | '{' composite.body.param.opt . declaration.list composite.body.statement.list '}'

    error              shift, and go to state 321
    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    '{'                shift, and go to state 322
    AUTO               shift, and go to state 3
    DOUBLE             shift, and go to state 4
    INT                shift, and go to state 5
    STRUCT             shift, and go to state 6
    BREAK              shift, and go to state 324
    LONG               shift, and go to state 7
    SWITCH             shift, and go to state 325
    CASE               shift, and go to state 326
    ENUM               shift, and go to state 8
    REGISTER           shift, and go to state 9
    TYPEDEF            shift, and go to state 10
    CHAR               shift, and go to state 11
    EXTERN             shift, and go to state 12
    RETURN             shift, and go to state 327
    UNION              shift, and go to state 13
    CONST              shift, and go to state 14
    FLOAT              shift, and go to state 15
    SHORT              shift, and go to state 16
    UNSIGNED           shift, and go to state 17
    CONTINUE           shift, and go to state 328
    FOR                shift, and go to state 329
    SIGNED             shift, and go to state 18
    VOID               shift, and go to state 19
    DEFAULT            shift, and go to state 330
    GOTO               shift, and go to state 331
    SIZEOF             shift, and go to state 223
    VOLATILE           shift, and go to state 20
    DO                 shift, and go to state 332
    IF                 shift, and go to state 333
    STATIC             shift, and go to state 21
    WHILE              shift, and go to state 334
    STREAM             shift, and go to state 23
    ADD                shift, and go to state 449
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    FILEWRITER         shift, and go to state 450
    IDENTIFIER         shift, and go to state 335
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    TYPEDEFname        shift, and go to state 336
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235
    INLINE             shift, and go to state 26

    ';'  reduce using rule 151 (expression.opt)

    stream.type.specifier          go to state 28
    composite.body.statement.list  go to state 451
    composite.body.operator        go to state 452
    operator.file.writer           go to state 453
    operator.add                   go to state 454
    primary.expression             go to state 236
    postfix.expression             go to state 237
    unary.expression               go to state 337
    unary.operator                 go to state 239
    cast.expression                go to state 240
    multiplicative.expression      go to state 241
    additive.expression            go to state 242
    shift.expression               go to state 243
    relational.expression          go to state 244
    equality.expression            go to state 245
    AND.expression                 go to state 246
    exclusive.OR.expression        go to state 247
    inclusive.OR.expression        go to state 248
    logical.AND.expression         go to state 249
    logical.OR.expression          go to state 250
    conditional.expression         go to state 338
    assignment.expression          go to state 339
    expression                     go to state 340
    expression.opt                 go to state 341
    declaration                    go to state 258
    declaring.list                 go to state 32
    default.declaring.list         go to state 33
    declaration.specifier          go to state 259
    basic.declaration.specifier    go to state 35
    sue.declaration.specifier      go to state 36
    typedef.declaration.specifier  go to state 37
    declaration.qualifier.list     go to state 260
    type.specifier                 go to state 261
    basic.type.specifier           go to state 40
    sue.type.specifier             go to state 41
    typedef.type.specifier         go to state 42
    type.qualifier.list            go to state 262
    elaborated.type.name           go to state 44
    struct.or.union.specifier      go to state 51
    struct.or.union                go to state 52
    enum.specifier                 go to state 53
    costream.composite.statement   go to state 455
    statement                      go to state 456
    labeled.statement              go to state 343
    compound.statement             go to state 344
    lblock                         go to state 345
    declaration.list               go to state 457
    expression.statement           go to state 348
    selection.statement            go to state 349
    iteration.statement            go to state 350
    jump.statement                 go to state 351
    constant                       go to state 253
    string.literal.list            go to state 254
    type.qualifier                 go to state 57
    storage.class                  go to state 58
    basic.type.name                go to state 59


state 288

  165 declaring.list: declaring.list ',' declarator @6 . attributes.opt $@7 initializer.opt

    ATTRIBUTE  shift, and go to state 290

    $default  reduce using rule 283 (attributes.opt)

    attributes.opt  go to state 458
    attributes      go to state 292
    attribute       go to state 293


state 289

  180 default.declaring.list: default.declaring.list ',' identifier.declarator @14 . attributes.opt $@15 initializer.opt

    ATTRIBUTE  shift, and go to state 290

    $default  reduce using rule 283 (attributes.opt)

    attributes.opt  go to state 459
    attributes      go to state 292
    attribute       go to state 293


state 290

  287 attribute: ATTRIBUTE . '(' '(' attribute.list ')' ')'

    '('  shift, and go to state 460


state 291

  167 declaring.list: declaration.specifier error $@8 attributes.opt . initializer.opt

    '='  shift, and go to state 461

    $default  reduce using rule 296 (initializer.opt)

    initializer.opt  go to state 462


state 292

  284 attributes.opt: attributes .
  286 attributes: attributes . attribute

    ATTRIBUTE  shift, and go to state 290

    $default  reduce using rule 284 (attributes.opt)

    attribute  go to state 463


state 293

  285 attributes: attribute .

    $default  reduce using rule 285 (attributes)


state 294

  229 paren.typedef.declarator: '*' '(' simple.paren.typedef.declarator . ')'
  233 paren.postfix.typedef.declarator: '(' simple.paren.typedef.declarator . postfixing.abstract.declarator ')'

    '('  shift, and go to state 161
    ')'  shift, and go to state 464
    '['  shift, and go to state 134

    postfixing.abstract.declarator  go to state 300
    array.abstract.declarator       go to state 136


state 295

  230 paren.typedef.declarator: '*' pointer.type.qualifier.list '(' . simple.paren.typedef.declarator ')'
  232 paren.postfix.typedef.declarator: '(' . paren.typedef.declarator ')'
  233                                 | '(' . simple.paren.typedef.declarator postfixing.abstract.declarator ')'
  234                                 | '(' . paren.typedef.declarator ')' postfixing.abstract.declarator
  243 clean.postfix.typedef.declarator: '(' . clean.typedef.declarator ')'
  244                                 | '(' . clean.typedef.declarator ')' postfixing.abstract.declarator
  265 postfix.identifier.declarator: '(' . unary.identifier.declarator ')'
  266                              | '(' . unary.identifier.declarator ')' postfixing.abstract.declarator
  268 paren.identifier.declarator: '(' . paren.identifier.declarator ')'
  273 postfix.old.function.declarator: '(' . old.function.declarator ')'
  274                                | '(' . old.function.declarator ')' postfixing.abstract.declarator

    '*'          shift, and go to state 86
    '('          shift, and go to state 175
    IDENTIFIER   shift, and go to state 24
    TYPEDEFname  shift, and go to state 176

    paren.typedef.declarator          go to state 177
    paren.postfix.typedef.declarator  go to state 91
    simple.paren.typedef.declarator   go to state 465
    clean.typedef.declarator          go to state 179
    clean.postfix.typedef.declarator  go to state 94
    unary.identifier.declarator       go to state 66
    postfix.identifier.declarator     go to state 47
    paren.identifier.declarator       go to state 67
    old.function.declarator           go to state 68
    postfix.old.function.declarator   go to state 50


state 296

  231 paren.typedef.declarator: '*' pointer.type.qualifier.list paren.typedef.declarator .

    $default  reduce using rule 231 (paren.typedef.declarator)


state 297

  242 clean.typedef.declarator: '*' pointer.type.qualifier.list parameter.typedef.declarator .

    $default  reduce using rule 242 (clean.typedef.declarator)


state 298

  233 paren.postfix.typedef.declarator: '(' simple.paren.typedef.declarator . postfixing.abstract.declarator ')'
  236 simple.paren.typedef.declarator: '(' simple.paren.typedef.declarator . ')'

    '('  shift, and go to state 161
    ')'  shift, and go to state 466
    '['  shift, and go to state 134

    postfixing.abstract.declarator  go to state 300
    array.abstract.declarator       go to state 136


state 299

  232 paren.postfix.typedef.declarator: '(' paren.typedef.declarator ')' .
  234                                 | '(' paren.typedef.declarator ')' . postfixing.abstract.declarator

    '('  shift, and go to state 161
    '['  shift, and go to state 134

    $default  reduce using rule 232 (paren.postfix.typedef.declarator)

    postfixing.abstract.declarator  go to state 467
    array.abstract.declarator       go to state 136


state 300

  233 paren.postfix.typedef.declarator: '(' simple.paren.typedef.declarator postfixing.abstract.declarator . ')'

    ')'  shift, and go to state 468


state 301

  243 clean.postfix.typedef.declarator: '(' clean.typedef.declarator ')' .
  244                                 | '(' clean.typedef.declarator ')' . postfixing.abstract.declarator

    '('  shift, and go to state 161
    '['  shift, and go to state 134

    $default  reduce using rule 243 (clean.postfix.typedef.declarator)

    postfixing.abstract.declarator  go to state 469
    array.abstract.declarator       go to state 136


state 302

  159 declaring.list: declaration.specifier declarator $@2 attributes.opt . $@3 initializer.opt

    $default  reduce using rule 158 ($@3)

    $@3  go to state 470


state 303

  420 function.definition: declaration.specifier identifier.declarator $@28 compound.statement.no.new.scope .

    $default  reduce using rule 420 (function.definition)


state 304

  430 function.definition: declaration.specifier old.function.declarator $@33 compound.statement.no.new.scope .

    $default  reduce using rule 430 (function.definition)


state 305

  440 function.definition: declaration.specifier old.function.declarator old.function.declaration.list $@38 . compound.statement.no.new.scope

    '{'  shift, and go to state 200

    compound.statement.no.new.scope  go to state 471


state 306

  182 default.declaring.list: declaration.qualifier.list error $@16 attributes.opt . initializer.opt

    '='  shift, and go to state 461

    $default  reduce using rule 296 (initializer.opt)

    initializer.opt  go to state 472


state 307

  173 default.declaring.list: declaration.qualifier.list identifier.declarator $@10 attributes.opt . $@11 initializer.opt

    $default  reduce using rule 172 ($@11)

    $@11  go to state 473


state 308

  424 function.definition: declaration.qualifier.list identifier.declarator $@30 compound.statement.no.new.scope .

    $default  reduce using rule 424 (function.definition)


state 309

  434 function.definition: declaration.qualifier.list old.function.declarator $@35 compound.statement.no.new.scope .

    $default  reduce using rule 434 (function.definition)


state 310

  444 function.definition: declaration.qualifier.list old.function.declarator old.function.declaration.list $@40 . compound.statement.no.new.scope

    '{'  shift, and go to state 200

    compound.statement.no.new.scope  go to state 474


state 311

  169 declaring.list: type.specifier error $@9 attributes.opt . initializer.opt

    '='  shift, and go to state 461

    $default  reduce using rule 296 (initializer.opt)

    initializer.opt  go to state 475


state 312

  162 declaring.list: type.specifier declarator $@4 attributes.opt . $@5 initializer.opt

    $default  reduce using rule 161 ($@5)

    $@5  go to state 476


state 313

  422 function.definition: type.specifier identifier.declarator $@29 compound.statement.no.new.scope .

    $default  reduce using rule 422 (function.definition)


state 314

  432 function.definition: type.specifier old.function.declarator $@34 compound.statement.no.new.scope .

    $default  reduce using rule 432 (function.definition)


state 315

  442 function.definition: type.specifier old.function.declarator old.function.declaration.list $@39 . compound.statement.no.new.scope

    '{'  shift, and go to state 200

    compound.statement.no.new.scope  go to state 477


state 316

  184 default.declaring.list: type.qualifier.list error $@17 attributes.opt . initializer.opt

    '='  shift, and go to state 461

    $default  reduce using rule 296 (initializer.opt)

    initializer.opt  go to state 478


state 317

  177 default.declaring.list: type.qualifier.list identifier.declarator $@12 attributes.opt . $@13 initializer.opt

    $default  reduce using rule 176 ($@13)

    $@13  go to state 479


state 318

  426 function.definition: type.qualifier.list identifier.declarator $@31 compound.statement.no.new.scope .

    $default  reduce using rule 426 (function.definition)


state 319

  436 function.definition: type.qualifier.list old.function.declarator $@36 compound.statement.no.new.scope .

    $default  reduce using rule 436 (function.definition)


state 320

  446 function.definition: type.qualifier.list old.function.declarator old.function.declaration.list $@41 . compound.statement.no.new.scope

    '{'  shift, and go to state 200

    compound.statement.no.new.scope  go to state 480


state 321

  367 statement: error . ';'

    ';'  shift, and go to state 481


state 322

  377 lblock: '{' .

    $default  reduce using rule 377 (lblock)


state 323

  379 compound.statement.no.new.scope: '{' '}' .

    $default  reduce using rule 379 (compound.statement.no.new.scope)


state 324

  408 jump.statement: BREAK . ';'

    ';'  shift, and go to state 482


state 325

  391 selection.statement: SWITCH . $@19 '(' expression ')' statement

    $default  reduce using rule 390 ($@19)

    $@19  go to state 483


state 326

  370 labeled.statement: CASE . constant.expression ':' statement

    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    SIZEOF             shift, and go to state 223
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 227
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    primary.expression         go to state 236
    postfix.expression         go to state 237
    unary.expression           go to state 238
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 241
    additive.expression        go to state 242
    shift.expression           go to state 243
    relational.expression      go to state 244
    equality.expression        go to state 245
    AND.expression             go to state 246
    exclusive.OR.expression    go to state 247
    inclusive.OR.expression    go to state 248
    logical.AND.expression     go to state 249
    logical.OR.expression      go to state 250
    conditional.expression     go to state 251
    constant.expression        go to state 484
    constant                   go to state 253
    string.literal.list        go to state 254


state 327

  409 jump.statement: RETURN . expression.opt ';'

    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    SIZEOF             shift, and go to state 223
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 227
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    $default  reduce using rule 151 (expression.opt)

    primary.expression         go to state 236
    postfix.expression         go to state 237
    unary.expression           go to state 337
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 241
    additive.expression        go to state 242
    shift.expression           go to state 243
    relational.expression      go to state 244
    equality.expression        go to state 245
    AND.expression             go to state 246
    exclusive.OR.expression    go to state 247
    inclusive.OR.expression    go to state 248
    logical.AND.expression     go to state 249
    logical.OR.expression      go to state 250
    conditional.expression     go to state 338
    assignment.expression      go to state 339
    expression                 go to state 340
    expression.opt             go to state 485
    constant                   go to state 253
    string.literal.list        go to state 254


state 328

  407 jump.statement: CONTINUE . ';'

    ';'  shift, and go to state 486


state 329

  397 iteration.statement: FOR . '(' expression.opt ';' expression.opt ';' expression.opt ')' $@22 costream.composite.statement
  399                    | FOR . '(' error ';' expression.opt ';' expression.opt ')' $@23 costream.composite.statement
  401                    | FOR . '(' expression.opt ';' expression.opt ';' error ')' $@24 costream.composite.statement
  403                    | FOR . '(' expression.opt ';' error ';' expression.opt ')' $@25 costream.composite.statement
  405                    | FOR . '(' error ')' $@26 costream.composite.statement

    '('  shift, and go to state 487


state 330

  371 labeled.statement: DEFAULT . ':' statement

    ':'  shift, and go to state 488


state 331

  406 jump.statement: GOTO . IDENTIFIER ';'
  410               | GOTO . TYPEDEFname ';'

    IDENTIFIER   shift, and go to state 489
    TYPEDEFname  shift, and go to state 490


state 332

  395 iteration.statement: DO . $@21 statement WHILE '(' expression ')' ';'

    $default  reduce using rule 394 ($@21)

    $@21  go to state 491


state 333

  388 selection.statement: IF . '(' expression ')' costream.composite.statement
  389                    | IF . '(' expression ')' costream.composite.statement ELSE costream.composite.statement

    '('  shift, and go to state 492


state 334

  393 iteration.statement: WHILE . $@20 '(' expression ')' statement

    $default  reduce using rule 392 ($@20)

    $@20  go to state 493


state 335

   63 primary.expression: IDENTIFIER .
  369 labeled.statement: IDENTIFIER . ':' @18 statement

    ':'  shift, and go to state 494

    $default  reduce using rule 63 (primary.expression)


state 336

  214 typedef.type.specifier: TYPEDEFname .
  372 labeled.statement: TYPEDEFname . ':' statement

    ':'  shift, and go to state 495

    $default  reduce using rule 214 (typedef.type.specifier)


state 337

  103 cast.expression: unary.expression .
  136 assignment.expression: unary.expression . assignment.operator assignment.expression

    '='          shift, and go to state 496
    MULTassign   shift, and go to state 497
    DIVassign    shift, and go to state 498
    MODassign    shift, and go to state 499
    PLUSassign   shift, and go to state 500
    MINUSassign  shift, and go to state 501
    LSassign     shift, and go to state 502
    RSassign     shift, and go to state 503
    ANDassign    shift, and go to state 504
    ERassign     shift, and go to state 505
    ORassign     shift, and go to state 506

    $default  reduce using rule 103 (cast.expression)

    assignment.operator  go to state 507


state 338

  135 assignment.expression: conditional.expression .

    $default  reduce using rule 135 (assignment.expression)


state 339

  148 expression: assignment.expression .

    $default  reduce using rule 148 (expression)


state 340

  149 expression: expression . ',' assignment.expression
  152 expression.opt: expression .

    ','  shift, and go to state 508

    $default  reduce using rule 152 (expression.opt)


state 341

  387 expression.statement: expression.opt . ';'

    ';'  shift, and go to state 509


state 342

  385 statement.list: statement .

    $default  reduce using rule 385 (statement.list)


state 343

  361 statement: labeled.statement .

    $default  reduce using rule 361 (statement)


state 344

  362 statement: compound.statement .

    $default  reduce using rule 362 (statement)


state 345

  373 compound.statement: lblock . rblock
  374                   | lblock . declaration.list rblock
  375                   | lblock . composite.body.statement.list rblock
  376                   | lblock . declaration.list composite.body.statement.list rblock

    error              shift, and go to state 321
    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    '{'                shift, and go to state 322
    '}'                shift, and go to state 510
    AUTO               shift, and go to state 3
    DOUBLE             shift, and go to state 4
    INT                shift, and go to state 5
    STRUCT             shift, and go to state 6
    BREAK              shift, and go to state 324
    LONG               shift, and go to state 7
    SWITCH             shift, and go to state 325
    CASE               shift, and go to state 326
    ENUM               shift, and go to state 8
    REGISTER           shift, and go to state 9
    TYPEDEF            shift, and go to state 10
    CHAR               shift, and go to state 11
    EXTERN             shift, and go to state 12
    RETURN             shift, and go to state 327
    UNION              shift, and go to state 13
    CONST              shift, and go to state 14
    FLOAT              shift, and go to state 15
    SHORT              shift, and go to state 16
    UNSIGNED           shift, and go to state 17
    CONTINUE           shift, and go to state 328
    FOR                shift, and go to state 329
    SIGNED             shift, and go to state 18
    VOID               shift, and go to state 19
    DEFAULT            shift, and go to state 330
    GOTO               shift, and go to state 331
    SIZEOF             shift, and go to state 223
    VOLATILE           shift, and go to state 20
    DO                 shift, and go to state 332
    IF                 shift, and go to state 333
    STATIC             shift, and go to state 21
    WHILE              shift, and go to state 334
    STREAM             shift, and go to state 23
    ADD                shift, and go to state 449
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    FILEWRITER         shift, and go to state 450
    IDENTIFIER         shift, and go to state 335
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    TYPEDEFname        shift, and go to state 336
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235
    INLINE             shift, and go to state 26

    ';'  reduce using rule 151 (expression.opt)

    stream.type.specifier          go to state 28
    composite.body.statement.list  go to state 511
    composite.body.operator        go to state 452
    operator.file.writer           go to state 453
    operator.add                   go to state 454
    primary.expression             go to state 236
    postfix.expression             go to state 237
    unary.expression               go to state 337
    unary.operator                 go to state 239
    cast.expression                go to state 240
    multiplicative.expression      go to state 241
    additive.expression            go to state 242
    shift.expression               go to state 243
    relational.expression          go to state 244
    equality.expression            go to state 245
    AND.expression                 go to state 246
    exclusive.OR.expression        go to state 247
    inclusive.OR.expression        go to state 248
    logical.AND.expression         go to state 249
    logical.OR.expression          go to state 250
    conditional.expression         go to state 338
    assignment.expression          go to state 339
    expression                     go to state 340
    expression.opt                 go to state 341
    declaration                    go to state 258
    declaring.list                 go to state 32
    default.declaring.list         go to state 33
    declaration.specifier          go to state 259
    basic.declaration.specifier    go to state 35
    sue.declaration.specifier      go to state 36
    typedef.declaration.specifier  go to state 37
    declaration.qualifier.list     go to state 260
    type.specifier                 go to state 261
    basic.type.specifier           go to state 40
    sue.type.specifier             go to state 41
    typedef.type.specifier         go to state 42
    type.qualifier.list            go to state 262
    elaborated.type.name           go to state 44
    struct.or.union.specifier      go to state 51
    struct.or.union                go to state 52
    enum.specifier                 go to state 53
    costream.composite.statement   go to state 455
    statement                      go to state 456
    labeled.statement              go to state 343
    compound.statement             go to state 344
    lblock                         go to state 345
    rblock                         go to state 512
    declaration.list               go to state 513
    expression.statement           go to state 348
    selection.statement            go to state 349
    iteration.statement            go to state 350
    jump.statement                 go to state 351
    constant                       go to state 253
    string.literal.list            go to state 254
    type.qualifier                 go to state 57
    storage.class                  go to state 58
    basic.type.name                go to state 59


state 346

  380 compound.statement.no.new.scope: '{' declaration.list . '}'
  382                                | '{' declaration.list . statement.list '}'
  384 declaration.list: declaration.list . declaration

    error              shift, and go to state 321
    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    '{'                shift, and go to state 322
    '}'                shift, and go to state 514
    AUTO               shift, and go to state 3
    DOUBLE             shift, and go to state 4
    INT                shift, and go to state 5
    STRUCT             shift, and go to state 6
    BREAK              shift, and go to state 324
    LONG               shift, and go to state 7
    SWITCH             shift, and go to state 325
    CASE               shift, and go to state 326
    ENUM               shift, and go to state 8
    REGISTER           shift, and go to state 9
    TYPEDEF            shift, and go to state 10
    CHAR               shift, and go to state 11
    EXTERN             shift, and go to state 12
    RETURN             shift, and go to state 327
    UNION              shift, and go to state 13
    CONST              shift, and go to state 14
    FLOAT              shift, and go to state 15
    SHORT              shift, and go to state 16
    UNSIGNED           shift, and go to state 17
    CONTINUE           shift, and go to state 328
    FOR                shift, and go to state 329
    SIGNED             shift, and go to state 18
    VOID               shift, and go to state 19
    DEFAULT            shift, and go to state 330
    GOTO               shift, and go to state 331
    SIZEOF             shift, and go to state 223
    VOLATILE           shift, and go to state 20
    DO                 shift, and go to state 332
    IF                 shift, and go to state 333
    STATIC             shift, and go to state 21
    WHILE              shift, and go to state 334
    STREAM             shift, and go to state 23
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 335
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    TYPEDEFname        shift, and go to state 336
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235
    INLINE             shift, and go to state 26

    ';'  reduce using rule 151 (expression.opt)

    stream.type.specifier          go to state 28
    primary.expression             go to state 236
    postfix.expression             go to state 237
    unary.expression               go to state 337
    unary.operator                 go to state 239
    cast.expression                go to state 240
    multiplicative.expression      go to state 241
    additive.expression            go to state 242
    shift.expression               go to state 243
    relational.expression          go to state 244
    equality.expression            go to state 245
    AND.expression                 go to state 246
    exclusive.OR.expression        go to state 247
    inclusive.OR.expression        go to state 248
    logical.AND.expression         go to state 249
    logical.OR.expression          go to state 250
    conditional.expression         go to state 338
    assignment.expression          go to state 339
    expression                     go to state 340
    expression.opt                 go to state 341
    declaration                    go to state 420
    declaring.list                 go to state 32
    default.declaring.list         go to state 33
    declaration.specifier          go to state 259
    basic.declaration.specifier    go to state 35
    sue.declaration.specifier      go to state 36
    typedef.declaration.specifier  go to state 37
    declaration.qualifier.list     go to state 260
    type.specifier                 go to state 261
    basic.type.specifier           go to state 40
    sue.type.specifier             go to state 41
    typedef.type.specifier         go to state 42
    type.qualifier.list            go to state 262
    elaborated.type.name           go to state 44
    struct.or.union.specifier      go to state 51
    struct.or.union                go to state 52
    enum.specifier                 go to state 53
    statement                      go to state 342
    labeled.statement              go to state 343
    compound.statement             go to state 344
    lblock                         go to state 345
    statement.list                 go to state 515
    expression.statement           go to state 348
    selection.statement            go to state 349
    iteration.statement            go to state 350
    jump.statement                 go to state 351
    constant                       go to state 253
    string.literal.list            go to state 254
    type.qualifier                 go to state 57
    storage.class                  go to state 58
    basic.type.name                go to state 59


state 347

  381 compound.statement.no.new.scope: '{' statement.list . '}'
  386 statement.list: statement.list . statement

    error              shift, and go to state 321
    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    '{'                shift, and go to state 322
    '}'                shift, and go to state 516
    BREAK              shift, and go to state 324
    SWITCH             shift, and go to state 325
    CASE               shift, and go to state 326
    RETURN             shift, and go to state 327
    CONTINUE           shift, and go to state 328
    FOR                shift, and go to state 329
    DEFAULT            shift, and go to state 330
    GOTO               shift, and go to state 331
    SIZEOF             shift, and go to state 223
    DO                 shift, and go to state 332
    IF                 shift, and go to state 333
    WHILE              shift, and go to state 334
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 335
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    TYPEDEFname        shift, and go to state 517
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    ';'  reduce using rule 151 (expression.opt)

    primary.expression         go to state 236
    postfix.expression         go to state 237
    unary.expression           go to state 337
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 241
    additive.expression        go to state 242
    shift.expression           go to state 243
    relational.expression      go to state 244
    equality.expression        go to state 245
    AND.expression             go to state 246
    exclusive.OR.expression    go to state 247
    inclusive.OR.expression    go to state 248
    logical.AND.expression     go to state 249
    logical.OR.expression      go to state 250
    conditional.expression     go to state 338
    assignment.expression      go to state 339
    expression                 go to state 340
    expression.opt             go to state 341
    statement                  go to state 518
    labeled.statement          go to state 343
    compound.statement         go to state 344
    lblock                     go to state 345
    expression.statement       go to state 348
    selection.statement        go to state 349
    iteration.statement        go to state 350
    jump.statement             go to state 351
    constant                   go to state 253
    string.literal.list        go to state 254


state 348

  363 statement: expression.statement .

    $default  reduce using rule 363 (statement)


state 349

  364 statement: selection.statement .

    $default  reduce using rule 364 (statement)


state 350

  365 statement: iteration.statement .

    $default  reduce using rule 365 (statement)


state 351

  366 statement: jump.statement .

    $default  reduce using rule 366 (statement)


state 352

  241 clean.typedef.declarator: '*' . parameter.typedef.declarator
  242                         | '*' . pointer.type.qualifier.list parameter.typedef.declarator
  248 unary.abstract.declarator: '*' .
  249                          | '*' . pointer.type.qualifier.list
  250                          | '*' . abstract.declarator
  251                          | '*' . pointer.type.qualifier.list abstract.declarator
  262 unary.identifier.declarator: '*' . identifier.declarator
  263                            | '*' . pointer.type.qualifier.list identifier.declarator

    '*'          shift, and go to state 352
    '('          shift, and go to state 353
    '['          shift, and go to state 134
    CONST        shift, and go to state 60
    VOLATILE     shift, and go to state 61
    IDENTIFIER   shift, and go to state 24
    TYPEDEFname  shift, and go to state 88

    $default  reduce using rule 248 (unary.abstract.declarator)

    pointer.type.qualifier.list       go to state 519
    parameter.typedef.declarator      go to state 174
    clean.typedef.declarator          go to state 93
    clean.postfix.typedef.declarator  go to state 94
    abstract.declarator               go to state 520
    unary.abstract.declarator         go to state 356
    postfix.abstract.declarator       go to state 357
    postfixing.abstract.declarator    go to state 358
    identifier.declarator             go to state 63
    unary.identifier.declarator       go to state 46
    postfix.identifier.declarator     go to state 47
    paren.identifier.declarator       go to state 79
    array.abstract.declarator         go to state 136
    pointer.type.qualifier            go to state 65


state 353

  243 clean.postfix.typedef.declarator: '(' . clean.typedef.declarator ')'
  244                                 | '(' . clean.typedef.declarator ')' postfixing.abstract.declarator
  252 postfix.abstract.declarator: '(' . unary.abstract.declarator ')'
  253                            | '(' . postfix.abstract.declarator ')'
  254                            | '(' . postfixing.abstract.declarator ')'
  255                            | '(' . unary.abstract.declarator ')' postfixing.abstract.declarator
  257 postfixing.abstract.declarator: '(' . ')'
  258                               | '(' . parameter.type.list ')'
  265 postfix.identifier.declarator: '(' . unary.identifier.declarator ')'
  266                              | '(' . unary.identifier.declarator ')' postfixing.abstract.declarator
  268 paren.identifier.declarator: '(' . paren.identifier.declarator ')'

    '*'          shift, and go to state 352
    '('          shift, and go to state 353
    ')'          shift, and go to state 202
    '['          shift, and go to state 134
    AUTO         shift, and go to state 3
    DOUBLE       shift, and go to state 4
    INT          shift, and go to state 5
    STRUCT       shift, and go to state 6
    LONG         shift, and go to state 7
    ENUM         shift, and go to state 8
    REGISTER     shift, and go to state 9
    TYPEDEF      shift, and go to state 10
    CHAR         shift, and go to state 11
    EXTERN       shift, and go to state 12
    UNION        shift, and go to state 13
    CONST        shift, and go to state 14
    FLOAT        shift, and go to state 15
    SHORT        shift, and go to state 16
    UNSIGNED     shift, and go to state 17
    SIGNED       shift, and go to state 18
    VOID         shift, and go to state 19
    VOLATILE     shift, and go to state 20
    STATIC       shift, and go to state 21
    IDENTIFIER   shift, and go to state 24
    TYPEDEFname  shift, and go to state 25
    ELLIPSIS     shift, and go to state 204
    INLINE       shift, and go to state 26

    declaration.specifier             go to state 205
    basic.declaration.specifier       go to state 35
    sue.declaration.specifier         go to state 206
    typedef.declaration.specifier     go to state 37
    declaration.qualifier.list        go to state 207
    type.specifier                    go to state 208
    basic.type.specifier              go to state 40
    sue.type.specifier                go to state 209
    typedef.type.specifier            go to state 42
    type.qualifier.list               go to state 210
    elaborated.type.name              go to state 44
    clean.typedef.declarator          go to state 179
    clean.postfix.typedef.declarator  go to state 94
    unary.abstract.declarator         go to state 521
    postfix.abstract.declarator       go to state 522
    postfixing.abstract.declarator    go to state 523
    unary.identifier.declarator       go to state 66
    postfix.identifier.declarator     go to state 47
    paren.identifier.declarator       go to state 160
    parameter.type.list               go to state 212
    parameter.list                    go to state 213
    parameter.declaration             go to state 214
    array.abstract.declarator         go to state 136
    struct.or.union.specifier         go to state 51
    struct.or.union                   go to state 52
    enum.specifier                    go to state 53
    type.qualifier                    go to state 57
    storage.class                     go to state 58
    basic.type.name                   go to state 59


state 354

  313 parameter.declaration: declaration.specifier parameter.typedef.declarator .

    $default  reduce using rule 313 (parameter.declaration)


state 355

  311 parameter.declaration: declaration.specifier abstract.declarator .

    $default  reduce using rule 311 (parameter.declaration)


state 356

  245 abstract.declarator: unary.abstract.declarator .

    $default  reduce using rule 245 (abstract.declarator)


state 357

  246 abstract.declarator: postfix.abstract.declarator .

    $default  reduce using rule 246 (abstract.declarator)


state 358

  247 abstract.declarator: postfixing.abstract.declarator .

    $default  reduce using rule 247 (abstract.declarator)


state 359

  312 parameter.declaration: declaration.specifier identifier.declarator .

    $default  reduce using rule 312 (parameter.declaration)


state 360

  248 unary.abstract.declarator: '*' .
  249                          | '*' . pointer.type.qualifier.list
  250                          | '*' . abstract.declarator
  251                          | '*' . pointer.type.qualifier.list abstract.declarator
  262 unary.identifier.declarator: '*' . identifier.declarator
  263                            | '*' . pointer.type.qualifier.list identifier.declarator

    '*'         shift, and go to state 360
    '('         shift, and go to state 361
    '['         shift, and go to state 134
    CONST       shift, and go to state 60
    VOLATILE    shift, and go to state 61
    IDENTIFIER  shift, and go to state 24

    $default  reduce using rule 248 (unary.abstract.declarator)

    pointer.type.qualifier.list     go to state 524
    abstract.declarator             go to state 520
    unary.abstract.declarator       go to state 356
    postfix.abstract.declarator     go to state 357
    postfixing.abstract.declarator  go to state 358
    identifier.declarator           go to state 63
    unary.identifier.declarator     go to state 46
    postfix.identifier.declarator   go to state 47
    paren.identifier.declarator     go to state 79
    array.abstract.declarator       go to state 136
    pointer.type.qualifier          go to state 65


state 361

  252 postfix.abstract.declarator: '(' . unary.abstract.declarator ')'
  253                            | '(' . postfix.abstract.declarator ')'
  254                            | '(' . postfixing.abstract.declarator ')'
  255                            | '(' . unary.abstract.declarator ')' postfixing.abstract.declarator
  257 postfixing.abstract.declarator: '(' . ')'
  258                               | '(' . parameter.type.list ')'
  265 postfix.identifier.declarator: '(' . unary.identifier.declarator ')'
  266                              | '(' . unary.identifier.declarator ')' postfixing.abstract.declarator
  268 paren.identifier.declarator: '(' . paren.identifier.declarator ')'

    '*'          shift, and go to state 360
    '('          shift, and go to state 361
    ')'          shift, and go to state 202
    '['          shift, and go to state 134
    AUTO         shift, and go to state 3
    DOUBLE       shift, and go to state 4
    INT          shift, and go to state 5
    STRUCT       shift, and go to state 6
    LONG         shift, and go to state 7
    ENUM         shift, and go to state 8
    REGISTER     shift, and go to state 9
    TYPEDEF      shift, and go to state 10
    CHAR         shift, and go to state 11
    EXTERN       shift, and go to state 12
    UNION        shift, and go to state 13
    CONST        shift, and go to state 14
    FLOAT        shift, and go to state 15
    SHORT        shift, and go to state 16
    UNSIGNED     shift, and go to state 17
    SIGNED       shift, and go to state 18
    VOID         shift, and go to state 19
    VOLATILE     shift, and go to state 20
    STATIC       shift, and go to state 21
    IDENTIFIER   shift, and go to state 24
    TYPEDEFname  shift, and go to state 25
    ELLIPSIS     shift, and go to state 204
    INLINE       shift, and go to state 26

    declaration.specifier           go to state 205
    basic.declaration.specifier     go to state 35
    sue.declaration.specifier       go to state 206
    typedef.declaration.specifier   go to state 37
    declaration.qualifier.list      go to state 207
    type.specifier                  go to state 208
    basic.type.specifier            go to state 40
    sue.type.specifier              go to state 209
    typedef.type.specifier          go to state 42
    type.qualifier.list             go to state 210
    elaborated.type.name            go to state 44
    unary.abstract.declarator       go to state 521
    postfix.abstract.declarator     go to state 522
    postfixing.abstract.declarator  go to state 523
    unary.identifier.declarator     go to state 66
    postfix.identifier.declarator   go to state 47
    paren.identifier.declarator     go to state 160
    parameter.type.list             go to state 212
    parameter.list                  go to state 213
    parameter.declaration           go to state 214
    array.abstract.declarator       go to state 136
    struct.or.union.specifier       go to state 51
    struct.or.union                 go to state 52
    enum.specifier                  go to state 53
    type.qualifier                  go to state 57
    storage.class                   go to state 58
    basic.type.name                 go to state 59


state 362

  315 parameter.declaration: declaration.qualifier.list abstract.declarator .

    $default  reduce using rule 315 (parameter.declaration)


state 363

  316 parameter.declaration: declaration.qualifier.list identifier.declarator .

    $default  reduce using rule 316 (parameter.declaration)


state 364

  320 parameter.declaration: type.specifier parameter.typedef.declarator .

    $default  reduce using rule 320 (parameter.declaration)


state 365

  318 parameter.declaration: type.specifier abstract.declarator .

    $default  reduce using rule 318 (parameter.declaration)


state 366

  319 parameter.declaration: type.specifier identifier.declarator .

    $default  reduce using rule 319 (parameter.declaration)


state 367

  322 parameter.declaration: type.qualifier.list abstract.declarator .

    $default  reduce using rule 322 (parameter.declaration)


state 368

  323 parameter.declaration: type.qualifier.list identifier.declarator .

    $default  reduce using rule 323 (parameter.declaration)


state 369

  272 postfix.old.function.declarator: paren.identifier.declarator '(' identifier.list ')' .

    $default  reduce using rule 272 (postfix.old.function.declarator)


state 370

  276 identifier.list: identifier.list ',' . IDENTIFIER

    IDENTIFIER  shift, and go to state 525


state 371

  258 postfixing.abstract.declarator: '(' parameter.type.list ')' .

    $default  reduce using rule 258 (postfixing.abstract.declarator)


state 372

  304 parameter.type.list: parameter.list ',' . ELLIPSIS
  307 parameter.list: parameter.list ',' . parameter.declaration
  309               | parameter.list ',' . error

    error        shift, and go to state 526
    AUTO         shift, and go to state 3
    DOUBLE       shift, and go to state 4
    INT          shift, and go to state 5
    STRUCT       shift, and go to state 6
    LONG         shift, and go to state 7
    ENUM         shift, and go to state 8
    REGISTER     shift, and go to state 9
    TYPEDEF      shift, and go to state 10
    CHAR         shift, and go to state 11
    EXTERN       shift, and go to state 12
    UNION        shift, and go to state 13
    CONST        shift, and go to state 14
    FLOAT        shift, and go to state 15
    SHORT        shift, and go to state 16
    UNSIGNED     shift, and go to state 17
    SIGNED       shift, and go to state 18
    VOID         shift, and go to state 19
    VOLATILE     shift, and go to state 20
    STATIC       shift, and go to state 21
    TYPEDEFname  shift, and go to state 25
    ELLIPSIS     shift, and go to state 527
    INLINE       shift, and go to state 26

    declaration.specifier          go to state 205
    basic.declaration.specifier    go to state 35
    sue.declaration.specifier      go to state 206
    typedef.declaration.specifier  go to state 37
    declaration.qualifier.list     go to state 207
    type.specifier                 go to state 208
    basic.type.specifier           go to state 40
    sue.type.specifier             go to state 209
    typedef.type.specifier         go to state 42
    type.qualifier.list            go to state 210
    elaborated.type.name           go to state 44
    parameter.declaration          go to state 528
    struct.or.union.specifier      go to state 51
    struct.or.union                go to state 52
    enum.specifier                 go to state 53
    type.qualifier                 go to state 57
    storage.class                  go to state 58
    basic.type.name                go to state 59


state 373

  308 parameter.list: parameter.declaration '=' . initializer

    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    '{'                shift, and go to state 529
    SIZEOF             shift, and go to state 223
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 227
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    primary.expression         go to state 236
    postfix.expression         go to state 237
    unary.expression           go to state 337
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 241
    additive.expression        go to state 242
    shift.expression           go to state 243
    relational.expression      go to state 244
    equality.expression        go to state 245
    AND.expression             go to state 246
    exclusive.OR.expression    go to state 247
    inclusive.OR.expression    go to state 248
    logical.AND.expression     go to state 249
    logical.OR.expression      go to state 250
    conditional.expression     go to state 338
    assignment.expression      go to state 530
    initializer                go to state 531
    constant                   go to state 253
    string.literal.list        go to state 254


state 374

   66 primary.expression: '(' expression . ')'
  149 expression: expression . ',' assignment.expression

    ')'  shift, and go to state 532
    ','  shift, and go to state 508


state 375

  279 type.name: type.specifier .
  280          | type.specifier . abstract.declarator

    '*'  shift, and go to state 533
    '('  shift, and go to state 534
    '['  shift, and go to state 134

    $default  reduce using rule 279 (type.name)

    abstract.declarator             go to state 535
    unary.abstract.declarator       go to state 356
    postfix.abstract.declarator     go to state 357
    postfixing.abstract.declarator  go to state 358
    array.abstract.declarator       go to state 136


state 376

  208 basic.type.specifier: type.qualifier.list . basic.type.name
  212 sue.type.specifier: type.qualifier.list . elaborated.type.name
  215 typedef.type.specifier: type.qualifier.list . TYPEDEFname
  218 type.qualifier.list: type.qualifier.list . type.qualifier
  281 type.name: type.qualifier.list .
  282          | type.qualifier.list . abstract.declarator

    '*'          shift, and go to state 533
    '('          shift, and go to state 534
    '['          shift, and go to state 134
    DOUBLE       shift, and go to state 4
    INT          shift, and go to state 5
    STRUCT       shift, and go to state 6
    LONG         shift, and go to state 7
    ENUM         shift, and go to state 8
    CHAR         shift, and go to state 11
    UNION        shift, and go to state 13
    CONST        shift, and go to state 14
    FLOAT        shift, and go to state 15
    SHORT        shift, and go to state 16
    UNSIGNED     shift, and go to state 17
    SIGNED       shift, and go to state 18
    VOID         shift, and go to state 19
    VOLATILE     shift, and go to state 20
    TYPEDEFname  shift, and go to state 124
    INLINE       shift, and go to state 26

    $default  reduce using rule 281 (type.name)

    elaborated.type.name            go to state 125
    abstract.declarator             go to state 536
    unary.abstract.declarator       go to state 356
    postfix.abstract.declarator     go to state 357
    postfixing.abstract.declarator  go to state 358
    array.abstract.declarator       go to state 136
    struct.or.union.specifier       go to state 51
    struct.or.union                 go to state 52
    enum.specifier                  go to state 53
    type.qualifier                  go to state 128
    basic.type.name                 go to state 130


state 377

  104 cast.expression: '(' type.name . ')' cast.expression

    ')'  shift, and go to state 537


state 378

   67 primary.expression: '(' lblock . statement.list rblock ')'
   68                   | '(' lblock . declaration.list statement.list rblock ')'

    error              shift, and go to state 321
    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    '{'                shift, and go to state 322
    AUTO               shift, and go to state 3
    DOUBLE             shift, and go to state 4
    INT                shift, and go to state 5
    STRUCT             shift, and go to state 6
    BREAK              shift, and go to state 324
    LONG               shift, and go to state 7
    SWITCH             shift, and go to state 325
    CASE               shift, and go to state 326
    ENUM               shift, and go to state 8
    REGISTER           shift, and go to state 9
    TYPEDEF            shift, and go to state 10
    CHAR               shift, and go to state 11
    EXTERN             shift, and go to state 12
    RETURN             shift, and go to state 327
    UNION              shift, and go to state 13
    CONST              shift, and go to state 14
    FLOAT              shift, and go to state 15
    SHORT              shift, and go to state 16
    UNSIGNED           shift, and go to state 17
    CONTINUE           shift, and go to state 328
    FOR                shift, and go to state 329
    SIGNED             shift, and go to state 18
    VOID               shift, and go to state 19
    DEFAULT            shift, and go to state 330
    GOTO               shift, and go to state 331
    SIZEOF             shift, and go to state 223
    VOLATILE           shift, and go to state 20
    DO                 shift, and go to state 332
    IF                 shift, and go to state 333
    STATIC             shift, and go to state 21
    WHILE              shift, and go to state 334
    STREAM             shift, and go to state 23
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 335
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    TYPEDEFname        shift, and go to state 336
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235
    INLINE             shift, and go to state 26

    ';'  reduce using rule 151 (expression.opt)

    stream.type.specifier          go to state 28
    primary.expression             go to state 236
    postfix.expression             go to state 237
    unary.expression               go to state 337
    unary.operator                 go to state 239
    cast.expression                go to state 240
    multiplicative.expression      go to state 241
    additive.expression            go to state 242
    shift.expression               go to state 243
    relational.expression          go to state 244
    equality.expression            go to state 245
    AND.expression                 go to state 246
    exclusive.OR.expression        go to state 247
    inclusive.OR.expression        go to state 248
    logical.AND.expression         go to state 249
    logical.OR.expression          go to state 250
    conditional.expression         go to state 338
    assignment.expression          go to state 339
    expression                     go to state 340
    expression.opt                 go to state 341
    declaration                    go to state 258
    declaring.list                 go to state 32
    default.declaring.list         go to state 33
    declaration.specifier          go to state 259
    basic.declaration.specifier    go to state 35
    sue.declaration.specifier      go to state 36
    typedef.declaration.specifier  go to state 37
    declaration.qualifier.list     go to state 260
    type.specifier                 go to state 261
    basic.type.specifier           go to state 40
    sue.type.specifier             go to state 41
    typedef.type.specifier         go to state 42
    type.qualifier.list            go to state 262
    elaborated.type.name           go to state 44
    struct.or.union.specifier      go to state 51
    struct.or.union                go to state 52
    enum.specifier                 go to state 53
    statement                      go to state 342
    labeled.statement              go to state 343
    compound.statement             go to state 344
    lblock                         go to state 345
    declaration.list               go to state 538
    statement.list                 go to state 539
    expression.statement           go to state 348
    selection.statement            go to state 349
    iteration.statement            go to state 350
    jump.statement                 go to state 351
    constant                       go to state 253
    string.literal.list            go to state 254
    type.qualifier                 go to state 57
    storage.class                  go to state 58
    basic.type.name                go to state 59


state 379

   66 primary.expression: '(' . expression ')'
   67                   | '(' . lblock statement.list rblock ')'
   68                   | '(' . lblock declaration.list statement.list rblock ')'
   96 unary.expression: SIZEOF '(' . type.name ')'

    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    '{'                shift, and go to state 322
    DOUBLE             shift, and go to state 4
    INT                shift, and go to state 5
    STRUCT             shift, and go to state 6
    LONG               shift, and go to state 7
    ENUM               shift, and go to state 8
    CHAR               shift, and go to state 11
    UNION              shift, and go to state 13
    CONST              shift, and go to state 14
    FLOAT              shift, and go to state 15
    SHORT              shift, and go to state 16
    UNSIGNED           shift, and go to state 17
    SIGNED             shift, and go to state 18
    VOID               shift, and go to state 19
    SIZEOF             shift, and go to state 223
    VOLATILE           shift, and go to state 20
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 227
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    TYPEDEFname        shift, and go to state 25
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235
    INLINE             shift, and go to state 26

    primary.expression         go to state 236
    postfix.expression         go to state 237
    unary.expression           go to state 337
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 241
    additive.expression        go to state 242
    shift.expression           go to state 243
    relational.expression      go to state 244
    equality.expression        go to state 245
    AND.expression             go to state 246
    exclusive.OR.expression    go to state 247
    inclusive.OR.expression    go to state 248
    logical.AND.expression     go to state 249
    logical.OR.expression      go to state 250
    conditional.expression     go to state 338
    assignment.expression      go to state 339
    expression                 go to state 374
    type.specifier             go to state 375
    basic.type.specifier       go to state 155
    sue.type.specifier         go to state 156
    typedef.type.specifier     go to state 157
    type.qualifier.list        go to state 376
    elaborated.type.name       go to state 44
    type.name                  go to state 540
    struct.or.union.specifier  go to state 51
    struct.or.union            go to state 52
    enum.specifier             go to state 53
    lblock                     go to state 378
    constant                   go to state 253
    string.literal.list        go to state 254
    type.qualifier             go to state 57
    basic.type.name            go to state 59


state 380

   95 unary.expression: SIZEOF unary.expression .

    $default  reduce using rule 95 (unary.expression)


state 381

   77 postfix.expression: SPLITJOIN '(' . IDENTIFIER ')' lblock split.statement splitjoinPipeline.statement.list join.statement rblock
   78                   | SPLITJOIN '(' . IDENTIFIER ')' lblock declaration.list split.statement splitjoinPipeline.statement.list join.statement rblock
   79                   | SPLITJOIN '(' . IDENTIFIER ')' lblock declaration.list statement.list split.statement splitjoinPipeline.statement.list join.statement rblock

    IDENTIFIER  shift, and go to state 541


state 382

   80 postfix.expression: PIPELINE '(' . IDENTIFIER ')' lblock splitjoinPipeline.statement.list rblock
   81                   | PIPELINE '(' . IDENTIFIER ')' lblock declaration.list splitjoinPipeline.statement.list rblock

    IDENTIFIER  shift, and go to state 542


state 383

   82 postfix.expression: FILEREADER '(' . ')' operator.arguments

    ')'  shift, and go to state 543


state 384

   66 primary.expression: '(' . expression ')'
   67                   | '(' . lblock statement.list rblock ')'
   68                   | '(' . lblock declaration.list statement.list rblock ')'

    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    '{'                shift, and go to state 322
    SIZEOF             shift, and go to state 223
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 227
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    primary.expression         go to state 236
    postfix.expression         go to state 237
    unary.expression           go to state 337
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 241
    additive.expression        go to state 242
    shift.expression           go to state 243
    relational.expression      go to state 244
    equality.expression        go to state 245
    AND.expression             go to state 246
    exclusive.OR.expression    go to state 247
    inclusive.OR.expression    go to state 248
    logical.AND.expression     go to state 249
    logical.OR.expression      go to state 250
    conditional.expression     go to state 338
    assignment.expression      go to state 339
    expression                 go to state 374
    lblock                     go to state 378
    constant                   go to state 253
    string.literal.list        go to state 254


state 385

   92 unary.expression: ICR unary.expression .

    $default  reduce using rule 92 (unary.expression)


state 386

   93 unary.expression: DECR unary.expression .

    $default  reduce using rule 93 (unary.expression)


state 387

   71 postfix.expression: postfix.expression '(' . ')'
   72                   | postfix.expression '(' . argument.expression.list ')'
   73                   | postfix.expression '(' . ')' operator.selfdefine.body
   74                   | postfix.expression '(' . argument.expression.list ')' operator.selfdefine.body
   75                   | postfix.expression '(' . ')' operator.arguments
   76                   | postfix.expression '(' . argument.expression.list ')' operator.arguments

    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    ')'                shift, and go to state 544
    SIZEOF             shift, and go to state 223
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 227
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    primary.expression         go to state 236
    postfix.expression         go to state 237
    argument.expression.list   go to state 545
    unary.expression           go to state 337
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 241
    additive.expression        go to state 242
    shift.expression           go to state 243
    relational.expression      go to state 244
    equality.expression        go to state 245
    AND.expression             go to state 246
    exclusive.OR.expression    go to state 247
    inclusive.OR.expression    go to state 248
    logical.AND.expression     go to state 249
    logical.OR.expression      go to state 250
    conditional.expression     go to state 338
    assignment.expression      go to state 546
    constant                   go to state 253
    string.literal.list        go to state 254


state 388

   83 postfix.expression: postfix.expression '.' . IDENTIFIER
   87                   | postfix.expression '.' . TYPEDEFname

    IDENTIFIER   shift, and go to state 547
    TYPEDEFname  shift, and go to state 548


state 389

   70 postfix.expression: postfix.expression '[' . expression ']'

    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    SIZEOF             shift, and go to state 223
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 227
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    primary.expression         go to state 236
    postfix.expression         go to state 237
    unary.expression           go to state 337
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 241
    additive.expression        go to state 242
    shift.expression           go to state 243
    relational.expression      go to state 244
    equality.expression        go to state 245
    AND.expression             go to state 246
    exclusive.OR.expression    go to state 247
    inclusive.OR.expression    go to state 248
    logical.AND.expression     go to state 249
    logical.OR.expression      go to state 250
    conditional.expression     go to state 338
    assignment.expression      go to state 339
    expression                 go to state 549
    constant                   go to state 253
    string.literal.list        go to state 254


state 390

   84 postfix.expression: postfix.expression ARROW . IDENTIFIER
   88                   | postfix.expression ARROW . TYPEDEFname

    IDENTIFIER   shift, and go to state 550
    TYPEDEFname  shift, and go to state 551


state 391

   85 postfix.expression: postfix.expression ICR .

    $default  reduce using rule 85 (postfix.expression)


state 392

   86 postfix.expression: postfix.expression DECR .

    $default  reduce using rule 86 (postfix.expression)


state 393

   94 unary.expression: unary.operator cast.expression .

    $default  reduce using rule 94 (unary.expression)


state 394

  106 multiplicative.expression: multiplicative.expression '*' . cast.expression

    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    SIZEOF             shift, and go to state 223
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 227
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    primary.expression   go to state 236
    postfix.expression   go to state 237
    unary.expression     go to state 238
    unary.operator       go to state 239
    cast.expression      go to state 552
    constant             go to state 253
    string.literal.list  go to state 254


state 395

  108 multiplicative.expression: multiplicative.expression '%' . cast.expression

    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    SIZEOF             shift, and go to state 223
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 227
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    primary.expression   go to state 236
    postfix.expression   go to state 237
    unary.expression     go to state 238
    unary.operator       go to state 239
    cast.expression      go to state 553
    constant             go to state 253
    string.literal.list  go to state 254


state 396

  107 multiplicative.expression: multiplicative.expression '/' . cast.expression

    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    SIZEOF             shift, and go to state 223
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 227
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    primary.expression   go to state 236
    postfix.expression   go to state 237
    unary.expression     go to state 238
    unary.operator       go to state 239
    cast.expression      go to state 554
    constant             go to state 253
    string.literal.list  go to state 254


state 397

  110 additive.expression: additive.expression '+' . multiplicative.expression

    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    SIZEOF             shift, and go to state 223
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 227
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    primary.expression         go to state 236
    postfix.expression         go to state 237
    unary.expression           go to state 238
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 555
    constant                   go to state 253
    string.literal.list        go to state 254


state 398

  111 additive.expression: additive.expression '-' . multiplicative.expression

    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    SIZEOF             shift, and go to state 223
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 227
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    primary.expression         go to state 236
    postfix.expression         go to state 237
    unary.expression           go to state 238
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 556
    constant                   go to state 253
    string.literal.list        go to state 254


state 399

  113 shift.expression: shift.expression LS . additive.expression

    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    SIZEOF             shift, and go to state 223
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 227
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    primary.expression         go to state 236
    postfix.expression         go to state 237
    unary.expression           go to state 238
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 241
    additive.expression        go to state 557
    constant                   go to state 253
    string.literal.list        go to state 254


state 400

  114 shift.expression: shift.expression RS . additive.expression

    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    SIZEOF             shift, and go to state 223
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 227
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    primary.expression         go to state 236
    postfix.expression         go to state 237
    unary.expression           go to state 238
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 241
    additive.expression        go to state 558
    constant                   go to state 253
    string.literal.list        go to state 254


state 401

  116 relational.expression: relational.expression '<' . shift.expression

    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    SIZEOF             shift, and go to state 223
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 227
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    primary.expression         go to state 236
    postfix.expression         go to state 237
    unary.expression           go to state 238
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 241
    additive.expression        go to state 242
    shift.expression           go to state 559
    constant                   go to state 253
    string.literal.list        go to state 254


state 402

  117 relational.expression: relational.expression '>' . shift.expression

    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    SIZEOF             shift, and go to state 223
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 227
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    primary.expression         go to state 236
    postfix.expression         go to state 237
    unary.expression           go to state 238
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 241
    additive.expression        go to state 242
    shift.expression           go to state 560
    constant                   go to state 253
    string.literal.list        go to state 254


state 403

  118 relational.expression: relational.expression LE . shift.expression

    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    SIZEOF             shift, and go to state 223
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 227
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    primary.expression         go to state 236
    postfix.expression         go to state 237
    unary.expression           go to state 238
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 241
    additive.expression        go to state 242
    shift.expression           go to state 561
    constant                   go to state 253
    string.literal.list        go to state 254


state 404

  119 relational.expression: relational.expression GE . shift.expression

    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    SIZEOF             shift, and go to state 223
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 227
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    primary.expression         go to state 236
    postfix.expression         go to state 237
    unary.expression           go to state 238
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 241
    additive.expression        go to state 242
    shift.expression           go to state 562
    constant                   go to state 253
    string.literal.list        go to state 254


state 405

  121 equality.expression: equality.expression EQ . relational.expression

    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    SIZEOF             shift, and go to state 223
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 227
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    primary.expression         go to state 236
    postfix.expression         go to state 237
    unary.expression           go to state 238
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 241
    additive.expression        go to state 242
    shift.expression           go to state 243
    relational.expression      go to state 563
    constant                   go to state 253
    string.literal.list        go to state 254


state 406

  122 equality.expression: equality.expression NE . relational.expression

    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    SIZEOF             shift, and go to state 223
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 227
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    primary.expression         go to state 236
    postfix.expression         go to state 237
    unary.expression           go to state 238
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 241
    additive.expression        go to state 242
    shift.expression           go to state 243
    relational.expression      go to state 564
    constant                   go to state 253
    string.literal.list        go to state 254


state 407

  124 AND.expression: AND.expression '&' . equality.expression

    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    SIZEOF             shift, and go to state 223
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 227
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    primary.expression         go to state 236
    postfix.expression         go to state 237
    unary.expression           go to state 238
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 241
    additive.expression        go to state 242
    shift.expression           go to state 243
    relational.expression      go to state 244
    equality.expression        go to state 565
    constant                   go to state 253
    string.literal.list        go to state 254


state 408

  126 exclusive.OR.expression: exclusive.OR.expression '^' . AND.expression

    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    SIZEOF             shift, and go to state 223
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 227
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    primary.expression         go to state 236
    postfix.expression         go to state 237
    unary.expression           go to state 238
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 241
    additive.expression        go to state 242
    shift.expression           go to state 243
    relational.expression      go to state 244
    equality.expression        go to state 245
    AND.expression             go to state 566
    constant                   go to state 253
    string.literal.list        go to state 254


state 409

  128 inclusive.OR.expression: inclusive.OR.expression '|' . exclusive.OR.expression

    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    SIZEOF             shift, and go to state 223
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 227
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    primary.expression         go to state 236
    postfix.expression         go to state 237
    unary.expression           go to state 238
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 241
    additive.expression        go to state 242
    shift.expression           go to state 243
    relational.expression      go to state 244
    equality.expression        go to state 245
    AND.expression             go to state 246
    exclusive.OR.expression    go to state 567
    constant                   go to state 253
    string.literal.list        go to state 254


state 410

  130 logical.AND.expression: logical.AND.expression ANDAND . inclusive.OR.expression

    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    SIZEOF             shift, and go to state 223
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 227
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    primary.expression         go to state 236
    postfix.expression         go to state 237
    unary.expression           go to state 238
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 241
    additive.expression        go to state 242
    shift.expression           go to state 243
    relational.expression      go to state 244
    equality.expression        go to state 245
    AND.expression             go to state 246
    exclusive.OR.expression    go to state 247
    inclusive.OR.expression    go to state 568
    constant                   go to state 253
    string.literal.list        go to state 254


state 411

  134 conditional.expression: logical.OR.expression '?' . expression ':' conditional.expression

    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    SIZEOF             shift, and go to state 223
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 227
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    primary.expression         go to state 236
    postfix.expression         go to state 237
    unary.expression           go to state 337
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 241
    additive.expression        go to state 242
    shift.expression           go to state 243
    relational.expression      go to state 244
    equality.expression        go to state 245
    AND.expression             go to state 246
    exclusive.OR.expression    go to state 247
    inclusive.OR.expression    go to state 248
    logical.AND.expression     go to state 249
    logical.OR.expression      go to state 250
    conditional.expression     go to state 338
    assignment.expression      go to state 339
    expression                 go to state 569
    constant                   go to state 253
    string.literal.list        go to state 254


state 412

  132 logical.OR.expression: logical.OR.expression OROR . logical.AND.expression

    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    SIZEOF             shift, and go to state 223
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 227
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    primary.expression         go to state 236
    postfix.expression         go to state 237
    unary.expression           go to state 238
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 241
    additive.expression        go to state 242
    shift.expression           go to state 243
    relational.expression      go to state 244
    equality.expression        go to state 245
    AND.expression             go to state 246
    exclusive.OR.expression    go to state 247
    inclusive.OR.expression    go to state 248
    logical.AND.expression     go to state 570
    constant                   go to state 253
    string.literal.list        go to state 254


state 413

  325 array.abstract.declarator: '[' constant.expression ']' .

    $default  reduce using rule 325 (array.abstract.declarator)


state 414

  455 string.literal.list: string.literal.list STRINGliteral .

    $default  reduce using rule 455 (string.literal.list)


state 415

  327 array.abstract.declarator: array.abstract.declarator '[' ']' .

    $default  reduce using rule 327 (array.abstract.declarator)


state 416

  326 array.abstract.declarator: array.abstract.declarator '[' constant.expression . ']'

    ']'  shift, and go to state 571


state 417

  438 function.definition: old.function.declarator old.function.declaration.list $@37 compound.statement.no.new.scope .

    $default  reduce using rule 438 (function.definition)


state 418

  173 default.declaring.list: declaration.qualifier.list identifier.declarator . $@10 attributes.opt $@11 initializer.opt

    $default  reduce using rule 171 ($@10)

    $@10  go to state 186


state 419

  177 default.declaring.list: type.qualifier.list identifier.declarator . $@12 attributes.opt $@13 initializer.opt

    $default  reduce using rule 175 ($@12)

    $@12  go to state 196


state 420

  384 declaration.list: declaration.list declaration .

    $default  reduce using rule 384 (declaration.list)


state 421

  349 bit.field.size: ':' . constant.expression

    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    SIZEOF             shift, and go to state 223
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 227
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    primary.expression         go to state 236
    postfix.expression         go to state 237
    unary.expression           go to state 238
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 241
    additive.expression        go to state 242
    shift.expression           go to state 243
    relational.expression      go to state 244
    equality.expression        go to state 245
    AND.expression             go to state 246
    exclusive.OR.expression    go to state 247
    inclusive.OR.expression    go to state 248
    logical.AND.expression     go to state 249
    logical.OR.expression      go to state 250
    conditional.expression     go to state 251
    constant.expression        go to state 572
    constant                   go to state 253
    string.literal.list        go to state 254


state 422

  343 struct.declarator: declarator . bit.field.size.opt attributes.opt

    ':'  shift, and go to state 421

    $default  reduce using rule 347 (bit.field.size.opt)

    bit.field.size.opt  go to state 573
    bit.field.size      go to state 574


state 423

  341 struct.declaring.list: type.specifier struct.declarator .

    $default  reduce using rule 341 (struct.declaring.list)


state 424

  344 struct.declarator: bit.field.size . attributes.opt

    ATTRIBUTE  shift, and go to state 290

    $default  reduce using rule 283 (attributes.opt)

    attributes.opt  go to state 575
    attributes      go to state 292
    attribute       go to state 293


state 425

  345 struct.identifier.declarator: identifier.declarator . bit.field.size.opt attributes.opt

    ':'  shift, and go to state 421

    $default  reduce using rule 347 (bit.field.size.opt)

    bit.field.size.opt  go to state 576
    bit.field.size      go to state 574


state 426

  339 struct.default.declaring.list: type.qualifier.list struct.identifier.declarator .

    $default  reduce using rule 339 (struct.default.declaring.list)


state 427

  346 struct.identifier.declarator: bit.field.size . attributes.opt

    ATTRIBUTE  shift, and go to state 290

    $default  reduce using rule 283 (attributes.opt)

    attributes.opt  go to state 577
    attributes      go to state 292
    attribute       go to state 293


state 428

  328 struct.or.union.specifier: struct.or.union '{' struct.declaration.list '}' .

    $default  reduce using rule 328 (struct.or.union.specifier)


state 429

  336 struct.declaration.list: struct.declaration.list struct.declaration .

    $default  reduce using rule 336 (struct.declaration.list)


state 430

  338 struct.declaration: struct.default.declaring.list ';' .

    $default  reduce using rule 338 (struct.declaration)


state 431

  340 struct.default.declaring.list: struct.default.declaring.list ',' . struct.identifier.declarator

    '*'         shift, and go to state 76
    '('         shift, and go to state 77
    ':'         shift, and go to state 421
    IDENTIFIER  shift, and go to state 24

    identifier.declarator          go to state 425
    unary.identifier.declarator    go to state 46
    postfix.identifier.declarator  go to state 47
    paren.identifier.declarator    go to state 79
    struct.identifier.declarator   go to state 578
    bit.field.size                 go to state 427


state 432

  337 struct.declaration: struct.declaring.list ';' .

    $default  reduce using rule 337 (struct.declaration)


state 433

  342 struct.declaring.list: struct.declaring.list ',' . struct.declarator

    '*'          shift, and go to state 86
    '('          shift, and go to state 87
    ':'          shift, and go to state 421
    IDENTIFIER   shift, and go to state 24
    TYPEDEFname  shift, and go to state 88

    declarator                        go to state 422
    paren.typedef.declarator          go to state 90
    paren.postfix.typedef.declarator  go to state 91
    parameter.typedef.declarator      go to state 92
    clean.typedef.declarator          go to state 93
    clean.postfix.typedef.declarator  go to state 94
    identifier.declarator             go to state 166
    unary.identifier.declarator       go to state 46
    postfix.identifier.declarator     go to state 47
    paren.identifier.declarator       go to state 48
    old.function.declarator           go to state 167
    postfix.old.function.declarator   go to state 50
    struct.declarator                 go to state 579
    bit.field.size                    go to state 424


state 434

  332 struct.or.union.specifier: struct.or.union identifier.or.typedef.name '{' '}' .

    $default  reduce using rule 332 (struct.or.union.specifier)


state 435

  329 struct.or.union.specifier: struct.or.union identifier.or.typedef.name '{' struct.declaration.list . '}'
  336 struct.declaration.list: struct.declaration.list . struct.declaration

    '}'          shift, and go to state 580
    DOUBLE       shift, and go to state 4
    INT          shift, and go to state 5
    STRUCT       shift, and go to state 6
    LONG         shift, and go to state 7
    ENUM         shift, and go to state 8
    CHAR         shift, and go to state 11
    UNION        shift, and go to state 13
    CONST        shift, and go to state 14
    FLOAT        shift, and go to state 15
    SHORT        shift, and go to state 16
    UNSIGNED     shift, and go to state 17
    SIGNED       shift, and go to state 18
    VOID         shift, and go to state 19
    VOLATILE     shift, and go to state 20
    TYPEDEFname  shift, and go to state 25
    INLINE       shift, and go to state 26

    type.specifier                 go to state 265
    basic.type.specifier           go to state 155
    sue.type.specifier             go to state 156
    typedef.type.specifier         go to state 157
    type.qualifier.list            go to state 266
    elaborated.type.name           go to state 44
    struct.or.union.specifier      go to state 51
    struct.or.union                go to state 52
    struct.declaration             go to state 429
    struct.default.declaring.list  go to state 269
    struct.declaring.list          go to state 270
    enum.specifier                 go to state 53
    type.qualifier                 go to state 57
    basic.type.name                go to state 59


state 436

  356 enumerator.value.opt: '=' constant.expression .

    $default  reduce using rule 356 (enumerator.value.opt)


state 437

  354 enumerator.list: enumerator.list ',' identifier.or.typedef.name . enumerator.value.opt

    '='  shift, and go to state 274

    $default  reduce using rule 355 (enumerator.value.opt)

    enumerator.value.opt  go to state 581


state 438

  350 enum.specifier: ENUM '{' enumerator.list comma.opt '}' .

    $default  reduce using rule 350 (enum.specifier)


state 439

  351 enum.specifier: ENUM identifier.or.typedef.name '{' enumerator.list comma.opt . '}'

    '}'  shift, and go to state 582


state 440

   17 composite.head.inout.member: stream.type.specifier . IDENTIFIER

    IDENTIFIER  shift, and go to state 583


state 441

   11 composite.head.inout: INPUT composite.head.inout.member.list . ',' OUTPUT composite.head.inout.member.list
   12                     | INPUT composite.head.inout.member.list .
   16 composite.head.inout.member.list: composite.head.inout.member.list . ',' composite.head.inout.member

    ','  shift, and go to state 584

    $default  reduce using rule 12 (composite.head.inout)


state 442

   15 composite.head.inout.member.list: composite.head.inout.member .

    $default  reduce using rule 15 (composite.head.inout.member.list)


state 443

   13 composite.head.inout: OUTPUT composite.head.inout.member.list .
   14                     | OUTPUT composite.head.inout.member.list . ',' INPUT composite.head.inout.member.list
   16 composite.head.inout.member.list: composite.head.inout.member.list . ',' composite.head.inout.member

    ','  shift, and go to state 585

    $default  reduce using rule 13 (composite.head.inout)


state 444

    9 composite.head: COMPOSITE IDENTIFIER '(' composite.head.inout ')' .

    $default  reduce using rule 9 (composite.head)


state 445

    5 stream.declaration.list: stream.declaration.list ',' type.specifier . paren.identifier.declarator
    6                        | stream.declaration.list ',' type.specifier . paren.identifier.declarator postfixing.abstract.declarator

    '('         shift, and go to state 284
    IDENTIFIER  shift, and go to state 24

    paren.identifier.declarator  go to state 586


state 446

  268 paren.identifier.declarator: '(' paren.identifier.declarator . ')'

    ')'  shift, and go to state 147


state 447

    4 stream.declaration.list: type.specifier paren.identifier.declarator postfixing.abstract.declarator .

    $default  reduce using rule 4 (stream.declaration.list)


state 448

   21 composite.body.param.opt: PARAM parameter.list . ';'
  307 parameter.list: parameter.list . ',' parameter.declaration
  309               | parameter.list . ',' error

    ';'  shift, and go to state 587
    ','  shift, and go to state 588


state 449

   27 operator.add: ADD . operator.default.call
   28             | ADD . operator.pipeline
   29             | ADD . operator.splitjoin

    SPLITJOIN   shift, and go to state 589
    PIPELINE    shift, and go to state 590
    IDENTIFIER  shift, and go to state 591

    operator.pipeline      go to state 592
    operator.splitjoin     go to state 593
    operator.default.call  go to state 594


state 450

   26 operator.file.writer: FILEWRITER . '(' IDENTIFIER ')' operator.arguments ';'

    '('  shift, and go to state 595


state 451

   18 composite.body.no.new.scope: '{' composite.body.param.opt composite.body.statement.list . '}'
   23 composite.body.statement.list: composite.body.statement.list . costream.composite.statement

    error              shift, and go to state 321
    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    '{'                shift, and go to state 322
    '}'                shift, and go to state 596
    BREAK              shift, and go to state 324
    SWITCH             shift, and go to state 325
    CASE               shift, and go to state 326
    RETURN             shift, and go to state 327
    CONTINUE           shift, and go to state 328
    FOR                shift, and go to state 329
    DEFAULT            shift, and go to state 330
    GOTO               shift, and go to state 331
    SIZEOF             shift, and go to state 223
    DO                 shift, and go to state 332
    IF                 shift, and go to state 333
    WHILE              shift, and go to state 334
    ADD                shift, and go to state 449
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    FILEWRITER         shift, and go to state 450
    IDENTIFIER         shift, and go to state 335
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    TYPEDEFname        shift, and go to state 517
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    ';'  reduce using rule 151 (expression.opt)

    composite.body.operator       go to state 452
    operator.file.writer          go to state 453
    operator.add                  go to state 454
    primary.expression            go to state 236
    postfix.expression            go to state 237
    unary.expression              go to state 337
    unary.operator                go to state 239
    cast.expression               go to state 240
    multiplicative.expression     go to state 241
    additive.expression           go to state 242
    shift.expression              go to state 243
    relational.expression         go to state 244
    equality.expression           go to state 245
    AND.expression                go to state 246
    exclusive.OR.expression       go to state 247
    inclusive.OR.expression       go to state 248
    logical.AND.expression        go to state 249
    logical.OR.expression         go to state 250
    conditional.expression        go to state 338
    assignment.expression         go to state 339
    expression                    go to state 340
    expression.opt                go to state 341
    costream.composite.statement  go to state 597
    statement                     go to state 456
    labeled.statement             go to state 343
    compound.statement            go to state 344
    lblock                        go to state 345
    expression.statement          go to state 348
    selection.statement           go to state 349
    iteration.statement           go to state 350
    jump.statement                go to state 351
    constant                      go to state 253
    string.literal.list           go to state 254


state 452

  359 costream.composite.statement: composite.body.operator .

    $default  reduce using rule 359 (costream.composite.statement)


state 453

   25 composite.body.operator: operator.file.writer .

    $default  reduce using rule 25 (composite.body.operator)


state 454

   24 composite.body.operator: operator.add .

    $default  reduce using rule 24 (composite.body.operator)


state 455

   22 composite.body.statement.list: costream.composite.statement .

    $default  reduce using rule 22 (composite.body.statement.list)


state 456

  360 costream.composite.statement: statement .

    $default  reduce using rule 360 (costream.composite.statement)


state 457

   19 composite.body.no.new.scope: '{' composite.body.param.opt declaration.list . composite.body.statement.list '}'
  384 declaration.list: declaration.list . declaration

    error              shift, and go to state 321
    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    '{'                shift, and go to state 322
    AUTO               shift, and go to state 3
    DOUBLE             shift, and go to state 4
    INT                shift, and go to state 5
    STRUCT             shift, and go to state 6
    BREAK              shift, and go to state 324
    LONG               shift, and go to state 7
    SWITCH             shift, and go to state 325
    CASE               shift, and go to state 326
    ENUM               shift, and go to state 8
    REGISTER           shift, and go to state 9
    TYPEDEF            shift, and go to state 10
    CHAR               shift, and go to state 11
    EXTERN             shift, and go to state 12
    RETURN             shift, and go to state 327
    UNION              shift, and go to state 13
    CONST              shift, and go to state 14
    FLOAT              shift, and go to state 15
    SHORT              shift, and go to state 16
    UNSIGNED           shift, and go to state 17
    CONTINUE           shift, and go to state 328
    FOR                shift, and go to state 329
    SIGNED             shift, and go to state 18
    VOID               shift, and go to state 19
    DEFAULT            shift, and go to state 330
    GOTO               shift, and go to state 331
    SIZEOF             shift, and go to state 223
    VOLATILE           shift, and go to state 20
    DO                 shift, and go to state 332
    IF                 shift, and go to state 333
    STATIC             shift, and go to state 21
    WHILE              shift, and go to state 334
    STREAM             shift, and go to state 23
    ADD                shift, and go to state 449
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    FILEWRITER         shift, and go to state 450
    IDENTIFIER         shift, and go to state 335
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    TYPEDEFname        shift, and go to state 336
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235
    INLINE             shift, and go to state 26

    ';'  reduce using rule 151 (expression.opt)

    stream.type.specifier          go to state 28
    composite.body.statement.list  go to state 598
    composite.body.operator        go to state 452
    operator.file.writer           go to state 453
    operator.add                   go to state 454
    primary.expression             go to state 236
    postfix.expression             go to state 237
    unary.expression               go to state 337
    unary.operator                 go to state 239
    cast.expression                go to state 240
    multiplicative.expression      go to state 241
    additive.expression            go to state 242
    shift.expression               go to state 243
    relational.expression          go to state 244
    equality.expression            go to state 245
    AND.expression                 go to state 246
    exclusive.OR.expression        go to state 247
    inclusive.OR.expression        go to state 248
    logical.AND.expression         go to state 249
    logical.OR.expression          go to state 250
    conditional.expression         go to state 338
    assignment.expression          go to state 339
    expression                     go to state 340
    expression.opt                 go to state 341
    declaration                    go to state 420
    declaring.list                 go to state 32
    default.declaring.list         go to state 33
    declaration.specifier          go to state 259
    basic.declaration.specifier    go to state 35
    sue.declaration.specifier      go to state 36
    typedef.declaration.specifier  go to state 37
    declaration.qualifier.list     go to state 260
    type.specifier                 go to state 261
    basic.type.specifier           go to state 40
    sue.type.specifier             go to state 41
    typedef.type.specifier         go to state 42
    type.qualifier.list            go to state 262
    elaborated.type.name           go to state 44
    struct.or.union.specifier      go to state 51
    struct.or.union                go to state 52
    enum.specifier                 go to state 53
    costream.composite.statement   go to state 455
    statement                      go to state 456
    labeled.statement              go to state 343
    compound.statement             go to state 344
    lblock                         go to state 345
    expression.statement           go to state 348
    selection.statement            go to state 349
    iteration.statement            go to state 350
    jump.statement                 go to state 351
    constant                       go to state 253
    string.literal.list            go to state 254
    type.qualifier                 go to state 57
    storage.class                  go to state 58
    basic.type.name                go to state 59


state 458

  165 declaring.list: declaring.list ',' declarator @6 attributes.opt . $@7 initializer.opt

    $default  reduce using rule 164 ($@7)

    $@7  go to state 599


state 459

  180 default.declaring.list: default.declaring.list ',' identifier.declarator @14 attributes.opt . $@15 initializer.opt

    $default  reduce using rule 179 ($@15)

    $@15  go to state 600


state 460

  287 attribute: ATTRIBUTE '(' . '(' attribute.list ')' ')'

    '('  shift, and go to state 601


state 461

  297 initializer.opt: '=' . initializer

    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    '{'                shift, and go to state 529
    SIZEOF             shift, and go to state 223
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 227
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    primary.expression         go to state 236
    postfix.expression         go to state 237
    unary.expression           go to state 337
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 241
    additive.expression        go to state 242
    shift.expression           go to state 243
    relational.expression      go to state 244
    equality.expression        go to state 245
    AND.expression             go to state 246
    exclusive.OR.expression    go to state 247
    inclusive.OR.expression    go to state 248
    logical.AND.expression     go to state 249
    logical.OR.expression      go to state 250
    conditional.expression     go to state 338
    assignment.expression      go to state 530
    initializer                go to state 602
    constant                   go to state 253
    string.literal.list        go to state 254


state 462

  167 declaring.list: declaration.specifier error $@8 attributes.opt initializer.opt .

    $default  reduce using rule 167 (declaring.list)


state 463

  286 attributes: attributes attribute .

    $default  reduce using rule 286 (attributes)


state 464

  229 paren.typedef.declarator: '*' '(' simple.paren.typedef.declarator ')' .

    $default  reduce using rule 229 (paren.typedef.declarator)


state 465

  230 paren.typedef.declarator: '*' pointer.type.qualifier.list '(' simple.paren.typedef.declarator . ')'
  233 paren.postfix.typedef.declarator: '(' simple.paren.typedef.declarator . postfixing.abstract.declarator ')'

    '('  shift, and go to state 161
    ')'  shift, and go to state 603
    '['  shift, and go to state 134

    postfixing.abstract.declarator  go to state 300
    array.abstract.declarator       go to state 136


state 466

  236 simple.paren.typedef.declarator: '(' simple.paren.typedef.declarator ')' .

    $default  reduce using rule 236 (simple.paren.typedef.declarator)


state 467

  234 paren.postfix.typedef.declarator: '(' paren.typedef.declarator ')' postfixing.abstract.declarator .

    $default  reduce using rule 234 (paren.postfix.typedef.declarator)


state 468

  233 paren.postfix.typedef.declarator: '(' simple.paren.typedef.declarator postfixing.abstract.declarator ')' .

    $default  reduce using rule 233 (paren.postfix.typedef.declarator)


state 469

  244 clean.postfix.typedef.declarator: '(' clean.typedef.declarator ')' postfixing.abstract.declarator .

    $default  reduce using rule 244 (clean.postfix.typedef.declarator)


state 470

  159 declaring.list: declaration.specifier declarator $@2 attributes.opt $@3 . initializer.opt

    '='  shift, and go to state 461

    $default  reduce using rule 296 (initializer.opt)

    initializer.opt  go to state 604


state 471

  440 function.definition: declaration.specifier old.function.declarator old.function.declaration.list $@38 compound.statement.no.new.scope .

    $default  reduce using rule 440 (function.definition)


state 472

  182 default.declaring.list: declaration.qualifier.list error $@16 attributes.opt initializer.opt .

    $default  reduce using rule 182 (default.declaring.list)


state 473

  173 default.declaring.list: declaration.qualifier.list identifier.declarator $@10 attributes.opt $@11 . initializer.opt

    '='  shift, and go to state 461

    $default  reduce using rule 296 (initializer.opt)

    initializer.opt  go to state 605


state 474

  444 function.definition: declaration.qualifier.list old.function.declarator old.function.declaration.list $@40 compound.statement.no.new.scope .

    $default  reduce using rule 444 (function.definition)


state 475

  169 declaring.list: type.specifier error $@9 attributes.opt initializer.opt .

    $default  reduce using rule 169 (declaring.list)


state 476

  162 declaring.list: type.specifier declarator $@4 attributes.opt $@5 . initializer.opt

    '='  shift, and go to state 461

    $default  reduce using rule 296 (initializer.opt)

    initializer.opt  go to state 606


state 477

  442 function.definition: type.specifier old.function.declarator old.function.declaration.list $@39 compound.statement.no.new.scope .

    $default  reduce using rule 442 (function.definition)


state 478

  184 default.declaring.list: type.qualifier.list error $@17 attributes.opt initializer.opt .

    $default  reduce using rule 184 (default.declaring.list)


state 479

  177 default.declaring.list: type.qualifier.list identifier.declarator $@12 attributes.opt $@13 . initializer.opt

    '='  shift, and go to state 461

    $default  reduce using rule 296 (initializer.opt)

    initializer.opt  go to state 607


state 480

  446 function.definition: type.qualifier.list old.function.declarator old.function.declaration.list $@41 compound.statement.no.new.scope .

    $default  reduce using rule 446 (function.definition)


state 481

  367 statement: error ';' .

    $default  reduce using rule 367 (statement)


state 482

  408 jump.statement: BREAK ';' .

    $default  reduce using rule 408 (jump.statement)


state 483

  391 selection.statement: SWITCH $@19 . '(' expression ')' statement

    '('  shift, and go to state 608


state 484

  370 labeled.statement: CASE constant.expression . ':' statement

    ':'  shift, and go to state 609


state 485

  409 jump.statement: RETURN expression.opt . ';'

    ';'  shift, and go to state 610


state 486

  407 jump.statement: CONTINUE ';' .

    $default  reduce using rule 407 (jump.statement)


state 487

  397 iteration.statement: FOR '(' . expression.opt ';' expression.opt ';' expression.opt ')' $@22 costream.composite.statement
  399                    | FOR '(' . error ';' expression.opt ';' expression.opt ')' $@23 costream.composite.statement
  401                    | FOR '(' . expression.opt ';' expression.opt ';' error ')' $@24 costream.composite.statement
  403                    | FOR '(' . expression.opt ';' error ';' expression.opt ')' $@25 costream.composite.statement
  405                    | FOR '(' . error ')' $@26 costream.composite.statement

    error              shift, and go to state 611
    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    SIZEOF             shift, and go to state 223
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 227
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    ';'  reduce using rule 151 (expression.opt)

    primary.expression         go to state 236
    postfix.expression         go to state 237
    unary.expression           go to state 337
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 241
    additive.expression        go to state 242
    shift.expression           go to state 243
    relational.expression      go to state 244
    equality.expression        go to state 245
    AND.expression             go to state 246
    exclusive.OR.expression    go to state 247
    inclusive.OR.expression    go to state 248
    logical.AND.expression     go to state 249
    logical.OR.expression      go to state 250
    conditional.expression     go to state 338
    assignment.expression      go to state 339
    expression                 go to state 340
    expression.opt             go to state 612
    constant                   go to state 253
    string.literal.list        go to state 254


state 488

  371 labeled.statement: DEFAULT ':' . statement

    error              shift, and go to state 321
    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    '{'                shift, and go to state 322
    BREAK              shift, and go to state 324
    SWITCH             shift, and go to state 325
    CASE               shift, and go to state 326
    RETURN             shift, and go to state 327
    CONTINUE           shift, and go to state 328
    FOR                shift, and go to state 329
    DEFAULT            shift, and go to state 330
    GOTO               shift, and go to state 331
    SIZEOF             shift, and go to state 223
    DO                 shift, and go to state 332
    IF                 shift, and go to state 333
    WHILE              shift, and go to state 334
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 335
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    TYPEDEFname        shift, and go to state 517
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    ';'  reduce using rule 151 (expression.opt)

    primary.expression         go to state 236
    postfix.expression         go to state 237
    unary.expression           go to state 337
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 241
    additive.expression        go to state 242
    shift.expression           go to state 243
    relational.expression      go to state 244
    equality.expression        go to state 245
    AND.expression             go to state 246
    exclusive.OR.expression    go to state 247
    inclusive.OR.expression    go to state 248
    logical.AND.expression     go to state 249
    logical.OR.expression      go to state 250
    conditional.expression     go to state 338
    assignment.expression      go to state 339
    expression                 go to state 340
    expression.opt             go to state 341
    statement                  go to state 613
    labeled.statement          go to state 343
    compound.statement         go to state 344
    lblock                     go to state 345
    expression.statement       go to state 348
    selection.statement        go to state 349
    iteration.statement        go to state 350
    jump.statement             go to state 351
    constant                   go to state 253
    string.literal.list        go to state 254


state 489

  406 jump.statement: GOTO IDENTIFIER . ';'

    ';'  shift, and go to state 614


state 490

  410 jump.statement: GOTO TYPEDEFname . ';'

    ';'  shift, and go to state 615


state 491

  395 iteration.statement: DO $@21 . statement WHILE '(' expression ')' ';'

    error              shift, and go to state 321
    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    '{'                shift, and go to state 322
    BREAK              shift, and go to state 324
    SWITCH             shift, and go to state 325
    CASE               shift, and go to state 326
    RETURN             shift, and go to state 327
    CONTINUE           shift, and go to state 328
    FOR                shift, and go to state 329
    DEFAULT            shift, and go to state 330
    GOTO               shift, and go to state 331
    SIZEOF             shift, and go to state 223
    DO                 shift, and go to state 332
    IF                 shift, and go to state 333
    WHILE              shift, and go to state 334
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 335
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    TYPEDEFname        shift, and go to state 517
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    ';'  reduce using rule 151 (expression.opt)

    primary.expression         go to state 236
    postfix.expression         go to state 237
    unary.expression           go to state 337
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 241
    additive.expression        go to state 242
    shift.expression           go to state 243
    relational.expression      go to state 244
    equality.expression        go to state 245
    AND.expression             go to state 246
    exclusive.OR.expression    go to state 247
    inclusive.OR.expression    go to state 248
    logical.AND.expression     go to state 249
    logical.OR.expression      go to state 250
    conditional.expression     go to state 338
    assignment.expression      go to state 339
    expression                 go to state 340
    expression.opt             go to state 341
    statement                  go to state 616
    labeled.statement          go to state 343
    compound.statement         go to state 344
    lblock                     go to state 345
    expression.statement       go to state 348
    selection.statement        go to state 349
    iteration.statement        go to state 350
    jump.statement             go to state 351
    constant                   go to state 253
    string.literal.list        go to state 254


state 492

  388 selection.statement: IF '(' . expression ')' costream.composite.statement
  389                    | IF '(' . expression ')' costream.composite.statement ELSE costream.composite.statement

    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    SIZEOF             shift, and go to state 223
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 227
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    primary.expression         go to state 236
    postfix.expression         go to state 237
    unary.expression           go to state 337
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 241
    additive.expression        go to state 242
    shift.expression           go to state 243
    relational.expression      go to state 244
    equality.expression        go to state 245
    AND.expression             go to state 246
    exclusive.OR.expression    go to state 247
    inclusive.OR.expression    go to state 248
    logical.AND.expression     go to state 249
    logical.OR.expression      go to state 250
    conditional.expression     go to state 338
    assignment.expression      go to state 339
    expression                 go to state 617
    constant                   go to state 253
    string.literal.list        go to state 254


state 493

  393 iteration.statement: WHILE $@20 . '(' expression ')' statement

    '('  shift, and go to state 618


state 494

  369 labeled.statement: IDENTIFIER ':' . @18 statement

    $default  reduce using rule 368 (@18)

    @18  go to state 619


state 495

  372 labeled.statement: TYPEDEFname ':' . statement

    error              shift, and go to state 321
    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    '{'                shift, and go to state 322
    BREAK              shift, and go to state 324
    SWITCH             shift, and go to state 325
    CASE               shift, and go to state 326
    RETURN             shift, and go to state 327
    CONTINUE           shift, and go to state 328
    FOR                shift, and go to state 329
    DEFAULT            shift, and go to state 330
    GOTO               shift, and go to state 331
    SIZEOF             shift, and go to state 223
    DO                 shift, and go to state 332
    IF                 shift, and go to state 333
    WHILE              shift, and go to state 334
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 335
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    TYPEDEFname        shift, and go to state 517
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    ';'  reduce using rule 151 (expression.opt)

    primary.expression         go to state 236
    postfix.expression         go to state 237
    unary.expression           go to state 337
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 241
    additive.expression        go to state 242
    shift.expression           go to state 243
    relational.expression      go to state 244
    equality.expression        go to state 245
    AND.expression             go to state 246
    exclusive.OR.expression    go to state 247
    inclusive.OR.expression    go to state 248
    logical.AND.expression     go to state 249
    logical.OR.expression      go to state 250
    conditional.expression     go to state 338
    assignment.expression      go to state 339
    expression                 go to state 340
    expression.opt             go to state 341
    statement                  go to state 620
    labeled.statement          go to state 343
    compound.statement         go to state 344
    lblock                     go to state 345
    expression.statement       go to state 348
    selection.statement        go to state 349
    iteration.statement        go to state 350
    jump.statement             go to state 351
    constant                   go to state 253
    string.literal.list        go to state 254


state 496

  137 assignment.operator: '=' .

    $default  reduce using rule 137 (assignment.operator)


state 497

  138 assignment.operator: MULTassign .

    $default  reduce using rule 138 (assignment.operator)


state 498

  139 assignment.operator: DIVassign .

    $default  reduce using rule 139 (assignment.operator)


state 499

  140 assignment.operator: MODassign .

    $default  reduce using rule 140 (assignment.operator)


state 500

  141 assignment.operator: PLUSassign .

    $default  reduce using rule 141 (assignment.operator)


state 501

  142 assignment.operator: MINUSassign .

    $default  reduce using rule 142 (assignment.operator)


state 502

  143 assignment.operator: LSassign .

    $default  reduce using rule 143 (assignment.operator)


state 503

  144 assignment.operator: RSassign .

    $default  reduce using rule 144 (assignment.operator)


state 504

  145 assignment.operator: ANDassign .

    $default  reduce using rule 145 (assignment.operator)


state 505

  146 assignment.operator: ERassign .

    $default  reduce using rule 146 (assignment.operator)


state 506

  147 assignment.operator: ORassign .

    $default  reduce using rule 147 (assignment.operator)


state 507

  136 assignment.expression: unary.expression assignment.operator . assignment.expression

    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    SIZEOF             shift, and go to state 223
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 227
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    primary.expression         go to state 236
    postfix.expression         go to state 237
    unary.expression           go to state 337
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 241
    additive.expression        go to state 242
    shift.expression           go to state 243
    relational.expression      go to state 244
    equality.expression        go to state 245
    AND.expression             go to state 246
    exclusive.OR.expression    go to state 247
    inclusive.OR.expression    go to state 248
    logical.AND.expression     go to state 249
    logical.OR.expression      go to state 250
    conditional.expression     go to state 338
    assignment.expression      go to state 621
    constant                   go to state 253
    string.literal.list        go to state 254


state 508

  149 expression: expression ',' . assignment.expression

    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    SIZEOF             shift, and go to state 223
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 227
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    primary.expression         go to state 236
    postfix.expression         go to state 237
    unary.expression           go to state 337
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 241
    additive.expression        go to state 242
    shift.expression           go to state 243
    relational.expression      go to state 244
    equality.expression        go to state 245
    AND.expression             go to state 246
    exclusive.OR.expression    go to state 247
    inclusive.OR.expression    go to state 248
    logical.AND.expression     go to state 249
    logical.OR.expression      go to state 250
    conditional.expression     go to state 338
    assignment.expression      go to state 622
    constant                   go to state 253
    string.literal.list        go to state 254


state 509

  387 expression.statement: expression.opt ';' .

    $default  reduce using rule 387 (expression.statement)


state 510

  378 rblock: '}' .

    $default  reduce using rule 378 (rblock)


state 511

   23 composite.body.statement.list: composite.body.statement.list . costream.composite.statement
  375 compound.statement: lblock composite.body.statement.list . rblock

    error              shift, and go to state 321
    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    '{'                shift, and go to state 322
    '}'                shift, and go to state 510
    BREAK              shift, and go to state 324
    SWITCH             shift, and go to state 325
    CASE               shift, and go to state 326
    RETURN             shift, and go to state 327
    CONTINUE           shift, and go to state 328
    FOR                shift, and go to state 329
    DEFAULT            shift, and go to state 330
    GOTO               shift, and go to state 331
    SIZEOF             shift, and go to state 223
    DO                 shift, and go to state 332
    IF                 shift, and go to state 333
    WHILE              shift, and go to state 334
    ADD                shift, and go to state 449
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    FILEWRITER         shift, and go to state 450
    IDENTIFIER         shift, and go to state 335
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    TYPEDEFname        shift, and go to state 517
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    ';'  reduce using rule 151 (expression.opt)

    composite.body.operator       go to state 452
    operator.file.writer          go to state 453
    operator.add                  go to state 454
    primary.expression            go to state 236
    postfix.expression            go to state 237
    unary.expression              go to state 337
    unary.operator                go to state 239
    cast.expression               go to state 240
    multiplicative.expression     go to state 241
    additive.expression           go to state 242
    shift.expression              go to state 243
    relational.expression         go to state 244
    equality.expression           go to state 245
    AND.expression                go to state 246
    exclusive.OR.expression       go to state 247
    inclusive.OR.expression       go to state 248
    logical.AND.expression        go to state 249
    logical.OR.expression         go to state 250
    conditional.expression        go to state 338
    assignment.expression         go to state 339
    expression                    go to state 340
    expression.opt                go to state 341
    costream.composite.statement  go to state 597
    statement                     go to state 456
    labeled.statement             go to state 343
    compound.statement            go to state 344
    lblock                        go to state 345
    rblock                        go to state 623
    expression.statement          go to state 348
    selection.statement           go to state 349
    iteration.statement           go to state 350
    jump.statement                go to state 351
    constant                      go to state 253
    string.literal.list           go to state 254


state 512

  373 compound.statement: lblock rblock .

    $default  reduce using rule 373 (compound.statement)


state 513

  374 compound.statement: lblock declaration.list . rblock
  376                   | lblock declaration.list . composite.body.statement.list rblock
  384 declaration.list: declaration.list . declaration

    error              shift, and go to state 321
    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    '{'                shift, and go to state 322
    '}'                shift, and go to state 510
    AUTO               shift, and go to state 3
    DOUBLE             shift, and go to state 4
    INT                shift, and go to state 5
    STRUCT             shift, and go to state 6
    BREAK              shift, and go to state 324
    LONG               shift, and go to state 7
    SWITCH             shift, and go to state 325
    CASE               shift, and go to state 326
    ENUM               shift, and go to state 8
    REGISTER           shift, and go to state 9
    TYPEDEF            shift, and go to state 10
    CHAR               shift, and go to state 11
    EXTERN             shift, and go to state 12
    RETURN             shift, and go to state 327
    UNION              shift, and go to state 13
    CONST              shift, and go to state 14
    FLOAT              shift, and go to state 15
    SHORT              shift, and go to state 16
    UNSIGNED           shift, and go to state 17
    CONTINUE           shift, and go to state 328
    FOR                shift, and go to state 329
    SIGNED             shift, and go to state 18
    VOID               shift, and go to state 19
    DEFAULT            shift, and go to state 330
    GOTO               shift, and go to state 331
    SIZEOF             shift, and go to state 223
    VOLATILE           shift, and go to state 20
    DO                 shift, and go to state 332
    IF                 shift, and go to state 333
    STATIC             shift, and go to state 21
    WHILE              shift, and go to state 334
    STREAM             shift, and go to state 23
    ADD                shift, and go to state 449
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    FILEWRITER         shift, and go to state 450
    IDENTIFIER         shift, and go to state 335
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    TYPEDEFname        shift, and go to state 336
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235
    INLINE             shift, and go to state 26

    ';'  reduce using rule 151 (expression.opt)

    stream.type.specifier          go to state 28
    composite.body.statement.list  go to state 624
    composite.body.operator        go to state 452
    operator.file.writer           go to state 453
    operator.add                   go to state 454
    primary.expression             go to state 236
    postfix.expression             go to state 237
    unary.expression               go to state 337
    unary.operator                 go to state 239
    cast.expression                go to state 240
    multiplicative.expression      go to state 241
    additive.expression            go to state 242
    shift.expression               go to state 243
    relational.expression          go to state 244
    equality.expression            go to state 245
    AND.expression                 go to state 246
    exclusive.OR.expression        go to state 247
    inclusive.OR.expression        go to state 248
    logical.AND.expression         go to state 249
    logical.OR.expression          go to state 250
    conditional.expression         go to state 338
    assignment.expression          go to state 339
    expression                     go to state 340
    expression.opt                 go to state 341
    declaration                    go to state 420
    declaring.list                 go to state 32
    default.declaring.list         go to state 33
    declaration.specifier          go to state 259
    basic.declaration.specifier    go to state 35
    sue.declaration.specifier      go to state 36
    typedef.declaration.specifier  go to state 37
    declaration.qualifier.list     go to state 260
    type.specifier                 go to state 261
    basic.type.specifier           go to state 40
    sue.type.specifier             go to state 41
    typedef.type.specifier         go to state 42
    type.qualifier.list            go to state 262
    elaborated.type.name           go to state 44
    struct.or.union.specifier      go to state 51
    struct.or.union                go to state 52
    enum.specifier                 go to state 53
    costream.composite.statement   go to state 455
    statement                      go to state 456
    labeled.statement              go to state 343
    compound.statement             go to state 344
    lblock                         go to state 345
    rblock                         go to state 625
    expression.statement           go to state 348
    selection.statement            go to state 349
    iteration.statement            go to state 350
    jump.statement                 go to state 351
    constant                       go to state 253
    string.literal.list            go to state 254
    type.qualifier                 go to state 57
    storage.class                  go to state 58
    basic.type.name                go to state 59


state 514

  380 compound.statement.no.new.scope: '{' declaration.list '}' .

    $default  reduce using rule 380 (compound.statement.no.new.scope)


state 515

  382 compound.statement.no.new.scope: '{' declaration.list statement.list . '}'
  386 statement.list: statement.list . statement

    error              shift, and go to state 321
    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    '{'                shift, and go to state 322
    '}'                shift, and go to state 626
    BREAK              shift, and go to state 324
    SWITCH             shift, and go to state 325
    CASE               shift, and go to state 326
    RETURN             shift, and go to state 327
    CONTINUE           shift, and go to state 328
    FOR                shift, and go to state 329
    DEFAULT            shift, and go to state 330
    GOTO               shift, and go to state 331
    SIZEOF             shift, and go to state 223
    DO                 shift, and go to state 332
    IF                 shift, and go to state 333
    WHILE              shift, and go to state 334
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 335
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    TYPEDEFname        shift, and go to state 517
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    ';'  reduce using rule 151 (expression.opt)

    primary.expression         go to state 236
    postfix.expression         go to state 237
    unary.expression           go to state 337
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 241
    additive.expression        go to state 242
    shift.expression           go to state 243
    relational.expression      go to state 244
    equality.expression        go to state 245
    AND.expression             go to state 246
    exclusive.OR.expression    go to state 247
    inclusive.OR.expression    go to state 248
    logical.AND.expression     go to state 249
    logical.OR.expression      go to state 250
    conditional.expression     go to state 338
    assignment.expression      go to state 339
    expression                 go to state 340
    expression.opt             go to state 341
    statement                  go to state 518
    labeled.statement          go to state 343
    compound.statement         go to state 344
    lblock                     go to state 345
    expression.statement       go to state 348
    selection.statement        go to state 349
    iteration.statement        go to state 350
    jump.statement             go to state 351
    constant                   go to state 253
    string.literal.list        go to state 254


state 516

  381 compound.statement.no.new.scope: '{' statement.list '}' .

    $default  reduce using rule 381 (compound.statement.no.new.scope)


state 517

  372 labeled.statement: TYPEDEFname . ':' statement

    ':'  shift, and go to state 495


state 518

  386 statement.list: statement.list statement .

    $default  reduce using rule 386 (statement.list)


state 519

  220 pointer.type.qualifier.list: pointer.type.qualifier.list . pointer.type.qualifier
  242 clean.typedef.declarator: '*' pointer.type.qualifier.list . parameter.typedef.declarator
  249 unary.abstract.declarator: '*' pointer.type.qualifier.list .
  251                          | '*' pointer.type.qualifier.list . abstract.declarator
  263 unary.identifier.declarator: '*' pointer.type.qualifier.list . identifier.declarator

    '*'          shift, and go to state 352
    '('          shift, and go to state 353
    '['          shift, and go to state 134
    CONST        shift, and go to state 60
    VOLATILE     shift, and go to state 61
    IDENTIFIER   shift, and go to state 24
    TYPEDEFname  shift, and go to state 88

    $default  reduce using rule 249 (unary.abstract.declarator)

    parameter.typedef.declarator      go to state 297
    clean.typedef.declarator          go to state 93
    clean.postfix.typedef.declarator  go to state 94
    abstract.declarator               go to state 627
    unary.abstract.declarator         go to state 356
    postfix.abstract.declarator       go to state 357
    postfixing.abstract.declarator    go to state 358
    identifier.declarator             go to state 143
    unary.identifier.declarator       go to state 46
    postfix.identifier.declarator     go to state 47
    paren.identifier.declarator       go to state 79
    array.abstract.declarator         go to state 136
    pointer.type.qualifier            go to state 145


state 520

  250 unary.abstract.declarator: '*' abstract.declarator .

    $default  reduce using rule 250 (unary.abstract.declarator)


state 521

  252 postfix.abstract.declarator: '(' unary.abstract.declarator . ')'
  255                            | '(' unary.abstract.declarator . ')' postfixing.abstract.declarator

    ')'  shift, and go to state 628


state 522

  253 postfix.abstract.declarator: '(' postfix.abstract.declarator . ')'

    ')'  shift, and go to state 629


state 523

  254 postfix.abstract.declarator: '(' postfixing.abstract.declarator . ')'

    ')'  shift, and go to state 630


state 524

  220 pointer.type.qualifier.list: pointer.type.qualifier.list . pointer.type.qualifier
  249 unary.abstract.declarator: '*' pointer.type.qualifier.list .
  251                          | '*' pointer.type.qualifier.list . abstract.declarator
  263 unary.identifier.declarator: '*' pointer.type.qualifier.list . identifier.declarator

    '*'         shift, and go to state 360
    '('         shift, and go to state 361
    '['         shift, and go to state 134
    CONST       shift, and go to state 60
    VOLATILE    shift, and go to state 61
    IDENTIFIER  shift, and go to state 24

    $default  reduce using rule 249 (unary.abstract.declarator)

    abstract.declarator             go to state 627
    unary.abstract.declarator       go to state 356
    postfix.abstract.declarator     go to state 357
    postfixing.abstract.declarator  go to state 358
    identifier.declarator           go to state 143
    unary.identifier.declarator     go to state 46
    postfix.identifier.declarator   go to state 47
    paren.identifier.declarator     go to state 79
    array.abstract.declarator       go to state 136
    pointer.type.qualifier          go to state 145


state 525

  276 identifier.list: identifier.list ',' IDENTIFIER .

    $default  reduce using rule 276 (identifier.list)


state 526

  309 parameter.list: parameter.list ',' error .

    $default  reduce using rule 309 (parameter.list)


state 527

  304 parameter.type.list: parameter.list ',' ELLIPSIS .

    $default  reduce using rule 304 (parameter.type.list)


state 528

  307 parameter.list: parameter.list ',' parameter.declaration .

    $default  reduce using rule 307 (parameter.list)


state 529

  298 initializer: '{' . initializer.list '}'
  299            | '{' . initializer.list ',' '}'

    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    '{'                shift, and go to state 529
    SIZEOF             shift, and go to state 223
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 227
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    primary.expression         go to state 236
    postfix.expression         go to state 237
    unary.expression           go to state 337
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 241
    additive.expression        go to state 242
    shift.expression           go to state 243
    relational.expression      go to state 244
    equality.expression        go to state 245
    AND.expression             go to state 246
    exclusive.OR.expression    go to state 247
    inclusive.OR.expression    go to state 248
    logical.AND.expression     go to state 249
    logical.OR.expression      go to state 250
    conditional.expression     go to state 338
    assignment.expression      go to state 530
    initializer                go to state 631
    initializer.list           go to state 632
    constant                   go to state 253
    string.literal.list        go to state 254


state 530

  300 initializer: assignment.expression .

    $default  reduce using rule 300 (initializer)


state 531

  308 parameter.list: parameter.declaration '=' initializer .

    $default  reduce using rule 308 (parameter.list)


state 532

   66 primary.expression: '(' expression ')' .

    $default  reduce using rule 66 (primary.expression)


state 533

  248 unary.abstract.declarator: '*' .
  249                          | '*' . pointer.type.qualifier.list
  250                          | '*' . abstract.declarator
  251                          | '*' . pointer.type.qualifier.list abstract.declarator

    '*'       shift, and go to state 533
    '('       shift, and go to state 534
    '['       shift, and go to state 134
    CONST     shift, and go to state 60
    VOLATILE  shift, and go to state 61

    $default  reduce using rule 248 (unary.abstract.declarator)

    pointer.type.qualifier.list     go to state 633
    abstract.declarator             go to state 520
    unary.abstract.declarator       go to state 356
    postfix.abstract.declarator     go to state 357
    postfixing.abstract.declarator  go to state 358
    array.abstract.declarator       go to state 136
    pointer.type.qualifier          go to state 65


state 534

  252 postfix.abstract.declarator: '(' . unary.abstract.declarator ')'
  253                            | '(' . postfix.abstract.declarator ')'
  254                            | '(' . postfixing.abstract.declarator ')'
  255                            | '(' . unary.abstract.declarator ')' postfixing.abstract.declarator
  257 postfixing.abstract.declarator: '(' . ')'
  258                               | '(' . parameter.type.list ')'

    '*'          shift, and go to state 533
    '('          shift, and go to state 534
    ')'          shift, and go to state 202
    '['          shift, and go to state 134
    AUTO         shift, and go to state 3
    DOUBLE       shift, and go to state 4
    INT          shift, and go to state 5
    STRUCT       shift, and go to state 6
    LONG         shift, and go to state 7
    ENUM         shift, and go to state 8
    REGISTER     shift, and go to state 9
    TYPEDEF      shift, and go to state 10
    CHAR         shift, and go to state 11
    EXTERN       shift, and go to state 12
    UNION        shift, and go to state 13
    CONST        shift, and go to state 14
    FLOAT        shift, and go to state 15
    SHORT        shift, and go to state 16
    UNSIGNED     shift, and go to state 17
    SIGNED       shift, and go to state 18
    VOID         shift, and go to state 19
    VOLATILE     shift, and go to state 20
    STATIC       shift, and go to state 21
    TYPEDEFname  shift, and go to state 25
    ELLIPSIS     shift, and go to state 204
    INLINE       shift, and go to state 26

    declaration.specifier           go to state 205
    basic.declaration.specifier     go to state 35
    sue.declaration.specifier       go to state 206
    typedef.declaration.specifier   go to state 37
    declaration.qualifier.list      go to state 207
    type.specifier                  go to state 208
    basic.type.specifier            go to state 40
    sue.type.specifier              go to state 209
    typedef.type.specifier          go to state 42
    type.qualifier.list             go to state 210
    elaborated.type.name            go to state 44
    unary.abstract.declarator       go to state 521
    postfix.abstract.declarator     go to state 522
    postfixing.abstract.declarator  go to state 523
    parameter.type.list             go to state 212
    parameter.list                  go to state 213
    parameter.declaration           go to state 214
    array.abstract.declarator       go to state 136
    struct.or.union.specifier       go to state 51
    struct.or.union                 go to state 52
    enum.specifier                  go to state 53
    type.qualifier                  go to state 57
    storage.class                   go to state 58
    basic.type.name                 go to state 59


state 535

  280 type.name: type.specifier abstract.declarator .

    $default  reduce using rule 280 (type.name)


state 536

  282 type.name: type.qualifier.list abstract.declarator .

    $default  reduce using rule 282 (type.name)


state 537

  104 cast.expression: '(' type.name ')' . cast.expression

    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    SIZEOF             shift, and go to state 223
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 227
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    primary.expression   go to state 236
    postfix.expression   go to state 237
    unary.expression     go to state 238
    unary.operator       go to state 239
    cast.expression      go to state 634
    constant             go to state 253
    string.literal.list  go to state 254


state 538

   68 primary.expression: '(' lblock declaration.list . statement.list rblock ')'
  384 declaration.list: declaration.list . declaration

    error              shift, and go to state 321
    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    '{'                shift, and go to state 322
    AUTO               shift, and go to state 3
    DOUBLE             shift, and go to state 4
    INT                shift, and go to state 5
    STRUCT             shift, and go to state 6
    BREAK              shift, and go to state 324
    LONG               shift, and go to state 7
    SWITCH             shift, and go to state 325
    CASE               shift, and go to state 326
    ENUM               shift, and go to state 8
    REGISTER           shift, and go to state 9
    TYPEDEF            shift, and go to state 10
    CHAR               shift, and go to state 11
    EXTERN             shift, and go to state 12
    RETURN             shift, and go to state 327
    UNION              shift, and go to state 13
    CONST              shift, and go to state 14
    FLOAT              shift, and go to state 15
    SHORT              shift, and go to state 16
    UNSIGNED           shift, and go to state 17
    CONTINUE           shift, and go to state 328
    FOR                shift, and go to state 329
    SIGNED             shift, and go to state 18
    VOID               shift, and go to state 19
    DEFAULT            shift, and go to state 330
    GOTO               shift, and go to state 331
    SIZEOF             shift, and go to state 223
    VOLATILE           shift, and go to state 20
    DO                 shift, and go to state 332
    IF                 shift, and go to state 333
    STATIC             shift, and go to state 21
    WHILE              shift, and go to state 334
    STREAM             shift, and go to state 23
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 335
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    TYPEDEFname        shift, and go to state 336
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235
    INLINE             shift, and go to state 26

    ';'  reduce using rule 151 (expression.opt)

    stream.type.specifier          go to state 28
    primary.expression             go to state 236
    postfix.expression             go to state 237
    unary.expression               go to state 337
    unary.operator                 go to state 239
    cast.expression                go to state 240
    multiplicative.expression      go to state 241
    additive.expression            go to state 242
    shift.expression               go to state 243
    relational.expression          go to state 244
    equality.expression            go to state 245
    AND.expression                 go to state 246
    exclusive.OR.expression        go to state 247
    inclusive.OR.expression        go to state 248
    logical.AND.expression         go to state 249
    logical.OR.expression          go to state 250
    conditional.expression         go to state 338
    assignment.expression          go to state 339
    expression                     go to state 340
    expression.opt                 go to state 341
    declaration                    go to state 420
    declaring.list                 go to state 32
    default.declaring.list         go to state 33
    declaration.specifier          go to state 259
    basic.declaration.specifier    go to state 35
    sue.declaration.specifier      go to state 36
    typedef.declaration.specifier  go to state 37
    declaration.qualifier.list     go to state 260
    type.specifier                 go to state 261
    basic.type.specifier           go to state 40
    sue.type.specifier             go to state 41
    typedef.type.specifier         go to state 42
    type.qualifier.list            go to state 262
    elaborated.type.name           go to state 44
    struct.or.union.specifier      go to state 51
    struct.or.union                go to state 52
    enum.specifier                 go to state 53
    statement                      go to state 342
    labeled.statement              go to state 343
    compound.statement             go to state 344
    lblock                         go to state 345
    statement.list                 go to state 635
    expression.statement           go to state 348
    selection.statement            go to state 349
    iteration.statement            go to state 350
    jump.statement                 go to state 351
    constant                       go to state 253
    string.literal.list            go to state 254
    type.qualifier                 go to state 57
    storage.class                  go to state 58
    basic.type.name                go to state 59


state 539

   67 primary.expression: '(' lblock statement.list . rblock ')'
  386 statement.list: statement.list . statement

    error              shift, and go to state 321
    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    '{'                shift, and go to state 322
    '}'                shift, and go to state 510
    BREAK              shift, and go to state 324
    SWITCH             shift, and go to state 325
    CASE               shift, and go to state 326
    RETURN             shift, and go to state 327
    CONTINUE           shift, and go to state 328
    FOR                shift, and go to state 329
    DEFAULT            shift, and go to state 330
    GOTO               shift, and go to state 331
    SIZEOF             shift, and go to state 223
    DO                 shift, and go to state 332
    IF                 shift, and go to state 333
    WHILE              shift, and go to state 334
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 335
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    TYPEDEFname        shift, and go to state 517
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    ';'  reduce using rule 151 (expression.opt)

    primary.expression         go to state 236
    postfix.expression         go to state 237
    unary.expression           go to state 337
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 241
    additive.expression        go to state 242
    shift.expression           go to state 243
    relational.expression      go to state 244
    equality.expression        go to state 245
    AND.expression             go to state 246
    exclusive.OR.expression    go to state 247
    inclusive.OR.expression    go to state 248
    logical.AND.expression     go to state 249
    logical.OR.expression      go to state 250
    conditional.expression     go to state 338
    assignment.expression      go to state 339
    expression                 go to state 340
    expression.opt             go to state 341
    statement                  go to state 518
    labeled.statement          go to state 343
    compound.statement         go to state 344
    lblock                     go to state 345
    rblock                     go to state 636
    expression.statement       go to state 348
    selection.statement        go to state 349
    iteration.statement        go to state 350
    jump.statement             go to state 351
    constant                   go to state 253
    string.literal.list        go to state 254


state 540

   96 unary.expression: SIZEOF '(' type.name . ')'

    ')'  shift, and go to state 637


state 541

   77 postfix.expression: SPLITJOIN '(' IDENTIFIER . ')' lblock split.statement splitjoinPipeline.statement.list join.statement rblock
   78                   | SPLITJOIN '(' IDENTIFIER . ')' lblock declaration.list split.statement splitjoinPipeline.statement.list join.statement rblock
   79                   | SPLITJOIN '(' IDENTIFIER . ')' lblock declaration.list statement.list split.statement splitjoinPipeline.statement.list join.statement rblock

    ')'  shift, and go to state 638


state 542

   80 postfix.expression: PIPELINE '(' IDENTIFIER . ')' lblock splitjoinPipeline.statement.list rblock
   81                   | PIPELINE '(' IDENTIFIER . ')' lblock declaration.list splitjoinPipeline.statement.list rblock

    ')'  shift, and go to state 639


state 543

   82 postfix.expression: FILEREADER '(' ')' . operator.arguments

    '('  shift, and go to state 640

    operator.arguments  go to state 641


state 544

   71 postfix.expression: postfix.expression '(' ')' .
   73                   | postfix.expression '(' ')' . operator.selfdefine.body
   75                   | postfix.expression '(' ')' . operator.arguments

    '('  shift, and go to state 640
    '{'  shift, and go to state 322

    '('       [reduce using rule 71 (postfix.expression)]
    $default  reduce using rule 71 (postfix.expression)

    operator.arguments        go to state 642
    operator.selfdefine.body  go to state 643
    lblock                    go to state 644


state 545

   72 postfix.expression: postfix.expression '(' argument.expression.list . ')'
   74                   | postfix.expression '(' argument.expression.list . ')' operator.selfdefine.body
   76                   | postfix.expression '(' argument.expression.list . ')' operator.arguments
   90 argument.expression.list: argument.expression.list . ',' assignment.expression

    ')'  shift, and go to state 645
    ','  shift, and go to state 646


state 546

   89 argument.expression.list: assignment.expression .

    $default  reduce using rule 89 (argument.expression.list)


state 547

   83 postfix.expression: postfix.expression '.' IDENTIFIER .

    $default  reduce using rule 83 (postfix.expression)


state 548

   87 postfix.expression: postfix.expression '.' TYPEDEFname .

    $default  reduce using rule 87 (postfix.expression)


state 549

   70 postfix.expression: postfix.expression '[' expression . ']'
  149 expression: expression . ',' assignment.expression

    ','  shift, and go to state 508
    ']'  shift, and go to state 647


state 550

   84 postfix.expression: postfix.expression ARROW IDENTIFIER .

    $default  reduce using rule 84 (postfix.expression)


state 551

   88 postfix.expression: postfix.expression ARROW TYPEDEFname .

    $default  reduce using rule 88 (postfix.expression)


state 552

  106 multiplicative.expression: multiplicative.expression '*' cast.expression .

    $default  reduce using rule 106 (multiplicative.expression)


state 553

  108 multiplicative.expression: multiplicative.expression '%' cast.expression .

    $default  reduce using rule 108 (multiplicative.expression)


state 554

  107 multiplicative.expression: multiplicative.expression '/' cast.expression .

    $default  reduce using rule 107 (multiplicative.expression)


state 555

  106 multiplicative.expression: multiplicative.expression . '*' cast.expression
  107                          | multiplicative.expression . '/' cast.expression
  108                          | multiplicative.expression . '%' cast.expression
  110 additive.expression: additive.expression '+' multiplicative.expression .

    '*'  shift, and go to state 394
    '%'  shift, and go to state 395
    '/'  shift, and go to state 396

    $default  reduce using rule 110 (additive.expression)


state 556

  106 multiplicative.expression: multiplicative.expression . '*' cast.expression
  107                          | multiplicative.expression . '/' cast.expression
  108                          | multiplicative.expression . '%' cast.expression
  111 additive.expression: additive.expression '-' multiplicative.expression .

    '*'  shift, and go to state 394
    '%'  shift, and go to state 395
    '/'  shift, and go to state 396

    $default  reduce using rule 111 (additive.expression)


state 557

  110 additive.expression: additive.expression . '+' multiplicative.expression
  111                    | additive.expression . '-' multiplicative.expression
  113 shift.expression: shift.expression LS additive.expression .

    '+'  shift, and go to state 397
    '-'  shift, and go to state 398

    $default  reduce using rule 113 (shift.expression)


state 558

  110 additive.expression: additive.expression . '+' multiplicative.expression
  111                    | additive.expression . '-' multiplicative.expression
  114 shift.expression: shift.expression RS additive.expression .

    '+'  shift, and go to state 397
    '-'  shift, and go to state 398

    $default  reduce using rule 114 (shift.expression)


state 559

  113 shift.expression: shift.expression . LS additive.expression
  114                 | shift.expression . RS additive.expression
  116 relational.expression: relational.expression '<' shift.expression .

    LS  shift, and go to state 399
    RS  shift, and go to state 400

    $default  reduce using rule 116 (relational.expression)


state 560

  113 shift.expression: shift.expression . LS additive.expression
  114                 | shift.expression . RS additive.expression
  117 relational.expression: relational.expression '>' shift.expression .

    LS  shift, and go to state 399
    RS  shift, and go to state 400

    $default  reduce using rule 117 (relational.expression)


state 561

  113 shift.expression: shift.expression . LS additive.expression
  114                 | shift.expression . RS additive.expression
  118 relational.expression: relational.expression LE shift.expression .

    LS  shift, and go to state 399
    RS  shift, and go to state 400

    $default  reduce using rule 118 (relational.expression)


state 562

  113 shift.expression: shift.expression . LS additive.expression
  114                 | shift.expression . RS additive.expression
  119 relational.expression: relational.expression GE shift.expression .

    LS  shift, and go to state 399
    RS  shift, and go to state 400

    $default  reduce using rule 119 (relational.expression)


state 563

  116 relational.expression: relational.expression . '<' shift.expression
  117                      | relational.expression . '>' shift.expression
  118                      | relational.expression . LE shift.expression
  119                      | relational.expression . GE shift.expression
  121 equality.expression: equality.expression EQ relational.expression .

    '<'  shift, and go to state 401
    '>'  shift, and go to state 402
    LE   shift, and go to state 403
    GE   shift, and go to state 404

    $default  reduce using rule 121 (equality.expression)


state 564

  116 relational.expression: relational.expression . '<' shift.expression
  117                      | relational.expression . '>' shift.expression
  118                      | relational.expression . LE shift.expression
  119                      | relational.expression . GE shift.expression
  122 equality.expression: equality.expression NE relational.expression .

    '<'  shift, and go to state 401
    '>'  shift, and go to state 402
    LE   shift, and go to state 403
    GE   shift, and go to state 404

    $default  reduce using rule 122 (equality.expression)


state 565

  121 equality.expression: equality.expression . EQ relational.expression
  122                    | equality.expression . NE relational.expression
  124 AND.expression: AND.expression '&' equality.expression .

    EQ  shift, and go to state 405
    NE  shift, and go to state 406

    $default  reduce using rule 124 (AND.expression)


state 566

  124 AND.expression: AND.expression . '&' equality.expression
  126 exclusive.OR.expression: exclusive.OR.expression '^' AND.expression .

    '&'  shift, and go to state 407

    $default  reduce using rule 126 (exclusive.OR.expression)


state 567

  126 exclusive.OR.expression: exclusive.OR.expression . '^' AND.expression
  128 inclusive.OR.expression: inclusive.OR.expression '|' exclusive.OR.expression .

    '^'  shift, and go to state 408

    $default  reduce using rule 128 (inclusive.OR.expression)


state 568

  128 inclusive.OR.expression: inclusive.OR.expression . '|' exclusive.OR.expression
  130 logical.AND.expression: logical.AND.expression ANDAND inclusive.OR.expression .

    '|'  shift, and go to state 409

    $default  reduce using rule 130 (logical.AND.expression)


state 569

  134 conditional.expression: logical.OR.expression '?' expression . ':' conditional.expression
  149 expression: expression . ',' assignment.expression

    ','  shift, and go to state 508
    ':'  shift, and go to state 648


state 570

  130 logical.AND.expression: logical.AND.expression . ANDAND inclusive.OR.expression
  132 logical.OR.expression: logical.OR.expression OROR logical.AND.expression .

    ANDAND  shift, and go to state 410

    $default  reduce using rule 132 (logical.OR.expression)


state 571

  326 array.abstract.declarator: array.abstract.declarator '[' constant.expression ']' .

    $default  reduce using rule 326 (array.abstract.declarator)


state 572

  349 bit.field.size: ':' constant.expression .

    $default  reduce using rule 349 (bit.field.size)


state 573

  343 struct.declarator: declarator bit.field.size.opt . attributes.opt

    ATTRIBUTE  shift, and go to state 290

    $default  reduce using rule 283 (attributes.opt)

    attributes.opt  go to state 649
    attributes      go to state 292
    attribute       go to state 293


state 574

  348 bit.field.size.opt: bit.field.size .

    $default  reduce using rule 348 (bit.field.size.opt)


state 575

  344 struct.declarator: bit.field.size attributes.opt .

    $default  reduce using rule 344 (struct.declarator)


state 576

  345 struct.identifier.declarator: identifier.declarator bit.field.size.opt . attributes.opt

    ATTRIBUTE  shift, and go to state 290

    $default  reduce using rule 283 (attributes.opt)

    attributes.opt  go to state 650
    attributes      go to state 292
    attribute       go to state 293


state 577

  346 struct.identifier.declarator: bit.field.size attributes.opt .

    $default  reduce using rule 346 (struct.identifier.declarator)


state 578

  340 struct.default.declaring.list: struct.default.declaring.list ',' struct.identifier.declarator .

    $default  reduce using rule 340 (struct.default.declaring.list)


state 579

  342 struct.declaring.list: struct.declaring.list ',' struct.declarator .

    $default  reduce using rule 342 (struct.declaring.list)


state 580

  329 struct.or.union.specifier: struct.or.union identifier.or.typedef.name '{' struct.declaration.list '}' .

    $default  reduce using rule 329 (struct.or.union.specifier)


state 581

  354 enumerator.list: enumerator.list ',' identifier.or.typedef.name enumerator.value.opt .

    $default  reduce using rule 354 (enumerator.list)


state 582

  351 enum.specifier: ENUM identifier.or.typedef.name '{' enumerator.list comma.opt '}' .

    $default  reduce using rule 351 (enum.specifier)


state 583

   17 composite.head.inout.member: stream.type.specifier IDENTIFIER .

    $default  reduce using rule 17 (composite.head.inout.member)


state 584

   11 composite.head.inout: INPUT composite.head.inout.member.list ',' . OUTPUT composite.head.inout.member.list
   16 composite.head.inout.member.list: composite.head.inout.member.list ',' . composite.head.inout.member

    OUTPUT  shift, and go to state 651
    STREAM  shift, and go to state 23

    stream.type.specifier        go to state 440
    composite.head.inout.member  go to state 652


state 585

   14 composite.head.inout: OUTPUT composite.head.inout.member.list ',' . INPUT composite.head.inout.member.list
   16 composite.head.inout.member.list: composite.head.inout.member.list ',' . composite.head.inout.member

    INPUT   shift, and go to state 653
    STREAM  shift, and go to state 23

    stream.type.specifier        go to state 440
    composite.head.inout.member  go to state 652


state 586

    5 stream.declaration.list: stream.declaration.list ',' type.specifier paren.identifier.declarator .
    6                        | stream.declaration.list ',' type.specifier paren.identifier.declarator . postfixing.abstract.declarator

    '('  shift, and go to state 161
    '['  shift, and go to state 134

    $default  reduce using rule 5 (stream.declaration.list)

    postfixing.abstract.declarator  go to state 654
    array.abstract.declarator       go to state 136


state 587

   21 composite.body.param.opt: PARAM parameter.list ';' .

    $default  reduce using rule 21 (composite.body.param.opt)


state 588

  307 parameter.list: parameter.list ',' . parameter.declaration
  309               | parameter.list ',' . error

    error        shift, and go to state 526
    AUTO         shift, and go to state 3
    DOUBLE       shift, and go to state 4
    INT          shift, and go to state 5
    STRUCT       shift, and go to state 6
    LONG         shift, and go to state 7
    ENUM         shift, and go to state 8
    REGISTER     shift, and go to state 9
    TYPEDEF      shift, and go to state 10
    CHAR         shift, and go to state 11
    EXTERN       shift, and go to state 12
    UNION        shift, and go to state 13
    CONST        shift, and go to state 14
    FLOAT        shift, and go to state 15
    SHORT        shift, and go to state 16
    UNSIGNED     shift, and go to state 17
    SIGNED       shift, and go to state 18
    VOID         shift, and go to state 19
    VOLATILE     shift, and go to state 20
    STATIC       shift, and go to state 21
    TYPEDEFname  shift, and go to state 25
    INLINE       shift, and go to state 26

    declaration.specifier          go to state 205
    basic.declaration.specifier    go to state 35
    sue.declaration.specifier      go to state 206
    typedef.declaration.specifier  go to state 37
    declaration.qualifier.list     go to state 207
    type.specifier                 go to state 208
    basic.type.specifier           go to state 40
    sue.type.specifier             go to state 209
    typedef.type.specifier         go to state 42
    type.qualifier.list            go to state 210
    elaborated.type.name           go to state 44
    parameter.declaration          go to state 528
    struct.or.union.specifier      go to state 51
    struct.or.union                go to state 52
    enum.specifier                 go to state 53
    type.qualifier                 go to state 57
    storage.class                  go to state 58
    basic.type.name                go to state 59


state 589

   32 operator.splitjoin: SPLITJOIN . lblock split.statement splitjoinPipeline.statement.list join.statement rblock
   33                   | SPLITJOIN . lblock declaration.list split.statement splitjoinPipeline.statement.list join.statement rblock
   34                   | SPLITJOIN . lblock declaration.list statement.list split.statement splitjoinPipeline.statement.list join.statement rblock

    '{'  shift, and go to state 322

    lblock  go to state 655


state 590

   30 operator.pipeline: PIPELINE . lblock splitjoinPipeline.statement.list rblock
   31                  | PIPELINE . lblock declaration.list splitjoinPipeline.statement.list rblock

    '{'  shift, and go to state 322

    lblock  go to state 656


state 591

   46 operator.default.call: IDENTIFIER . operator.arguments ';'

    '('  shift, and go to state 640

    operator.arguments  go to state 657


state 592

   28 operator.add: ADD operator.pipeline .

    $default  reduce using rule 28 (operator.add)


state 593

   29 operator.add: ADD operator.splitjoin .

    $default  reduce using rule 29 (operator.add)


state 594

   27 operator.add: ADD operator.default.call .

    $default  reduce using rule 27 (operator.add)


state 595

   26 operator.file.writer: FILEWRITER '(' . IDENTIFIER ')' operator.arguments ';'

    IDENTIFIER  shift, and go to state 658


state 596

   18 composite.body.no.new.scope: '{' composite.body.param.opt composite.body.statement.list '}' .

    $default  reduce using rule 18 (composite.body.no.new.scope)


state 597

   23 composite.body.statement.list: composite.body.statement.list costream.composite.statement .

    $default  reduce using rule 23 (composite.body.statement.list)


state 598

   19 composite.body.no.new.scope: '{' composite.body.param.opt declaration.list composite.body.statement.list . '}'
   23 composite.body.statement.list: composite.body.statement.list . costream.composite.statement

    error              shift, and go to state 321
    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    '{'                shift, and go to state 322
    '}'                shift, and go to state 659
    BREAK              shift, and go to state 324
    SWITCH             shift, and go to state 325
    CASE               shift, and go to state 326
    RETURN             shift, and go to state 327
    CONTINUE           shift, and go to state 328
    FOR                shift, and go to state 329
    DEFAULT            shift, and go to state 330
    GOTO               shift, and go to state 331
    SIZEOF             shift, and go to state 223
    DO                 shift, and go to state 332
    IF                 shift, and go to state 333
    WHILE              shift, and go to state 334
    ADD                shift, and go to state 449
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    FILEWRITER         shift, and go to state 450
    IDENTIFIER         shift, and go to state 335
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    TYPEDEFname        shift, and go to state 517
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    ';'  reduce using rule 151 (expression.opt)

    composite.body.operator       go to state 452
    operator.file.writer          go to state 453
    operator.add                  go to state 454
    primary.expression            go to state 236
    postfix.expression            go to state 237
    unary.expression              go to state 337
    unary.operator                go to state 239
    cast.expression               go to state 240
    multiplicative.expression     go to state 241
    additive.expression           go to state 242
    shift.expression              go to state 243
    relational.expression         go to state 244
    equality.expression           go to state 245
    AND.expression                go to state 246
    exclusive.OR.expression       go to state 247
    inclusive.OR.expression       go to state 248
    logical.AND.expression        go to state 249
    logical.OR.expression         go to state 250
    conditional.expression        go to state 338
    assignment.expression         go to state 339
    expression                    go to state 340
    expression.opt                go to state 341
    costream.composite.statement  go to state 597
    statement                     go to state 456
    labeled.statement             go to state 343
    compound.statement            go to state 344
    lblock                        go to state 345
    expression.statement          go to state 348
    selection.statement           go to state 349
    iteration.statement           go to state 350
    jump.statement                go to state 351
    constant                      go to state 253
    string.literal.list           go to state 254


state 599

  165 declaring.list: declaring.list ',' declarator @6 attributes.opt $@7 . initializer.opt

    '='  shift, and go to state 461

    $default  reduce using rule 296 (initializer.opt)

    initializer.opt  go to state 660


state 600

  180 default.declaring.list: default.declaring.list ',' identifier.declarator @14 attributes.opt $@15 . initializer.opt

    '='  shift, and go to state 461

    $default  reduce using rule 296 (initializer.opt)

    initializer.opt  go to state 661


state 601

  287 attribute: ATTRIBUTE '(' '(' . attribute.list ')' ')'

    CONST        shift, and go to state 662
    IDENTIFIER   shift, and go to state 663
    TYPEDEFname  shift, and go to state 664

    $default  reduce using rule 290 (attrib)

    attribute.list  go to state 665
    attrib          go to state 666
    any.word        go to state 667


state 602

  297 initializer.opt: '=' initializer .

    $default  reduce using rule 297 (initializer.opt)


state 603

  230 paren.typedef.declarator: '*' pointer.type.qualifier.list '(' simple.paren.typedef.declarator ')' .

    $default  reduce using rule 230 (paren.typedef.declarator)


state 604

  159 declaring.list: declaration.specifier declarator $@2 attributes.opt $@3 initializer.opt .

    $default  reduce using rule 159 (declaring.list)


state 605

  173 default.declaring.list: declaration.qualifier.list identifier.declarator $@10 attributes.opt $@11 initializer.opt .

    $default  reduce using rule 173 (default.declaring.list)


state 606

  162 declaring.list: type.specifier declarator $@4 attributes.opt $@5 initializer.opt .

    $default  reduce using rule 162 (declaring.list)


state 607

  177 default.declaring.list: type.qualifier.list identifier.declarator $@12 attributes.opt $@13 initializer.opt .

    $default  reduce using rule 177 (default.declaring.list)


state 608

  391 selection.statement: SWITCH $@19 '(' . expression ')' statement

    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    SIZEOF             shift, and go to state 223
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 227
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    primary.expression         go to state 236
    postfix.expression         go to state 237
    unary.expression           go to state 337
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 241
    additive.expression        go to state 242
    shift.expression           go to state 243
    relational.expression      go to state 244
    equality.expression        go to state 245
    AND.expression             go to state 246
    exclusive.OR.expression    go to state 247
    inclusive.OR.expression    go to state 248
    logical.AND.expression     go to state 249
    logical.OR.expression      go to state 250
    conditional.expression     go to state 338
    assignment.expression      go to state 339
    expression                 go to state 668
    constant                   go to state 253
    string.literal.list        go to state 254


state 609

  370 labeled.statement: CASE constant.expression ':' . statement

    error              shift, and go to state 321
    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    '{'                shift, and go to state 322
    BREAK              shift, and go to state 324
    SWITCH             shift, and go to state 325
    CASE               shift, and go to state 326
    RETURN             shift, and go to state 327
    CONTINUE           shift, and go to state 328
    FOR                shift, and go to state 329
    DEFAULT            shift, and go to state 330
    GOTO               shift, and go to state 331
    SIZEOF             shift, and go to state 223
    DO                 shift, and go to state 332
    IF                 shift, and go to state 333
    WHILE              shift, and go to state 334
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 335
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    TYPEDEFname        shift, and go to state 517
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    ';'  reduce using rule 151 (expression.opt)

    primary.expression         go to state 236
    postfix.expression         go to state 237
    unary.expression           go to state 337
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 241
    additive.expression        go to state 242
    shift.expression           go to state 243
    relational.expression      go to state 244
    equality.expression        go to state 245
    AND.expression             go to state 246
    exclusive.OR.expression    go to state 247
    inclusive.OR.expression    go to state 248
    logical.AND.expression     go to state 249
    logical.OR.expression      go to state 250
    conditional.expression     go to state 338
    assignment.expression      go to state 339
    expression                 go to state 340
    expression.opt             go to state 341
    statement                  go to state 669
    labeled.statement          go to state 343
    compound.statement         go to state 344
    lblock                     go to state 345
    expression.statement       go to state 348
    selection.statement        go to state 349
    iteration.statement        go to state 350
    jump.statement             go to state 351
    constant                   go to state 253
    string.literal.list        go to state 254


state 610

  409 jump.statement: RETURN expression.opt ';' .

    $default  reduce using rule 409 (jump.statement)


state 611

  399 iteration.statement: FOR '(' error . ';' expression.opt ';' expression.opt ')' $@23 costream.composite.statement
  405                    | FOR '(' error . ')' $@26 costream.composite.statement

    ')'  shift, and go to state 670
    ';'  shift, and go to state 671


state 612

  397 iteration.statement: FOR '(' expression.opt . ';' expression.opt ';' expression.opt ')' $@22 costream.composite.statement
  401                    | FOR '(' expression.opt . ';' expression.opt ';' error ')' $@24 costream.composite.statement
  403                    | FOR '(' expression.opt . ';' error ';' expression.opt ')' $@25 costream.composite.statement

    ';'  shift, and go to state 672


state 613

  371 labeled.statement: DEFAULT ':' statement .

    $default  reduce using rule 371 (labeled.statement)


state 614

  406 jump.statement: GOTO IDENTIFIER ';' .

    $default  reduce using rule 406 (jump.statement)


state 615

  410 jump.statement: GOTO TYPEDEFname ';' .

    $default  reduce using rule 410 (jump.statement)


state 616

  395 iteration.statement: DO $@21 statement . WHILE '(' expression ')' ';'

    WHILE  shift, and go to state 673


state 617

  149 expression: expression . ',' assignment.expression
  388 selection.statement: IF '(' expression . ')' costream.composite.statement
  389                    | IF '(' expression . ')' costream.composite.statement ELSE costream.composite.statement

    ')'  shift, and go to state 674
    ','  shift, and go to state 508


state 618

  393 iteration.statement: WHILE $@20 '(' . expression ')' statement

    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    SIZEOF             shift, and go to state 223
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 227
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    primary.expression         go to state 236
    postfix.expression         go to state 237
    unary.expression           go to state 337
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 241
    additive.expression        go to state 242
    shift.expression           go to state 243
    relational.expression      go to state 244
    equality.expression        go to state 245
    AND.expression             go to state 246
    exclusive.OR.expression    go to state 247
    inclusive.OR.expression    go to state 248
    logical.AND.expression     go to state 249
    logical.OR.expression      go to state 250
    conditional.expression     go to state 338
    assignment.expression      go to state 339
    expression                 go to state 675
    constant                   go to state 253
    string.literal.list        go to state 254


state 619

  369 labeled.statement: IDENTIFIER ':' @18 . statement

    error              shift, and go to state 321
    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    '{'                shift, and go to state 322
    BREAK              shift, and go to state 324
    SWITCH             shift, and go to state 325
    CASE               shift, and go to state 326
    RETURN             shift, and go to state 327
    CONTINUE           shift, and go to state 328
    FOR                shift, and go to state 329
    DEFAULT            shift, and go to state 330
    GOTO               shift, and go to state 331
    SIZEOF             shift, and go to state 223
    DO                 shift, and go to state 332
    IF                 shift, and go to state 333
    WHILE              shift, and go to state 334
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 335
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    TYPEDEFname        shift, and go to state 517
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    ';'  reduce using rule 151 (expression.opt)

    primary.expression         go to state 236
    postfix.expression         go to state 237
    unary.expression           go to state 337
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 241
    additive.expression        go to state 242
    shift.expression           go to state 243
    relational.expression      go to state 244
    equality.expression        go to state 245
    AND.expression             go to state 246
    exclusive.OR.expression    go to state 247
    inclusive.OR.expression    go to state 248
    logical.AND.expression     go to state 249
    logical.OR.expression      go to state 250
    conditional.expression     go to state 338
    assignment.expression      go to state 339
    expression                 go to state 340
    expression.opt             go to state 341
    statement                  go to state 676
    labeled.statement          go to state 343
    compound.statement         go to state 344
    lblock                     go to state 345
    expression.statement       go to state 348
    selection.statement        go to state 349
    iteration.statement        go to state 350
    jump.statement             go to state 351
    constant                   go to state 253
    string.literal.list        go to state 254


state 620

  372 labeled.statement: TYPEDEFname ':' statement .

    $default  reduce using rule 372 (labeled.statement)


state 621

  136 assignment.expression: unary.expression assignment.operator assignment.expression .

    $default  reduce using rule 136 (assignment.expression)


state 622

  149 expression: expression ',' assignment.expression .

    $default  reduce using rule 149 (expression)


state 623

  375 compound.statement: lblock composite.body.statement.list rblock .

    $default  reduce using rule 375 (compound.statement)


state 624

   23 composite.body.statement.list: composite.body.statement.list . costream.composite.statement
  376 compound.statement: lblock declaration.list composite.body.statement.list . rblock

    error              shift, and go to state 321
    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    '{'                shift, and go to state 322
    '}'                shift, and go to state 510
    BREAK              shift, and go to state 324
    SWITCH             shift, and go to state 325
    CASE               shift, and go to state 326
    RETURN             shift, and go to state 327
    CONTINUE           shift, and go to state 328
    FOR                shift, and go to state 329
    DEFAULT            shift, and go to state 330
    GOTO               shift, and go to state 331
    SIZEOF             shift, and go to state 223
    DO                 shift, and go to state 332
    IF                 shift, and go to state 333
    WHILE              shift, and go to state 334
    ADD                shift, and go to state 449
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    FILEWRITER         shift, and go to state 450
    IDENTIFIER         shift, and go to state 335
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    TYPEDEFname        shift, and go to state 517
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    ';'  reduce using rule 151 (expression.opt)

    composite.body.operator       go to state 452
    operator.file.writer          go to state 453
    operator.add                  go to state 454
    primary.expression            go to state 236
    postfix.expression            go to state 237
    unary.expression              go to state 337
    unary.operator                go to state 239
    cast.expression               go to state 240
    multiplicative.expression     go to state 241
    additive.expression           go to state 242
    shift.expression              go to state 243
    relational.expression         go to state 244
    equality.expression           go to state 245
    AND.expression                go to state 246
    exclusive.OR.expression       go to state 247
    inclusive.OR.expression       go to state 248
    logical.AND.expression        go to state 249
    logical.OR.expression         go to state 250
    conditional.expression        go to state 338
    assignment.expression         go to state 339
    expression                    go to state 340
    expression.opt                go to state 341
    costream.composite.statement  go to state 597
    statement                     go to state 456
    labeled.statement             go to state 343
    compound.statement            go to state 344
    lblock                        go to state 345
    rblock                        go to state 677
    expression.statement          go to state 348
    selection.statement           go to state 349
    iteration.statement           go to state 350
    jump.statement                go to state 351
    constant                      go to state 253
    string.literal.list           go to state 254


state 625

  374 compound.statement: lblock declaration.list rblock .

    $default  reduce using rule 374 (compound.statement)


state 626

  382 compound.statement.no.new.scope: '{' declaration.list statement.list '}' .

    $default  reduce using rule 382 (compound.statement.no.new.scope)


state 627

  251 unary.abstract.declarator: '*' pointer.type.qualifier.list abstract.declarator .

    $default  reduce using rule 251 (unary.abstract.declarator)


state 628

  252 postfix.abstract.declarator: '(' unary.abstract.declarator ')' .
  255                            | '(' unary.abstract.declarator ')' . postfixing.abstract.declarator

    '('  shift, and go to state 161
    '['  shift, and go to state 134

    $default  reduce using rule 252 (postfix.abstract.declarator)

    postfixing.abstract.declarator  go to state 678
    array.abstract.declarator       go to state 136


state 629

  253 postfix.abstract.declarator: '(' postfix.abstract.declarator ')' .

    $default  reduce using rule 253 (postfix.abstract.declarator)


state 630

  254 postfix.abstract.declarator: '(' postfixing.abstract.declarator ')' .

    $default  reduce using rule 254 (postfix.abstract.declarator)


state 631

  301 initializer.list: initializer .

    $default  reduce using rule 301 (initializer.list)


state 632

  298 initializer: '{' initializer.list . '}'
  299            | '{' initializer.list . ',' '}'
  302 initializer.list: initializer.list . ',' initializer

    '}'  shift, and go to state 679
    ','  shift, and go to state 680


state 633

  220 pointer.type.qualifier.list: pointer.type.qualifier.list . pointer.type.qualifier
  249 unary.abstract.declarator: '*' pointer.type.qualifier.list .
  251                          | '*' pointer.type.qualifier.list . abstract.declarator

    '*'       shift, and go to state 533
    '('       shift, and go to state 534
    '['       shift, and go to state 134
    CONST     shift, and go to state 60
    VOLATILE  shift, and go to state 61

    $default  reduce using rule 249 (unary.abstract.declarator)

    abstract.declarator             go to state 627
    unary.abstract.declarator       go to state 356
    postfix.abstract.declarator     go to state 357
    postfixing.abstract.declarator  go to state 358
    array.abstract.declarator       go to state 136
    pointer.type.qualifier          go to state 145


state 634

  104 cast.expression: '(' type.name ')' cast.expression .

    $default  reduce using rule 104 (cast.expression)


state 635

   68 primary.expression: '(' lblock declaration.list statement.list . rblock ')'
  386 statement.list: statement.list . statement

    error              shift, and go to state 321
    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    '{'                shift, and go to state 322
    '}'                shift, and go to state 510
    BREAK              shift, and go to state 324
    SWITCH             shift, and go to state 325
    CASE               shift, and go to state 326
    RETURN             shift, and go to state 327
    CONTINUE           shift, and go to state 328
    FOR                shift, and go to state 329
    DEFAULT            shift, and go to state 330
    GOTO               shift, and go to state 331
    SIZEOF             shift, and go to state 223
    DO                 shift, and go to state 332
    IF                 shift, and go to state 333
    WHILE              shift, and go to state 334
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 335
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    TYPEDEFname        shift, and go to state 517
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    ';'  reduce using rule 151 (expression.opt)

    primary.expression         go to state 236
    postfix.expression         go to state 237
    unary.expression           go to state 337
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 241
    additive.expression        go to state 242
    shift.expression           go to state 243
    relational.expression      go to state 244
    equality.expression        go to state 245
    AND.expression             go to state 246
    exclusive.OR.expression    go to state 247
    inclusive.OR.expression    go to state 248
    logical.AND.expression     go to state 249
    logical.OR.expression      go to state 250
    conditional.expression     go to state 338
    assignment.expression      go to state 339
    expression                 go to state 340
    expression.opt             go to state 341
    statement                  go to state 518
    labeled.statement          go to state 343
    compound.statement         go to state 344
    lblock                     go to state 345
    rblock                     go to state 681
    expression.statement       go to state 348
    selection.statement        go to state 349
    iteration.statement        go to state 350
    jump.statement             go to state 351
    constant                   go to state 253
    string.literal.list        go to state 254


state 636

   67 primary.expression: '(' lblock statement.list rblock . ')'

    ')'  shift, and go to state 682


state 637

   96 unary.expression: SIZEOF '(' type.name ')' .

    $default  reduce using rule 96 (unary.expression)


state 638

   77 postfix.expression: SPLITJOIN '(' IDENTIFIER ')' . lblock split.statement splitjoinPipeline.statement.list join.statement rblock
   78                   | SPLITJOIN '(' IDENTIFIER ')' . lblock declaration.list split.statement splitjoinPipeline.statement.list join.statement rblock
   79                   | SPLITJOIN '(' IDENTIFIER ')' . lblock declaration.list statement.list split.statement splitjoinPipeline.statement.list join.statement rblock

    '{'  shift, and go to state 322

    lblock  go to state 683


state 639

   80 postfix.expression: PIPELINE '(' IDENTIFIER ')' . lblock splitjoinPipeline.statement.list rblock
   81                   | PIPELINE '(' IDENTIFIER ')' . lblock declaration.list splitjoinPipeline.statement.list rblock

    '{'  shift, and go to state 322

    lblock  go to state 684


state 640

   47 operator.arguments: '(' . argument.expression.list ')'
   48                   | '(' . ')'

    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    ')'                shift, and go to state 685
    SIZEOF             shift, and go to state 223
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 227
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    primary.expression         go to state 236
    postfix.expression         go to state 237
    argument.expression.list   go to state 686
    unary.expression           go to state 337
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 241
    additive.expression        go to state 242
    shift.expression           go to state 243
    relational.expression      go to state 244
    equality.expression        go to state 245
    AND.expression             go to state 246
    exclusive.OR.expression    go to state 247
    inclusive.OR.expression    go to state 248
    logical.AND.expression     go to state 249
    logical.OR.expression      go to state 250
    conditional.expression     go to state 338
    assignment.expression      go to state 546
    constant                   go to state 253
    string.literal.list        go to state 254


state 641

   82 postfix.expression: FILEREADER '(' ')' operator.arguments .

    $default  reduce using rule 82 (postfix.expression)


state 642

   75 postfix.expression: postfix.expression '(' ')' operator.arguments .

    $default  reduce using rule 75 (postfix.expression)


state 643

   73 postfix.expression: postfix.expression '(' ')' operator.selfdefine.body .

    $default  reduce using rule 73 (postfix.expression)


state 644

   49 operator.selfdefine.body: lblock . operator.selfdefine.body.init.opt operator.selfdefine.body.work operator.selfdefine.body.window.list.opt rblock
   50                         | lblock . declaration.list operator.selfdefine.body.init.opt operator.selfdefine.body.work operator.selfdefine.body.window.list.opt rblock

    AUTO         shift, and go to state 3
    DOUBLE       shift, and go to state 4
    INT          shift, and go to state 5
    STRUCT       shift, and go to state 6
    LONG         shift, and go to state 7
    ENUM         shift, and go to state 8
    REGISTER     shift, and go to state 9
    TYPEDEF      shift, and go to state 10
    CHAR         shift, and go to state 11
    EXTERN       shift, and go to state 12
    UNION        shift, and go to state 13
    CONST        shift, and go to state 14
    FLOAT        shift, and go to state 15
    SHORT        shift, and go to state 16
    UNSIGNED     shift, and go to state 17
    SIGNED       shift, and go to state 18
    VOID         shift, and go to state 19
    VOLATILE     shift, and go to state 20
    STATIC       shift, and go to state 21
    STREAM       shift, and go to state 23
    INIT         shift, and go to state 687
    TYPEDEFname  shift, and go to state 25
    INLINE       shift, and go to state 26

    $default  reduce using rule 51 (operator.selfdefine.body.init.opt)

    stream.type.specifier              go to state 28
    operator.selfdefine.body.init.opt  go to state 688
    declaration                        go to state 258
    declaring.list                     go to state 32
    default.declaring.list             go to state 33
    declaration.specifier              go to state 259
    basic.declaration.specifier        go to state 35
    sue.declaration.specifier          go to state 36
    typedef.declaration.specifier      go to state 37
    declaration.qualifier.list         go to state 260
    type.specifier                     go to state 261
    basic.type.specifier               go to state 40
    sue.type.specifier                 go to state 41
    typedef.type.specifier             go to state 42
    type.qualifier.list                go to state 262
    elaborated.type.name               go to state 44
    struct.or.union.specifier          go to state 51
    struct.or.union                    go to state 52
    enum.specifier                     go to state 53
    declaration.list                   go to state 689
    type.qualifier                     go to state 57
    storage.class                      go to state 58
    basic.type.name                    go to state 59


state 645

   72 postfix.expression: postfix.expression '(' argument.expression.list ')' .
   74                   | postfix.expression '(' argument.expression.list ')' . operator.selfdefine.body
   76                   | postfix.expression '(' argument.expression.list ')' . operator.arguments

    '('  shift, and go to state 640
    '{'  shift, and go to state 322

    '('       [reduce using rule 72 (postfix.expression)]
    $default  reduce using rule 72 (postfix.expression)

    operator.arguments        go to state 690
    operator.selfdefine.body  go to state 691
    lblock                    go to state 644


state 646

   90 argument.expression.list: argument.expression.list ',' . assignment.expression

    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    SIZEOF             shift, and go to state 223
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 227
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    primary.expression         go to state 236
    postfix.expression         go to state 237
    unary.expression           go to state 337
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 241
    additive.expression        go to state 242
    shift.expression           go to state 243
    relational.expression      go to state 244
    equality.expression        go to state 245
    AND.expression             go to state 246
    exclusive.OR.expression    go to state 247
    inclusive.OR.expression    go to state 248
    logical.AND.expression     go to state 249
    logical.OR.expression      go to state 250
    conditional.expression     go to state 338
    assignment.expression      go to state 692
    constant                   go to state 253
    string.literal.list        go to state 254


state 647

   70 postfix.expression: postfix.expression '[' expression ']' .

    $default  reduce using rule 70 (postfix.expression)


state 648

  134 conditional.expression: logical.OR.expression '?' expression ':' . conditional.expression

    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    SIZEOF             shift, and go to state 223
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 227
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    primary.expression         go to state 236
    postfix.expression         go to state 237
    unary.expression           go to state 238
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 241
    additive.expression        go to state 242
    shift.expression           go to state 243
    relational.expression      go to state 244
    equality.expression        go to state 245
    AND.expression             go to state 246
    exclusive.OR.expression    go to state 247
    inclusive.OR.expression    go to state 248
    logical.AND.expression     go to state 249
    logical.OR.expression      go to state 250
    conditional.expression     go to state 693
    constant                   go to state 253
    string.literal.list        go to state 254


state 649

  343 struct.declarator: declarator bit.field.size.opt attributes.opt .

    $default  reduce using rule 343 (struct.declarator)


state 650

  345 struct.identifier.declarator: identifier.declarator bit.field.size.opt attributes.opt .

    $default  reduce using rule 345 (struct.identifier.declarator)


state 651

   11 composite.head.inout: INPUT composite.head.inout.member.list ',' OUTPUT . composite.head.inout.member.list

    STREAM  shift, and go to state 23

    stream.type.specifier             go to state 440
    composite.head.inout.member.list  go to state 694
    composite.head.inout.member       go to state 442


state 652

   16 composite.head.inout.member.list: composite.head.inout.member.list ',' composite.head.inout.member .

    $default  reduce using rule 16 (composite.head.inout.member.list)


state 653

   14 composite.head.inout: OUTPUT composite.head.inout.member.list ',' INPUT . composite.head.inout.member.list

    STREAM  shift, and go to state 23

    stream.type.specifier             go to state 440
    composite.head.inout.member.list  go to state 695
    composite.head.inout.member       go to state 442


state 654

    6 stream.declaration.list: stream.declaration.list ',' type.specifier paren.identifier.declarator postfixing.abstract.declarator .

    $default  reduce using rule 6 (stream.declaration.list)


state 655

   32 operator.splitjoin: SPLITJOIN lblock . split.statement splitjoinPipeline.statement.list join.statement rblock
   33                   | SPLITJOIN lblock . declaration.list split.statement splitjoinPipeline.statement.list join.statement rblock
   34                   | SPLITJOIN lblock . declaration.list statement.list split.statement splitjoinPipeline.statement.list join.statement rblock

    AUTO         shift, and go to state 3
    DOUBLE       shift, and go to state 4
    INT          shift, and go to state 5
    STRUCT       shift, and go to state 6
    LONG         shift, and go to state 7
    ENUM         shift, and go to state 8
    REGISTER     shift, and go to state 9
    TYPEDEF      shift, and go to state 10
    CHAR         shift, and go to state 11
    EXTERN       shift, and go to state 12
    UNION        shift, and go to state 13
    CONST        shift, and go to state 14
    FLOAT        shift, and go to state 15
    SHORT        shift, and go to state 16
    UNSIGNED     shift, and go to state 17
    SIGNED       shift, and go to state 18
    VOID         shift, and go to state 19
    VOLATILE     shift, and go to state 20
    STATIC       shift, and go to state 21
    STREAM       shift, and go to state 23
    SPLIT        shift, and go to state 696
    TYPEDEFname  shift, and go to state 25
    INLINE       shift, and go to state 26

    stream.type.specifier          go to state 28
    split.statement                go to state 697
    declaration                    go to state 258
    declaring.list                 go to state 32
    default.declaring.list         go to state 33
    declaration.specifier          go to state 259
    basic.declaration.specifier    go to state 35
    sue.declaration.specifier      go to state 36
    typedef.declaration.specifier  go to state 37
    declaration.qualifier.list     go to state 260
    type.specifier                 go to state 261
    basic.type.specifier           go to state 40
    sue.type.specifier             go to state 41
    typedef.type.specifier         go to state 42
    type.qualifier.list            go to state 262
    elaborated.type.name           go to state 44
    struct.or.union.specifier      go to state 51
    struct.or.union                go to state 52
    enum.specifier                 go to state 53
    declaration.list               go to state 698
    type.qualifier                 go to state 57
    storage.class                  go to state 58
    basic.type.name                go to state 59


state 656

   30 operator.pipeline: PIPELINE lblock . splitjoinPipeline.statement.list rblock
   31                  | PIPELINE lblock . declaration.list splitjoinPipeline.statement.list rblock

    error              shift, and go to state 321
    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    '{'                shift, and go to state 322
    AUTO               shift, and go to state 3
    DOUBLE             shift, and go to state 4
    INT                shift, and go to state 5
    STRUCT             shift, and go to state 6
    BREAK              shift, and go to state 324
    LONG               shift, and go to state 7
    SWITCH             shift, and go to state 325
    CASE               shift, and go to state 326
    ENUM               shift, and go to state 8
    REGISTER           shift, and go to state 9
    TYPEDEF            shift, and go to state 10
    CHAR               shift, and go to state 11
    EXTERN             shift, and go to state 12
    RETURN             shift, and go to state 327
    UNION              shift, and go to state 13
    CONST              shift, and go to state 14
    FLOAT              shift, and go to state 15
    SHORT              shift, and go to state 16
    UNSIGNED           shift, and go to state 17
    CONTINUE           shift, and go to state 328
    FOR                shift, and go to state 329
    SIGNED             shift, and go to state 18
    VOID               shift, and go to state 19
    DEFAULT            shift, and go to state 330
    GOTO               shift, and go to state 331
    SIZEOF             shift, and go to state 223
    VOLATILE           shift, and go to state 20
    DO                 shift, and go to state 332
    IF                 shift, and go to state 333
    STATIC             shift, and go to state 21
    WHILE              shift, and go to state 334
    STREAM             shift, and go to state 23
    ADD                shift, and go to state 449
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 335
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    TYPEDEFname        shift, and go to state 336
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235
    INLINE             shift, and go to state 26

    ';'  reduce using rule 151 (expression.opt)

    stream.type.specifier             go to state 28
    operator.add                      go to state 699
    splitjoinPipeline.statement.list  go to state 700
    primary.expression                go to state 236
    postfix.expression                go to state 237
    unary.expression                  go to state 337
    unary.operator                    go to state 239
    cast.expression                   go to state 240
    multiplicative.expression         go to state 241
    additive.expression               go to state 242
    shift.expression                  go to state 243
    relational.expression             go to state 244
    equality.expression               go to state 245
    AND.expression                    go to state 246
    exclusive.OR.expression           go to state 247
    inclusive.OR.expression           go to state 248
    logical.AND.expression            go to state 249
    logical.OR.expression             go to state 250
    conditional.expression            go to state 338
    assignment.expression             go to state 339
    expression                        go to state 340
    expression.opt                    go to state 341
    declaration                       go to state 258
    declaring.list                    go to state 32
    default.declaring.list            go to state 33
    declaration.specifier             go to state 259
    basic.declaration.specifier       go to state 35
    sue.declaration.specifier         go to state 36
    typedef.declaration.specifier     go to state 37
    declaration.qualifier.list        go to state 260
    type.specifier                    go to state 261
    basic.type.specifier              go to state 40
    sue.type.specifier                go to state 41
    typedef.type.specifier            go to state 42
    type.qualifier.list               go to state 262
    elaborated.type.name              go to state 44
    struct.or.union.specifier         go to state 51
    struct.or.union                   go to state 52
    enum.specifier                    go to state 53
    statement                         go to state 701
    labeled.statement                 go to state 343
    compound.statement                go to state 344
    lblock                            go to state 345
    declaration.list                  go to state 702
    expression.statement              go to state 348
    selection.statement               go to state 349
    iteration.statement               go to state 350
    jump.statement                    go to state 351
    constant                          go to state 253
    string.literal.list               go to state 254
    type.qualifier                    go to state 57
    storage.class                     go to state 58
    basic.type.name                   go to state 59


state 657

   46 operator.default.call: IDENTIFIER operator.arguments . ';'

    ';'  shift, and go to state 703


state 658

   26 operator.file.writer: FILEWRITER '(' IDENTIFIER . ')' operator.arguments ';'

    ')'  shift, and go to state 704


state 659

   19 composite.body.no.new.scope: '{' composite.body.param.opt declaration.list composite.body.statement.list '}' .

    $default  reduce using rule 19 (composite.body.no.new.scope)


state 660

  165 declaring.list: declaring.list ',' declarator @6 attributes.opt $@7 initializer.opt .

    $default  reduce using rule 165 (declaring.list)


state 661

  180 default.declaring.list: default.declaring.list ',' identifier.declarator @14 attributes.opt $@15 initializer.opt .

    $default  reduce using rule 180 (default.declaring.list)


state 662

  295 any.word: CONST .

    $default  reduce using rule 295 (any.word)


state 663

  293 any.word: IDENTIFIER .

    $default  reduce using rule 293 (any.word)


state 664

  294 any.word: TYPEDEFname .

    $default  reduce using rule 294 (any.word)


state 665

  287 attribute: ATTRIBUTE '(' '(' attribute.list . ')' ')'
  289 attribute.list: attribute.list . ',' attrib

    ')'  shift, and go to state 705
    ','  shift, and go to state 706


state 666

  288 attribute.list: attrib .

    $default  reduce using rule 288 (attribute.list)


state 667

  291 attrib: any.word .
  292       | any.word . '(' expression ')'

    '('  shift, and go to state 707

    $default  reduce using rule 291 (attrib)


state 668

  149 expression: expression . ',' assignment.expression
  391 selection.statement: SWITCH $@19 '(' expression . ')' statement

    ')'  shift, and go to state 708
    ','  shift, and go to state 508


state 669

  370 labeled.statement: CASE constant.expression ':' statement .

    $default  reduce using rule 370 (labeled.statement)


state 670

  405 iteration.statement: FOR '(' error ')' . $@26 costream.composite.statement

    $default  reduce using rule 404 ($@26)

    $@26  go to state 709


state 671

  399 iteration.statement: FOR '(' error ';' . expression.opt ';' expression.opt ')' $@23 costream.composite.statement

    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    SIZEOF             shift, and go to state 223
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 227
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    $default  reduce using rule 151 (expression.opt)

    primary.expression         go to state 236
    postfix.expression         go to state 237
    unary.expression           go to state 337
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 241
    additive.expression        go to state 242
    shift.expression           go to state 243
    relational.expression      go to state 244
    equality.expression        go to state 245
    AND.expression             go to state 246
    exclusive.OR.expression    go to state 247
    inclusive.OR.expression    go to state 248
    logical.AND.expression     go to state 249
    logical.OR.expression      go to state 250
    conditional.expression     go to state 338
    assignment.expression      go to state 339
    expression                 go to state 340
    expression.opt             go to state 710
    constant                   go to state 253
    string.literal.list        go to state 254


state 672

  397 iteration.statement: FOR '(' expression.opt ';' . expression.opt ';' expression.opt ')' $@22 costream.composite.statement
  401                    | FOR '(' expression.opt ';' . expression.opt ';' error ')' $@24 costream.composite.statement
  403                    | FOR '(' expression.opt ';' . error ';' expression.opt ')' $@25 costream.composite.statement

    error              shift, and go to state 711
    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    SIZEOF             shift, and go to state 223
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 227
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    ';'  reduce using rule 151 (expression.opt)

    primary.expression         go to state 236
    postfix.expression         go to state 237
    unary.expression           go to state 337
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 241
    additive.expression        go to state 242
    shift.expression           go to state 243
    relational.expression      go to state 244
    equality.expression        go to state 245
    AND.expression             go to state 246
    exclusive.OR.expression    go to state 247
    inclusive.OR.expression    go to state 248
    logical.AND.expression     go to state 249
    logical.OR.expression      go to state 250
    conditional.expression     go to state 338
    assignment.expression      go to state 339
    expression                 go to state 340
    expression.opt             go to state 712
    constant                   go to state 253
    string.literal.list        go to state 254


state 673

  395 iteration.statement: DO $@21 statement WHILE . '(' expression ')' ';'

    '('  shift, and go to state 713


state 674

  388 selection.statement: IF '(' expression ')' . costream.composite.statement
  389                    | IF '(' expression ')' . costream.composite.statement ELSE costream.composite.statement

    error              shift, and go to state 321
    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    '{'                shift, and go to state 322
    BREAK              shift, and go to state 324
    SWITCH             shift, and go to state 325
    CASE               shift, and go to state 326
    RETURN             shift, and go to state 327
    CONTINUE           shift, and go to state 328
    FOR                shift, and go to state 329
    DEFAULT            shift, and go to state 330
    GOTO               shift, and go to state 331
    SIZEOF             shift, and go to state 223
    DO                 shift, and go to state 332
    IF                 shift, and go to state 333
    WHILE              shift, and go to state 334
    ADD                shift, and go to state 449
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    FILEWRITER         shift, and go to state 450
    IDENTIFIER         shift, and go to state 335
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    TYPEDEFname        shift, and go to state 517
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    ';'  reduce using rule 151 (expression.opt)

    composite.body.operator       go to state 452
    operator.file.writer          go to state 453
    operator.add                  go to state 454
    primary.expression            go to state 236
    postfix.expression            go to state 237
    unary.expression              go to state 337
    unary.operator                go to state 239
    cast.expression               go to state 240
    multiplicative.expression     go to state 241
    additive.expression           go to state 242
    shift.expression              go to state 243
    relational.expression         go to state 244
    equality.expression           go to state 245
    AND.expression                go to state 246
    exclusive.OR.expression       go to state 247
    inclusive.OR.expression       go to state 248
    logical.AND.expression        go to state 249
    logical.OR.expression         go to state 250
    conditional.expression        go to state 338
    assignment.expression         go to state 339
    expression                    go to state 340
    expression.opt                go to state 341
    costream.composite.statement  go to state 714
    statement                     go to state 456
    labeled.statement             go to state 343
    compound.statement            go to state 344
    lblock                        go to state 345
    expression.statement          go to state 348
    selection.statement           go to state 349
    iteration.statement           go to state 350
    jump.statement                go to state 351
    constant                      go to state 253
    string.literal.list           go to state 254


state 675

  149 expression: expression . ',' assignment.expression
  393 iteration.statement: WHILE $@20 '(' expression . ')' statement

    ')'  shift, and go to state 715
    ','  shift, and go to state 508


state 676

  369 labeled.statement: IDENTIFIER ':' @18 statement .

    $default  reduce using rule 369 (labeled.statement)


state 677

  376 compound.statement: lblock declaration.list composite.body.statement.list rblock .

    $default  reduce using rule 376 (compound.statement)


state 678

  255 postfix.abstract.declarator: '(' unary.abstract.declarator ')' postfixing.abstract.declarator .

    $default  reduce using rule 255 (postfix.abstract.declarator)


state 679

  298 initializer: '{' initializer.list '}' .

    $default  reduce using rule 298 (initializer)


state 680

  299 initializer: '{' initializer.list ',' . '}'
  302 initializer.list: initializer.list ',' . initializer

    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    '{'                shift, and go to state 529
    '}'                shift, and go to state 716
    SIZEOF             shift, and go to state 223
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 227
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    primary.expression         go to state 236
    postfix.expression         go to state 237
    unary.expression           go to state 337
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 241
    additive.expression        go to state 242
    shift.expression           go to state 243
    relational.expression      go to state 244
    equality.expression        go to state 245
    AND.expression             go to state 246
    exclusive.OR.expression    go to state 247
    inclusive.OR.expression    go to state 248
    logical.AND.expression     go to state 249
    logical.OR.expression      go to state 250
    conditional.expression     go to state 338
    assignment.expression      go to state 530
    initializer                go to state 717
    constant                   go to state 253
    string.literal.list        go to state 254


state 681

   68 primary.expression: '(' lblock declaration.list statement.list rblock . ')'

    ')'  shift, and go to state 718


state 682

   67 primary.expression: '(' lblock statement.list rblock ')' .

    $default  reduce using rule 67 (primary.expression)


state 683

   77 postfix.expression: SPLITJOIN '(' IDENTIFIER ')' lblock . split.statement splitjoinPipeline.statement.list join.statement rblock
   78                   | SPLITJOIN '(' IDENTIFIER ')' lblock . declaration.list split.statement splitjoinPipeline.statement.list join.statement rblock
   79                   | SPLITJOIN '(' IDENTIFIER ')' lblock . declaration.list statement.list split.statement splitjoinPipeline.statement.list join.statement rblock

    AUTO         shift, and go to state 3
    DOUBLE       shift, and go to state 4
    INT          shift, and go to state 5
    STRUCT       shift, and go to state 6
    LONG         shift, and go to state 7
    ENUM         shift, and go to state 8
    REGISTER     shift, and go to state 9
    TYPEDEF      shift, and go to state 10
    CHAR         shift, and go to state 11
    EXTERN       shift, and go to state 12
    UNION        shift, and go to state 13
    CONST        shift, and go to state 14
    FLOAT        shift, and go to state 15
    SHORT        shift, and go to state 16
    UNSIGNED     shift, and go to state 17
    SIGNED       shift, and go to state 18
    VOID         shift, and go to state 19
    VOLATILE     shift, and go to state 20
    STATIC       shift, and go to state 21
    STREAM       shift, and go to state 23
    SPLIT        shift, and go to state 696
    TYPEDEFname  shift, and go to state 25
    INLINE       shift, and go to state 26

    stream.type.specifier          go to state 28
    split.statement                go to state 719
    declaration                    go to state 258
    declaring.list                 go to state 32
    default.declaring.list         go to state 33
    declaration.specifier          go to state 259
    basic.declaration.specifier    go to state 35
    sue.declaration.specifier      go to state 36
    typedef.declaration.specifier  go to state 37
    declaration.qualifier.list     go to state 260
    type.specifier                 go to state 261
    basic.type.specifier           go to state 40
    sue.type.specifier             go to state 41
    typedef.type.specifier         go to state 42
    type.qualifier.list            go to state 262
    elaborated.type.name           go to state 44
    struct.or.union.specifier      go to state 51
    struct.or.union                go to state 52
    enum.specifier                 go to state 53
    declaration.list               go to state 720
    type.qualifier                 go to state 57
    storage.class                  go to state 58
    basic.type.name                go to state 59


state 684

   80 postfix.expression: PIPELINE '(' IDENTIFIER ')' lblock . splitjoinPipeline.statement.list rblock
   81                   | PIPELINE '(' IDENTIFIER ')' lblock . declaration.list splitjoinPipeline.statement.list rblock

    error              shift, and go to state 321
    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    '{'                shift, and go to state 322
    AUTO               shift, and go to state 3
    DOUBLE             shift, and go to state 4
    INT                shift, and go to state 5
    STRUCT             shift, and go to state 6
    BREAK              shift, and go to state 324
    LONG               shift, and go to state 7
    SWITCH             shift, and go to state 325
    CASE               shift, and go to state 326
    ENUM               shift, and go to state 8
    REGISTER           shift, and go to state 9
    TYPEDEF            shift, and go to state 10
    CHAR               shift, and go to state 11
    EXTERN             shift, and go to state 12
    RETURN             shift, and go to state 327
    UNION              shift, and go to state 13
    CONST              shift, and go to state 14
    FLOAT              shift, and go to state 15
    SHORT              shift, and go to state 16
    UNSIGNED           shift, and go to state 17
    CONTINUE           shift, and go to state 328
    FOR                shift, and go to state 329
    SIGNED             shift, and go to state 18
    VOID               shift, and go to state 19
    DEFAULT            shift, and go to state 330
    GOTO               shift, and go to state 331
    SIZEOF             shift, and go to state 223
    VOLATILE           shift, and go to state 20
    DO                 shift, and go to state 332
    IF                 shift, and go to state 333
    STATIC             shift, and go to state 21
    WHILE              shift, and go to state 334
    STREAM             shift, and go to state 23
    ADD                shift, and go to state 449
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 335
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    TYPEDEFname        shift, and go to state 336
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235
    INLINE             shift, and go to state 26

    ';'  reduce using rule 151 (expression.opt)

    stream.type.specifier             go to state 28
    operator.add                      go to state 699
    splitjoinPipeline.statement.list  go to state 721
    primary.expression                go to state 236
    postfix.expression                go to state 237
    unary.expression                  go to state 337
    unary.operator                    go to state 239
    cast.expression                   go to state 240
    multiplicative.expression         go to state 241
    additive.expression               go to state 242
    shift.expression                  go to state 243
    relational.expression             go to state 244
    equality.expression               go to state 245
    AND.expression                    go to state 246
    exclusive.OR.expression           go to state 247
    inclusive.OR.expression           go to state 248
    logical.AND.expression            go to state 249
    logical.OR.expression             go to state 250
    conditional.expression            go to state 338
    assignment.expression             go to state 339
    expression                        go to state 340
    expression.opt                    go to state 341
    declaration                       go to state 258
    declaring.list                    go to state 32
    default.declaring.list            go to state 33
    declaration.specifier             go to state 259
    basic.declaration.specifier       go to state 35
    sue.declaration.specifier         go to state 36
    typedef.declaration.specifier     go to state 37
    declaration.qualifier.list        go to state 260
    type.specifier                    go to state 261
    basic.type.specifier              go to state 40
    sue.type.specifier                go to state 41
    typedef.type.specifier            go to state 42
    type.qualifier.list               go to state 262
    elaborated.type.name              go to state 44
    struct.or.union.specifier         go to state 51
    struct.or.union                   go to state 52
    enum.specifier                    go to state 53
    statement                         go to state 701
    labeled.statement                 go to state 343
    compound.statement                go to state 344
    lblock                            go to state 345
    declaration.list                  go to state 722
    expression.statement              go to state 348
    selection.statement               go to state 349
    iteration.statement               go to state 350
    jump.statement                    go to state 351
    constant                          go to state 253
    string.literal.list               go to state 254
    type.qualifier                    go to state 57
    storage.class                     go to state 58
    basic.type.name                   go to state 59


state 685

   48 operator.arguments: '(' ')' .

    $default  reduce using rule 48 (operator.arguments)


state 686

   47 operator.arguments: '(' argument.expression.list . ')'
   90 argument.expression.list: argument.expression.list . ',' assignment.expression

    ')'  shift, and go to state 723
    ','  shift, and go to state 646


state 687

   52 operator.selfdefine.body.init.opt: INIT . compound.statement

    '{'  shift, and go to state 322

    compound.statement  go to state 724
    lblock              go to state 345


state 688

   49 operator.selfdefine.body: lblock operator.selfdefine.body.init.opt . operator.selfdefine.body.work operator.selfdefine.body.window.list.opt rblock

    WORK  shift, and go to state 725

    operator.selfdefine.body.work  go to state 726


state 689

   50 operator.selfdefine.body: lblock declaration.list . operator.selfdefine.body.init.opt operator.selfdefine.body.work operator.selfdefine.body.window.list.opt rblock
  384 declaration.list: declaration.list . declaration

    AUTO         shift, and go to state 3
    DOUBLE       shift, and go to state 4
    INT          shift, and go to state 5
    STRUCT       shift, and go to state 6
    LONG         shift, and go to state 7
    ENUM         shift, and go to state 8
    REGISTER     shift, and go to state 9
    TYPEDEF      shift, and go to state 10
    CHAR         shift, and go to state 11
    EXTERN       shift, and go to state 12
    UNION        shift, and go to state 13
    CONST        shift, and go to state 14
    FLOAT        shift, and go to state 15
    SHORT        shift, and go to state 16
    UNSIGNED     shift, and go to state 17
    SIGNED       shift, and go to state 18
    VOID         shift, and go to state 19
    VOLATILE     shift, and go to state 20
    STATIC       shift, and go to state 21
    STREAM       shift, and go to state 23
    INIT         shift, and go to state 687
    TYPEDEFname  shift, and go to state 25
    INLINE       shift, and go to state 26

    $default  reduce using rule 51 (operator.selfdefine.body.init.opt)

    stream.type.specifier              go to state 28
    operator.selfdefine.body.init.opt  go to state 727
    declaration                        go to state 420
    declaring.list                     go to state 32
    default.declaring.list             go to state 33
    declaration.specifier              go to state 259
    basic.declaration.specifier        go to state 35
    sue.declaration.specifier          go to state 36
    typedef.declaration.specifier      go to state 37
    declaration.qualifier.list         go to state 260
    type.specifier                     go to state 261
    basic.type.specifier               go to state 40
    sue.type.specifier                 go to state 41
    typedef.type.specifier             go to state 42
    type.qualifier.list                go to state 262
    elaborated.type.name               go to state 44
    struct.or.union.specifier          go to state 51
    struct.or.union                    go to state 52
    enum.specifier                     go to state 53
    type.qualifier                     go to state 57
    storage.class                      go to state 58
    basic.type.name                    go to state 59


state 690

   76 postfix.expression: postfix.expression '(' argument.expression.list ')' operator.arguments .

    $default  reduce using rule 76 (postfix.expression)


state 691

   74 postfix.expression: postfix.expression '(' argument.expression.list ')' operator.selfdefine.body .

    $default  reduce using rule 74 (postfix.expression)


state 692

   90 argument.expression.list: argument.expression.list ',' assignment.expression .

    $default  reduce using rule 90 (argument.expression.list)


state 693

  134 conditional.expression: logical.OR.expression '?' expression ':' conditional.expression .

    $default  reduce using rule 134 (conditional.expression)


state 694

   11 composite.head.inout: INPUT composite.head.inout.member.list ',' OUTPUT composite.head.inout.member.list .
   16 composite.head.inout.member.list: composite.head.inout.member.list . ',' composite.head.inout.member

    ','  shift, and go to state 728

    $default  reduce using rule 11 (composite.head.inout)


state 695

   14 composite.head.inout: OUTPUT composite.head.inout.member.list ',' INPUT composite.head.inout.member.list .
   16 composite.head.inout.member.list: composite.head.inout.member.list . ',' composite.head.inout.member

    ','  shift, and go to state 728

    $default  reduce using rule 14 (composite.head.inout)


state 696

   35 split.statement: SPLIT . duplicate.statement
   36                | SPLIT . roundrobin.statement

    DUPLICATE   shift, and go to state 729
    ROUNDROBIN  shift, and go to state 730

    roundrobin.statement  go to state 731
    duplicate.statement   go to state 732


state 697

   32 operator.splitjoin: SPLITJOIN lblock split.statement . splitjoinPipeline.statement.list join.statement rblock

    error              shift, and go to state 321
    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    '{'                shift, and go to state 322
    BREAK              shift, and go to state 324
    SWITCH             shift, and go to state 325
    CASE               shift, and go to state 326
    RETURN             shift, and go to state 327
    CONTINUE           shift, and go to state 328
    FOR                shift, and go to state 329
    DEFAULT            shift, and go to state 330
    GOTO               shift, and go to state 331
    SIZEOF             shift, and go to state 223
    DO                 shift, and go to state 332
    IF                 shift, and go to state 333
    WHILE              shift, and go to state 334
    ADD                shift, and go to state 449
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 335
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    TYPEDEFname        shift, and go to state 517
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    ';'  reduce using rule 151 (expression.opt)

    operator.add                      go to state 699
    splitjoinPipeline.statement.list  go to state 733
    primary.expression                go to state 236
    postfix.expression                go to state 237
    unary.expression                  go to state 337
    unary.operator                    go to state 239
    cast.expression                   go to state 240
    multiplicative.expression         go to state 241
    additive.expression               go to state 242
    shift.expression                  go to state 243
    relational.expression             go to state 244
    equality.expression               go to state 245
    AND.expression                    go to state 246
    exclusive.OR.expression           go to state 247
    inclusive.OR.expression           go to state 248
    logical.AND.expression            go to state 249
    logical.OR.expression             go to state 250
    conditional.expression            go to state 338
    assignment.expression             go to state 339
    expression                        go to state 340
    expression.opt                    go to state 341
    statement                         go to state 701
    labeled.statement                 go to state 343
    compound.statement                go to state 344
    lblock                            go to state 345
    expression.statement              go to state 348
    selection.statement               go to state 349
    iteration.statement               go to state 350
    jump.statement                    go to state 351
    constant                          go to state 253
    string.literal.list               go to state 254


state 698

   33 operator.splitjoin: SPLITJOIN lblock declaration.list . split.statement splitjoinPipeline.statement.list join.statement rblock
   34                   | SPLITJOIN lblock declaration.list . statement.list split.statement splitjoinPipeline.statement.list join.statement rblock
  384 declaration.list: declaration.list . declaration

    error              shift, and go to state 321
    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    '{'                shift, and go to state 322
    AUTO               shift, and go to state 3
    DOUBLE             shift, and go to state 4
    INT                shift, and go to state 5
    STRUCT             shift, and go to state 6
    BREAK              shift, and go to state 324
    LONG               shift, and go to state 7
    SWITCH             shift, and go to state 325
    CASE               shift, and go to state 326
    ENUM               shift, and go to state 8
    REGISTER           shift, and go to state 9
    TYPEDEF            shift, and go to state 10
    CHAR               shift, and go to state 11
    EXTERN             shift, and go to state 12
    RETURN             shift, and go to state 327
    UNION              shift, and go to state 13
    CONST              shift, and go to state 14
    FLOAT              shift, and go to state 15
    SHORT              shift, and go to state 16
    UNSIGNED           shift, and go to state 17
    CONTINUE           shift, and go to state 328
    FOR                shift, and go to state 329
    SIGNED             shift, and go to state 18
    VOID               shift, and go to state 19
    DEFAULT            shift, and go to state 330
    GOTO               shift, and go to state 331
    SIZEOF             shift, and go to state 223
    VOLATILE           shift, and go to state 20
    DO                 shift, and go to state 332
    IF                 shift, and go to state 333
    STATIC             shift, and go to state 21
    WHILE              shift, and go to state 334
    STREAM             shift, and go to state 23
    SPLITJOIN          shift, and go to state 224
    SPLIT              shift, and go to state 696
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 335
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    TYPEDEFname        shift, and go to state 336
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235
    INLINE             shift, and go to state 26

    ';'  reduce using rule 151 (expression.opt)

    stream.type.specifier          go to state 28
    split.statement                go to state 734
    primary.expression             go to state 236
    postfix.expression             go to state 237
    unary.expression               go to state 337
    unary.operator                 go to state 239
    cast.expression                go to state 240
    multiplicative.expression      go to state 241
    additive.expression            go to state 242
    shift.expression               go to state 243
    relational.expression          go to state 244
    equality.expression            go to state 245
    AND.expression                 go to state 246
    exclusive.OR.expression        go to state 247
    inclusive.OR.expression        go to state 248
    logical.AND.expression         go to state 249
    logical.OR.expression          go to state 250
    conditional.expression         go to state 338
    assignment.expression          go to state 339
    expression                     go to state 340
    expression.opt                 go to state 341
    declaration                    go to state 420
    declaring.list                 go to state 32
    default.declaring.list         go to state 33
    declaration.specifier          go to state 259
    basic.declaration.specifier    go to state 35
    sue.declaration.specifier      go to state 36
    typedef.declaration.specifier  go to state 37
    declaration.qualifier.list     go to state 260
    type.specifier                 go to state 261
    basic.type.specifier           go to state 40
    sue.type.specifier             go to state 41
    typedef.type.specifier         go to state 42
    type.qualifier.list            go to state 262
    elaborated.type.name           go to state 44
    struct.or.union.specifier      go to state 51
    struct.or.union                go to state 52
    enum.specifier                 go to state 53
    statement                      go to state 342
    labeled.statement              go to state 343
    compound.statement             go to state 344
    lblock                         go to state 345
    statement.list                 go to state 735
    expression.statement           go to state 348
    selection.statement            go to state 349
    iteration.statement            go to state 350
    jump.statement                 go to state 351
    constant                       go to state 253
    string.literal.list            go to state 254
    type.qualifier                 go to state 57
    storage.class                  go to state 58
    basic.type.name                go to state 59


state 699

   38 splitjoinPipeline.statement.list: operator.add .

    $default  reduce using rule 38 (splitjoinPipeline.statement.list)


state 700

   30 operator.pipeline: PIPELINE lblock splitjoinPipeline.statement.list . rblock
   39 splitjoinPipeline.statement.list: splitjoinPipeline.statement.list . statement
   40                                 | splitjoinPipeline.statement.list . operator.add

    error              shift, and go to state 321
    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    '{'                shift, and go to state 322
    '}'                shift, and go to state 510
    BREAK              shift, and go to state 324
    SWITCH             shift, and go to state 325
    CASE               shift, and go to state 326
    RETURN             shift, and go to state 327
    CONTINUE           shift, and go to state 328
    FOR                shift, and go to state 329
    DEFAULT            shift, and go to state 330
    GOTO               shift, and go to state 331
    SIZEOF             shift, and go to state 223
    DO                 shift, and go to state 332
    IF                 shift, and go to state 333
    WHILE              shift, and go to state 334
    ADD                shift, and go to state 449
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 335
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    TYPEDEFname        shift, and go to state 517
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    ';'  reduce using rule 151 (expression.opt)

    operator.add               go to state 736
    primary.expression         go to state 236
    postfix.expression         go to state 237
    unary.expression           go to state 337
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 241
    additive.expression        go to state 242
    shift.expression           go to state 243
    relational.expression      go to state 244
    equality.expression        go to state 245
    AND.expression             go to state 246
    exclusive.OR.expression    go to state 247
    inclusive.OR.expression    go to state 248
    logical.AND.expression     go to state 249
    logical.OR.expression      go to state 250
    conditional.expression     go to state 338
    assignment.expression      go to state 339
    expression                 go to state 340
    expression.opt             go to state 341
    statement                  go to state 737
    labeled.statement          go to state 343
    compound.statement         go to state 344
    lblock                     go to state 345
    rblock                     go to state 738
    expression.statement       go to state 348
    selection.statement        go to state 349
    iteration.statement        go to state 350
    jump.statement             go to state 351
    constant                   go to state 253
    string.literal.list        go to state 254


state 701

   37 splitjoinPipeline.statement.list: statement .

    $default  reduce using rule 37 (splitjoinPipeline.statement.list)


state 702

   31 operator.pipeline: PIPELINE lblock declaration.list . splitjoinPipeline.statement.list rblock
  384 declaration.list: declaration.list . declaration

    error              shift, and go to state 321
    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    '{'                shift, and go to state 322
    AUTO               shift, and go to state 3
    DOUBLE             shift, and go to state 4
    INT                shift, and go to state 5
    STRUCT             shift, and go to state 6
    BREAK              shift, and go to state 324
    LONG               shift, and go to state 7
    SWITCH             shift, and go to state 325
    CASE               shift, and go to state 326
    ENUM               shift, and go to state 8
    REGISTER           shift, and go to state 9
    TYPEDEF            shift, and go to state 10
    CHAR               shift, and go to state 11
    EXTERN             shift, and go to state 12
    RETURN             shift, and go to state 327
    UNION              shift, and go to state 13
    CONST              shift, and go to state 14
    FLOAT              shift, and go to state 15
    SHORT              shift, and go to state 16
    UNSIGNED           shift, and go to state 17
    CONTINUE           shift, and go to state 328
    FOR                shift, and go to state 329
    SIGNED             shift, and go to state 18
    VOID               shift, and go to state 19
    DEFAULT            shift, and go to state 330
    GOTO               shift, and go to state 331
    SIZEOF             shift, and go to state 223
    VOLATILE           shift, and go to state 20
    DO                 shift, and go to state 332
    IF                 shift, and go to state 333
    STATIC             shift, and go to state 21
    WHILE              shift, and go to state 334
    STREAM             shift, and go to state 23
    ADD                shift, and go to state 449
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 335
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    TYPEDEFname        shift, and go to state 336
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235
    INLINE             shift, and go to state 26

    ';'  reduce using rule 151 (expression.opt)

    stream.type.specifier             go to state 28
    operator.add                      go to state 699
    splitjoinPipeline.statement.list  go to state 739
    primary.expression                go to state 236
    postfix.expression                go to state 237
    unary.expression                  go to state 337
    unary.operator                    go to state 239
    cast.expression                   go to state 240
    multiplicative.expression         go to state 241
    additive.expression               go to state 242
    shift.expression                  go to state 243
    relational.expression             go to state 244
    equality.expression               go to state 245
    AND.expression                    go to state 246
    exclusive.OR.expression           go to state 247
    inclusive.OR.expression           go to state 248
    logical.AND.expression            go to state 249
    logical.OR.expression             go to state 250
    conditional.expression            go to state 338
    assignment.expression             go to state 339
    expression                        go to state 340
    expression.opt                    go to state 341
    declaration                       go to state 420
    declaring.list                    go to state 32
    default.declaring.list            go to state 33
    declaration.specifier             go to state 259
    basic.declaration.specifier       go to state 35
    sue.declaration.specifier         go to state 36
    typedef.declaration.specifier     go to state 37
    declaration.qualifier.list        go to state 260
    type.specifier                    go to state 261
    basic.type.specifier              go to state 40
    sue.type.specifier                go to state 41
    typedef.type.specifier            go to state 42
    type.qualifier.list               go to state 262
    elaborated.type.name              go to state 44
    struct.or.union.specifier         go to state 51
    struct.or.union                   go to state 52
    enum.specifier                    go to state 53
    statement                         go to state 701
    labeled.statement                 go to state 343
    compound.statement                go to state 344
    lblock                            go to state 345
    expression.statement              go to state 348
    selection.statement               go to state 349
    iteration.statement               go to state 350
    jump.statement                    go to state 351
    constant                          go to state 253
    string.literal.list               go to state 254
    type.qualifier                    go to state 57
    storage.class                     go to state 58
    basic.type.name                   go to state 59


state 703

   46 operator.default.call: IDENTIFIER operator.arguments ';' .

    $default  reduce using rule 46 (operator.default.call)


state 704

   26 operator.file.writer: FILEWRITER '(' IDENTIFIER ')' . operator.arguments ';'

    '('  shift, and go to state 640

    operator.arguments  go to state 740


state 705

  287 attribute: ATTRIBUTE '(' '(' attribute.list ')' . ')'

    ')'  shift, and go to state 741


state 706

  289 attribute.list: attribute.list ',' . attrib

    CONST        shift, and go to state 662
    IDENTIFIER   shift, and go to state 663
    TYPEDEFname  shift, and go to state 664

    $default  reduce using rule 290 (attrib)

    attrib    go to state 742
    any.word  go to state 667


state 707

  292 attrib: any.word '(' . expression ')'

    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    SIZEOF             shift, and go to state 223
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 227
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    primary.expression         go to state 236
    postfix.expression         go to state 237
    unary.expression           go to state 337
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 241
    additive.expression        go to state 242
    shift.expression           go to state 243
    relational.expression      go to state 244
    equality.expression        go to state 245
    AND.expression             go to state 246
    exclusive.OR.expression    go to state 247
    inclusive.OR.expression    go to state 248
    logical.AND.expression     go to state 249
    logical.OR.expression      go to state 250
    conditional.expression     go to state 338
    assignment.expression      go to state 339
    expression                 go to state 743
    constant                   go to state 253
    string.literal.list        go to state 254


state 708

  391 selection.statement: SWITCH $@19 '(' expression ')' . statement

    error              shift, and go to state 321
    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    '{'                shift, and go to state 322
    BREAK              shift, and go to state 324
    SWITCH             shift, and go to state 325
    CASE               shift, and go to state 326
    RETURN             shift, and go to state 327
    CONTINUE           shift, and go to state 328
    FOR                shift, and go to state 329
    DEFAULT            shift, and go to state 330
    GOTO               shift, and go to state 331
    SIZEOF             shift, and go to state 223
    DO                 shift, and go to state 332
    IF                 shift, and go to state 333
    WHILE              shift, and go to state 334
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 335
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    TYPEDEFname        shift, and go to state 517
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    ';'  reduce using rule 151 (expression.opt)

    primary.expression         go to state 236
    postfix.expression         go to state 237
    unary.expression           go to state 337
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 241
    additive.expression        go to state 242
    shift.expression           go to state 243
    relational.expression      go to state 244
    equality.expression        go to state 245
    AND.expression             go to state 246
    exclusive.OR.expression    go to state 247
    inclusive.OR.expression    go to state 248
    logical.AND.expression     go to state 249
    logical.OR.expression      go to state 250
    conditional.expression     go to state 338
    assignment.expression      go to state 339
    expression                 go to state 340
    expression.opt             go to state 341
    statement                  go to state 744
    labeled.statement          go to state 343
    compound.statement         go to state 344
    lblock                     go to state 345
    expression.statement       go to state 348
    selection.statement        go to state 349
    iteration.statement        go to state 350
    jump.statement             go to state 351
    constant                   go to state 253
    string.literal.list        go to state 254


state 709

  405 iteration.statement: FOR '(' error ')' $@26 . costream.composite.statement

    error              shift, and go to state 321
    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    '{'                shift, and go to state 322
    BREAK              shift, and go to state 324
    SWITCH             shift, and go to state 325
    CASE               shift, and go to state 326
    RETURN             shift, and go to state 327
    CONTINUE           shift, and go to state 328
    FOR                shift, and go to state 329
    DEFAULT            shift, and go to state 330
    GOTO               shift, and go to state 331
    SIZEOF             shift, and go to state 223
    DO                 shift, and go to state 332
    IF                 shift, and go to state 333
    WHILE              shift, and go to state 334
    ADD                shift, and go to state 449
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    FILEWRITER         shift, and go to state 450
    IDENTIFIER         shift, and go to state 335
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    TYPEDEFname        shift, and go to state 517
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    ';'  reduce using rule 151 (expression.opt)

    composite.body.operator       go to state 452
    operator.file.writer          go to state 453
    operator.add                  go to state 454
    primary.expression            go to state 236
    postfix.expression            go to state 237
    unary.expression              go to state 337
    unary.operator                go to state 239
    cast.expression               go to state 240
    multiplicative.expression     go to state 241
    additive.expression           go to state 242
    shift.expression              go to state 243
    relational.expression         go to state 244
    equality.expression           go to state 245
    AND.expression                go to state 246
    exclusive.OR.expression       go to state 247
    inclusive.OR.expression       go to state 248
    logical.AND.expression        go to state 249
    logical.OR.expression         go to state 250
    conditional.expression        go to state 338
    assignment.expression         go to state 339
    expression                    go to state 340
    expression.opt                go to state 341
    costream.composite.statement  go to state 745
    statement                     go to state 456
    labeled.statement             go to state 343
    compound.statement            go to state 344
    lblock                        go to state 345
    expression.statement          go to state 348
    selection.statement           go to state 349
    iteration.statement           go to state 350
    jump.statement                go to state 351
    constant                      go to state 253
    string.literal.list           go to state 254


state 710

  399 iteration.statement: FOR '(' error ';' expression.opt . ';' expression.opt ')' $@23 costream.composite.statement

    ';'  shift, and go to state 746


state 711

  403 iteration.statement: FOR '(' expression.opt ';' error . ';' expression.opt ')' $@25 costream.composite.statement

    ';'  shift, and go to state 747


state 712

  397 iteration.statement: FOR '(' expression.opt ';' expression.opt . ';' expression.opt ')' $@22 costream.composite.statement
  401                    | FOR '(' expression.opt ';' expression.opt . ';' error ')' $@24 costream.composite.statement

    ';'  shift, and go to state 748


state 713

  395 iteration.statement: DO $@21 statement WHILE '(' . expression ')' ';'

    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    SIZEOF             shift, and go to state 223
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 227
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    primary.expression         go to state 236
    postfix.expression         go to state 237
    unary.expression           go to state 337
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 241
    additive.expression        go to state 242
    shift.expression           go to state 243
    relational.expression      go to state 244
    equality.expression        go to state 245
    AND.expression             go to state 246
    exclusive.OR.expression    go to state 247
    inclusive.OR.expression    go to state 248
    logical.AND.expression     go to state 249
    logical.OR.expression      go to state 250
    conditional.expression     go to state 338
    assignment.expression      go to state 339
    expression                 go to state 749
    constant                   go to state 253
    string.literal.list        go to state 254


state 714

  388 selection.statement: IF '(' expression ')' costream.composite.statement .
  389                    | IF '(' expression ')' costream.composite.statement . ELSE costream.composite.statement

    ELSE  shift, and go to state 750

    ELSE      [reduce using rule 388 (selection.statement)]
    $default  reduce using rule 388 (selection.statement)


state 715

  393 iteration.statement: WHILE $@20 '(' expression ')' . statement

    error              shift, and go to state 321
    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    '{'                shift, and go to state 322
    BREAK              shift, and go to state 324
    SWITCH             shift, and go to state 325
    CASE               shift, and go to state 326
    RETURN             shift, and go to state 327
    CONTINUE           shift, and go to state 328
    FOR                shift, and go to state 329
    DEFAULT            shift, and go to state 330
    GOTO               shift, and go to state 331
    SIZEOF             shift, and go to state 223
    DO                 shift, and go to state 332
    IF                 shift, and go to state 333
    WHILE              shift, and go to state 334
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 335
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    TYPEDEFname        shift, and go to state 517
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    ';'  reduce using rule 151 (expression.opt)

    primary.expression         go to state 236
    postfix.expression         go to state 237
    unary.expression           go to state 337
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 241
    additive.expression        go to state 242
    shift.expression           go to state 243
    relational.expression      go to state 244
    equality.expression        go to state 245
    AND.expression             go to state 246
    exclusive.OR.expression    go to state 247
    inclusive.OR.expression    go to state 248
    logical.AND.expression     go to state 249
    logical.OR.expression      go to state 250
    conditional.expression     go to state 338
    assignment.expression      go to state 339
    expression                 go to state 340
    expression.opt             go to state 341
    statement                  go to state 751
    labeled.statement          go to state 343
    compound.statement         go to state 344
    lblock                     go to state 345
    expression.statement       go to state 348
    selection.statement        go to state 349
    iteration.statement        go to state 350
    jump.statement             go to state 351
    constant                   go to state 253
    string.literal.list        go to state 254


state 716

  299 initializer: '{' initializer.list ',' '}' .

    $default  reduce using rule 299 (initializer)


state 717

  302 initializer.list: initializer.list ',' initializer .

    $default  reduce using rule 302 (initializer.list)


state 718

   68 primary.expression: '(' lblock declaration.list statement.list rblock ')' .

    $default  reduce using rule 68 (primary.expression)


state 719

   77 postfix.expression: SPLITJOIN '(' IDENTIFIER ')' lblock split.statement . splitjoinPipeline.statement.list join.statement rblock

    error              shift, and go to state 321
    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    '{'                shift, and go to state 322
    BREAK              shift, and go to state 324
    SWITCH             shift, and go to state 325
    CASE               shift, and go to state 326
    RETURN             shift, and go to state 327
    CONTINUE           shift, and go to state 328
    FOR                shift, and go to state 329
    DEFAULT            shift, and go to state 330
    GOTO               shift, and go to state 331
    SIZEOF             shift, and go to state 223
    DO                 shift, and go to state 332
    IF                 shift, and go to state 333
    WHILE              shift, and go to state 334
    ADD                shift, and go to state 449
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 335
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    TYPEDEFname        shift, and go to state 517
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    ';'  reduce using rule 151 (expression.opt)

    operator.add                      go to state 699
    splitjoinPipeline.statement.list  go to state 752
    primary.expression                go to state 236
    postfix.expression                go to state 237
    unary.expression                  go to state 337
    unary.operator                    go to state 239
    cast.expression                   go to state 240
    multiplicative.expression         go to state 241
    additive.expression               go to state 242
    shift.expression                  go to state 243
    relational.expression             go to state 244
    equality.expression               go to state 245
    AND.expression                    go to state 246
    exclusive.OR.expression           go to state 247
    inclusive.OR.expression           go to state 248
    logical.AND.expression            go to state 249
    logical.OR.expression             go to state 250
    conditional.expression            go to state 338
    assignment.expression             go to state 339
    expression                        go to state 340
    expression.opt                    go to state 341
    statement                         go to state 701
    labeled.statement                 go to state 343
    compound.statement                go to state 344
    lblock                            go to state 345
    expression.statement              go to state 348
    selection.statement               go to state 349
    iteration.statement               go to state 350
    jump.statement                    go to state 351
    constant                          go to state 253
    string.literal.list               go to state 254


state 720

   78 postfix.expression: SPLITJOIN '(' IDENTIFIER ')' lblock declaration.list . split.statement splitjoinPipeline.statement.list join.statement rblock
   79                   | SPLITJOIN '(' IDENTIFIER ')' lblock declaration.list . statement.list split.statement splitjoinPipeline.statement.list join.statement rblock
  384 declaration.list: declaration.list . declaration

    error              shift, and go to state 321
    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    '{'                shift, and go to state 322
    AUTO               shift, and go to state 3
    DOUBLE             shift, and go to state 4
    INT                shift, and go to state 5
    STRUCT             shift, and go to state 6
    BREAK              shift, and go to state 324
    LONG               shift, and go to state 7
    SWITCH             shift, and go to state 325
    CASE               shift, and go to state 326
    ENUM               shift, and go to state 8
    REGISTER           shift, and go to state 9
    TYPEDEF            shift, and go to state 10
    CHAR               shift, and go to state 11
    EXTERN             shift, and go to state 12
    RETURN             shift, and go to state 327
    UNION              shift, and go to state 13
    CONST              shift, and go to state 14
    FLOAT              shift, and go to state 15
    SHORT              shift, and go to state 16
    UNSIGNED           shift, and go to state 17
    CONTINUE           shift, and go to state 328
    FOR                shift, and go to state 329
    SIGNED             shift, and go to state 18
    VOID               shift, and go to state 19
    DEFAULT            shift, and go to state 330
    GOTO               shift, and go to state 331
    SIZEOF             shift, and go to state 223
    VOLATILE           shift, and go to state 20
    DO                 shift, and go to state 332
    IF                 shift, and go to state 333
    STATIC             shift, and go to state 21
    WHILE              shift, and go to state 334
    STREAM             shift, and go to state 23
    SPLITJOIN          shift, and go to state 224
    SPLIT              shift, and go to state 696
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 335
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    TYPEDEFname        shift, and go to state 336
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235
    INLINE             shift, and go to state 26

    ';'  reduce using rule 151 (expression.opt)

    stream.type.specifier          go to state 28
    split.statement                go to state 753
    primary.expression             go to state 236
    postfix.expression             go to state 237
    unary.expression               go to state 337
    unary.operator                 go to state 239
    cast.expression                go to state 240
    multiplicative.expression      go to state 241
    additive.expression            go to state 242
    shift.expression               go to state 243
    relational.expression          go to state 244
    equality.expression            go to state 245
    AND.expression                 go to state 246
    exclusive.OR.expression        go to state 247
    inclusive.OR.expression        go to state 248
    logical.AND.expression         go to state 249
    logical.OR.expression          go to state 250
    conditional.expression         go to state 338
    assignment.expression          go to state 339
    expression                     go to state 340
    expression.opt                 go to state 341
    declaration                    go to state 420
    declaring.list                 go to state 32
    default.declaring.list         go to state 33
    declaration.specifier          go to state 259
    basic.declaration.specifier    go to state 35
    sue.declaration.specifier      go to state 36
    typedef.declaration.specifier  go to state 37
    declaration.qualifier.list     go to state 260
    type.specifier                 go to state 261
    basic.type.specifier           go to state 40
    sue.type.specifier             go to state 41
    typedef.type.specifier         go to state 42
    type.qualifier.list            go to state 262
    elaborated.type.name           go to state 44
    struct.or.union.specifier      go to state 51
    struct.or.union                go to state 52
    enum.specifier                 go to state 53
    statement                      go to state 342
    labeled.statement              go to state 343
    compound.statement             go to state 344
    lblock                         go to state 345
    statement.list                 go to state 754
    expression.statement           go to state 348
    selection.statement            go to state 349
    iteration.statement            go to state 350
    jump.statement                 go to state 351
    constant                       go to state 253
    string.literal.list            go to state 254
    type.qualifier                 go to state 57
    storage.class                  go to state 58
    basic.type.name                go to state 59


state 721

   39 splitjoinPipeline.statement.list: splitjoinPipeline.statement.list . statement
   40                                 | splitjoinPipeline.statement.list . operator.add
   80 postfix.expression: PIPELINE '(' IDENTIFIER ')' lblock splitjoinPipeline.statement.list . rblock

    error              shift, and go to state 321
    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    '{'                shift, and go to state 322
    '}'                shift, and go to state 510
    BREAK              shift, and go to state 324
    SWITCH             shift, and go to state 325
    CASE               shift, and go to state 326
    RETURN             shift, and go to state 327
    CONTINUE           shift, and go to state 328
    FOR                shift, and go to state 329
    DEFAULT            shift, and go to state 330
    GOTO               shift, and go to state 331
    SIZEOF             shift, and go to state 223
    DO                 shift, and go to state 332
    IF                 shift, and go to state 333
    WHILE              shift, and go to state 334
    ADD                shift, and go to state 449
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 335
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    TYPEDEFname        shift, and go to state 517
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    ';'  reduce using rule 151 (expression.opt)

    operator.add               go to state 736
    primary.expression         go to state 236
    postfix.expression         go to state 237
    unary.expression           go to state 337
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 241
    additive.expression        go to state 242
    shift.expression           go to state 243
    relational.expression      go to state 244
    equality.expression        go to state 245
    AND.expression             go to state 246
    exclusive.OR.expression    go to state 247
    inclusive.OR.expression    go to state 248
    logical.AND.expression     go to state 249
    logical.OR.expression      go to state 250
    conditional.expression     go to state 338
    assignment.expression      go to state 339
    expression                 go to state 340
    expression.opt             go to state 341
    statement                  go to state 737
    labeled.statement          go to state 343
    compound.statement         go to state 344
    lblock                     go to state 345
    rblock                     go to state 755
    expression.statement       go to state 348
    selection.statement        go to state 349
    iteration.statement        go to state 350
    jump.statement             go to state 351
    constant                   go to state 253
    string.literal.list        go to state 254


state 722

   81 postfix.expression: PIPELINE '(' IDENTIFIER ')' lblock declaration.list . splitjoinPipeline.statement.list rblock
  384 declaration.list: declaration.list . declaration

    error              shift, and go to state 321
    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    '{'                shift, and go to state 322
    AUTO               shift, and go to state 3
    DOUBLE             shift, and go to state 4
    INT                shift, and go to state 5
    STRUCT             shift, and go to state 6
    BREAK              shift, and go to state 324
    LONG               shift, and go to state 7
    SWITCH             shift, and go to state 325
    CASE               shift, and go to state 326
    ENUM               shift, and go to state 8
    REGISTER           shift, and go to state 9
    TYPEDEF            shift, and go to state 10
    CHAR               shift, and go to state 11
    EXTERN             shift, and go to state 12
    RETURN             shift, and go to state 327
    UNION              shift, and go to state 13
    CONST              shift, and go to state 14
    FLOAT              shift, and go to state 15
    SHORT              shift, and go to state 16
    UNSIGNED           shift, and go to state 17
    CONTINUE           shift, and go to state 328
    FOR                shift, and go to state 329
    SIGNED             shift, and go to state 18
    VOID               shift, and go to state 19
    DEFAULT            shift, and go to state 330
    GOTO               shift, and go to state 331
    SIZEOF             shift, and go to state 223
    VOLATILE           shift, and go to state 20
    DO                 shift, and go to state 332
    IF                 shift, and go to state 333
    STATIC             shift, and go to state 21
    WHILE              shift, and go to state 334
    STREAM             shift, and go to state 23
    ADD                shift, and go to state 449
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 335
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    TYPEDEFname        shift, and go to state 336
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235
    INLINE             shift, and go to state 26

    ';'  reduce using rule 151 (expression.opt)

    stream.type.specifier             go to state 28
    operator.add                      go to state 699
    splitjoinPipeline.statement.list  go to state 756
    primary.expression                go to state 236
    postfix.expression                go to state 237
    unary.expression                  go to state 337
    unary.operator                    go to state 239
    cast.expression                   go to state 240
    multiplicative.expression         go to state 241
    additive.expression               go to state 242
    shift.expression                  go to state 243
    relational.expression             go to state 244
    equality.expression               go to state 245
    AND.expression                    go to state 246
    exclusive.OR.expression           go to state 247
    inclusive.OR.expression           go to state 248
    logical.AND.expression            go to state 249
    logical.OR.expression             go to state 250
    conditional.expression            go to state 338
    assignment.expression             go to state 339
    expression                        go to state 340
    expression.opt                    go to state 341
    declaration                       go to state 420
    declaring.list                    go to state 32
    default.declaring.list            go to state 33
    declaration.specifier             go to state 259
    basic.declaration.specifier       go to state 35
    sue.declaration.specifier         go to state 36
    typedef.declaration.specifier     go to state 37
    declaration.qualifier.list        go to state 260
    type.specifier                    go to state 261
    basic.type.specifier              go to state 40
    sue.type.specifier                go to state 41
    typedef.type.specifier            go to state 42
    type.qualifier.list               go to state 262
    elaborated.type.name              go to state 44
    struct.or.union.specifier         go to state 51
    struct.or.union                   go to state 52
    enum.specifier                    go to state 53
    statement                         go to state 701
    labeled.statement                 go to state 343
    compound.statement                go to state 344
    lblock                            go to state 345
    expression.statement              go to state 348
    selection.statement               go to state 349
    iteration.statement               go to state 350
    jump.statement                    go to state 351
    constant                          go to state 253
    string.literal.list               go to state 254
    type.qualifier                    go to state 57
    storage.class                     go to state 58
    basic.type.name                   go to state 59


state 723

   47 operator.arguments: '(' argument.expression.list ')' .

    $default  reduce using rule 47 (operator.arguments)


state 724

   52 operator.selfdefine.body.init.opt: INIT compound.statement .

    $default  reduce using rule 52 (operator.selfdefine.body.init.opt)


state 725

   53 operator.selfdefine.body.work: WORK . compound.statement

    '{'  shift, and go to state 322

    compound.statement  go to state 757
    lblock              go to state 345


state 726

   49 operator.selfdefine.body: lblock operator.selfdefine.body.init.opt operator.selfdefine.body.work . operator.selfdefine.body.window.list.opt rblock

    WINDOW  shift, and go to state 758

    $default  reduce using rule 54 (operator.selfdefine.body.window.list.opt)

    operator.selfdefine.body.window.list.opt  go to state 759


state 727

   50 operator.selfdefine.body: lblock declaration.list operator.selfdefine.body.init.opt . operator.selfdefine.body.work operator.selfdefine.body.window.list.opt rblock

    WORK  shift, and go to state 725

    operator.selfdefine.body.work  go to state 760


state 728

   16 composite.head.inout.member.list: composite.head.inout.member.list ',' . composite.head.inout.member

    STREAM  shift, and go to state 23

    stream.type.specifier        go to state 440
    composite.head.inout.member  go to state 652


state 729

   44 duplicate.statement: DUPLICATE . '(' ')' ';'
   45                    | DUPLICATE . '(' assignment.expression ')' ';'

    '('  shift, and go to state 761


state 730

   42 roundrobin.statement: ROUNDROBIN . '(' ')' ';'
   43                     | ROUNDROBIN . '(' argument.expression.list ')' ';'

    '('  shift, and go to state 762


state 731

   36 split.statement: SPLIT roundrobin.statement .

    $default  reduce using rule 36 (split.statement)


state 732

   35 split.statement: SPLIT duplicate.statement .

    $default  reduce using rule 35 (split.statement)


state 733

   32 operator.splitjoin: SPLITJOIN lblock split.statement splitjoinPipeline.statement.list . join.statement rblock
   39 splitjoinPipeline.statement.list: splitjoinPipeline.statement.list . statement
   40                                 | splitjoinPipeline.statement.list . operator.add

    error              shift, and go to state 321
    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    '{'                shift, and go to state 322
    BREAK              shift, and go to state 324
    SWITCH             shift, and go to state 325
    CASE               shift, and go to state 326
    RETURN             shift, and go to state 327
    CONTINUE           shift, and go to state 328
    FOR                shift, and go to state 329
    DEFAULT            shift, and go to state 330
    GOTO               shift, and go to state 331
    SIZEOF             shift, and go to state 223
    DO                 shift, and go to state 332
    IF                 shift, and go to state 333
    WHILE              shift, and go to state 334
    ADD                shift, and go to state 449
    SPLITJOIN          shift, and go to state 224
    JOIN               shift, and go to state 763
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 335
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    TYPEDEFname        shift, and go to state 517
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    ';'  reduce using rule 151 (expression.opt)

    operator.add               go to state 736
    join.statement             go to state 764
    primary.expression         go to state 236
    postfix.expression         go to state 237
    unary.expression           go to state 337
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 241
    additive.expression        go to state 242
    shift.expression           go to state 243
    relational.expression      go to state 244
    equality.expression        go to state 245
    AND.expression             go to state 246
    exclusive.OR.expression    go to state 247
    inclusive.OR.expression    go to state 248
    logical.AND.expression     go to state 249
    logical.OR.expression      go to state 250
    conditional.expression     go to state 338
    assignment.expression      go to state 339
    expression                 go to state 340
    expression.opt             go to state 341
    statement                  go to state 737
    labeled.statement          go to state 343
    compound.statement         go to state 344
    lblock                     go to state 345
    expression.statement       go to state 348
    selection.statement        go to state 349
    iteration.statement        go to state 350
    jump.statement             go to state 351
    constant                   go to state 253
    string.literal.list        go to state 254


state 734

   33 operator.splitjoin: SPLITJOIN lblock declaration.list split.statement . splitjoinPipeline.statement.list join.statement rblock

    error              shift, and go to state 321
    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    '{'                shift, and go to state 322
    BREAK              shift, and go to state 324
    SWITCH             shift, and go to state 325
    CASE               shift, and go to state 326
    RETURN             shift, and go to state 327
    CONTINUE           shift, and go to state 328
    FOR                shift, and go to state 329
    DEFAULT            shift, and go to state 330
    GOTO               shift, and go to state 331
    SIZEOF             shift, and go to state 223
    DO                 shift, and go to state 332
    IF                 shift, and go to state 333
    WHILE              shift, and go to state 334
    ADD                shift, and go to state 449
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 335
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    TYPEDEFname        shift, and go to state 517
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    ';'  reduce using rule 151 (expression.opt)

    operator.add                      go to state 699
    splitjoinPipeline.statement.list  go to state 765
    primary.expression                go to state 236
    postfix.expression                go to state 237
    unary.expression                  go to state 337
    unary.operator                    go to state 239
    cast.expression                   go to state 240
    multiplicative.expression         go to state 241
    additive.expression               go to state 242
    shift.expression                  go to state 243
    relational.expression             go to state 244
    equality.expression               go to state 245
    AND.expression                    go to state 246
    exclusive.OR.expression           go to state 247
    inclusive.OR.expression           go to state 248
    logical.AND.expression            go to state 249
    logical.OR.expression             go to state 250
    conditional.expression            go to state 338
    assignment.expression             go to state 339
    expression                        go to state 340
    expression.opt                    go to state 341
    statement                         go to state 701
    labeled.statement                 go to state 343
    compound.statement                go to state 344
    lblock                            go to state 345
    expression.statement              go to state 348
    selection.statement               go to state 349
    iteration.statement               go to state 350
    jump.statement                    go to state 351
    constant                          go to state 253
    string.literal.list               go to state 254


state 735

   34 operator.splitjoin: SPLITJOIN lblock declaration.list statement.list . split.statement splitjoinPipeline.statement.list join.statement rblock
  386 statement.list: statement.list . statement

    error              shift, and go to state 321
    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    '{'                shift, and go to state 322
    BREAK              shift, and go to state 324
    SWITCH             shift, and go to state 325
    CASE               shift, and go to state 326
    RETURN             shift, and go to state 327
    CONTINUE           shift, and go to state 328
    FOR                shift, and go to state 329
    DEFAULT            shift, and go to state 330
    GOTO               shift, and go to state 331
    SIZEOF             shift, and go to state 223
    DO                 shift, and go to state 332
    IF                 shift, and go to state 333
    WHILE              shift, and go to state 334
    SPLITJOIN          shift, and go to state 224
    SPLIT              shift, and go to state 696
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 335
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    TYPEDEFname        shift, and go to state 517
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    ';'  reduce using rule 151 (expression.opt)

    split.statement            go to state 766
    primary.expression         go to state 236
    postfix.expression         go to state 237
    unary.expression           go to state 337
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 241
    additive.expression        go to state 242
    shift.expression           go to state 243
    relational.expression      go to state 244
    equality.expression        go to state 245
    AND.expression             go to state 246
    exclusive.OR.expression    go to state 247
    inclusive.OR.expression    go to state 248
    logical.AND.expression     go to state 249
    logical.OR.expression      go to state 250
    conditional.expression     go to state 338
    assignment.expression      go to state 339
    expression                 go to state 340
    expression.opt             go to state 341
    statement                  go to state 518
    labeled.statement          go to state 343
    compound.statement         go to state 344
    lblock                     go to state 345
    expression.statement       go to state 348
    selection.statement        go to state 349
    iteration.statement        go to state 350
    jump.statement             go to state 351
    constant                   go to state 253
    string.literal.list        go to state 254


state 736

   40 splitjoinPipeline.statement.list: splitjoinPipeline.statement.list operator.add .

    $default  reduce using rule 40 (splitjoinPipeline.statement.list)


state 737

   39 splitjoinPipeline.statement.list: splitjoinPipeline.statement.list statement .

    $default  reduce using rule 39 (splitjoinPipeline.statement.list)


state 738

   30 operator.pipeline: PIPELINE lblock splitjoinPipeline.statement.list rblock .

    $default  reduce using rule 30 (operator.pipeline)


state 739

   31 operator.pipeline: PIPELINE lblock declaration.list splitjoinPipeline.statement.list . rblock
   39 splitjoinPipeline.statement.list: splitjoinPipeline.statement.list . statement
   40                                 | splitjoinPipeline.statement.list . operator.add

    error              shift, and go to state 321
    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    '{'                shift, and go to state 322
    '}'                shift, and go to state 510
    BREAK              shift, and go to state 324
    SWITCH             shift, and go to state 325
    CASE               shift, and go to state 326
    RETURN             shift, and go to state 327
    CONTINUE           shift, and go to state 328
    FOR                shift, and go to state 329
    DEFAULT            shift, and go to state 330
    GOTO               shift, and go to state 331
    SIZEOF             shift, and go to state 223
    DO                 shift, and go to state 332
    IF                 shift, and go to state 333
    WHILE              shift, and go to state 334
    ADD                shift, and go to state 449
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 335
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    TYPEDEFname        shift, and go to state 517
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    ';'  reduce using rule 151 (expression.opt)

    operator.add               go to state 736
    primary.expression         go to state 236
    postfix.expression         go to state 237
    unary.expression           go to state 337
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 241
    additive.expression        go to state 242
    shift.expression           go to state 243
    relational.expression      go to state 244
    equality.expression        go to state 245
    AND.expression             go to state 246
    exclusive.OR.expression    go to state 247
    inclusive.OR.expression    go to state 248
    logical.AND.expression     go to state 249
    logical.OR.expression      go to state 250
    conditional.expression     go to state 338
    assignment.expression      go to state 339
    expression                 go to state 340
    expression.opt             go to state 341
    statement                  go to state 737
    labeled.statement          go to state 343
    compound.statement         go to state 344
    lblock                     go to state 345
    rblock                     go to state 767
    expression.statement       go to state 348
    selection.statement        go to state 349
    iteration.statement        go to state 350
    jump.statement             go to state 351
    constant                   go to state 253
    string.literal.list        go to state 254


state 740

   26 operator.file.writer: FILEWRITER '(' IDENTIFIER ')' operator.arguments . ';'

    ';'  shift, and go to state 768


state 741

  287 attribute: ATTRIBUTE '(' '(' attribute.list ')' ')' .

    $default  reduce using rule 287 (attribute)


state 742

  289 attribute.list: attribute.list ',' attrib .

    $default  reduce using rule 289 (attribute.list)


state 743

  149 expression: expression . ',' assignment.expression
  292 attrib: any.word '(' expression . ')'

    ')'  shift, and go to state 769
    ','  shift, and go to state 508


state 744

  391 selection.statement: SWITCH $@19 '(' expression ')' statement .

    $default  reduce using rule 391 (selection.statement)


state 745

  405 iteration.statement: FOR '(' error ')' $@26 costream.composite.statement .

    $default  reduce using rule 405 (iteration.statement)


state 746

  399 iteration.statement: FOR '(' error ';' expression.opt ';' . expression.opt ')' $@23 costream.composite.statement

    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    SIZEOF             shift, and go to state 223
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 227
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    $default  reduce using rule 151 (expression.opt)

    primary.expression         go to state 236
    postfix.expression         go to state 237
    unary.expression           go to state 337
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 241
    additive.expression        go to state 242
    shift.expression           go to state 243
    relational.expression      go to state 244
    equality.expression        go to state 245
    AND.expression             go to state 246
    exclusive.OR.expression    go to state 247
    inclusive.OR.expression    go to state 248
    logical.AND.expression     go to state 249
    logical.OR.expression      go to state 250
    conditional.expression     go to state 338
    assignment.expression      go to state 339
    expression                 go to state 340
    expression.opt             go to state 770
    constant                   go to state 253
    string.literal.list        go to state 254


state 747

  403 iteration.statement: FOR '(' expression.opt ';' error ';' . expression.opt ')' $@25 costream.composite.statement

    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    SIZEOF             shift, and go to state 223
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 227
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    $default  reduce using rule 151 (expression.opt)

    primary.expression         go to state 236
    postfix.expression         go to state 237
    unary.expression           go to state 337
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 241
    additive.expression        go to state 242
    shift.expression           go to state 243
    relational.expression      go to state 244
    equality.expression        go to state 245
    AND.expression             go to state 246
    exclusive.OR.expression    go to state 247
    inclusive.OR.expression    go to state 248
    logical.AND.expression     go to state 249
    logical.OR.expression      go to state 250
    conditional.expression     go to state 338
    assignment.expression      go to state 339
    expression                 go to state 340
    expression.opt             go to state 771
    constant                   go to state 253
    string.literal.list        go to state 254


state 748

  397 iteration.statement: FOR '(' expression.opt ';' expression.opt ';' . expression.opt ')' $@22 costream.composite.statement
  401                    | FOR '(' expression.opt ';' expression.opt ';' . error ')' $@24 costream.composite.statement

    error              shift, and go to state 772
    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    SIZEOF             shift, and go to state 223
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 227
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    ')'  reduce using rule 151 (expression.opt)

    primary.expression         go to state 236
    postfix.expression         go to state 237
    unary.expression           go to state 337
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 241
    additive.expression        go to state 242
    shift.expression           go to state 243
    relational.expression      go to state 244
    equality.expression        go to state 245
    AND.expression             go to state 246
    exclusive.OR.expression    go to state 247
    inclusive.OR.expression    go to state 248
    logical.AND.expression     go to state 249
    logical.OR.expression      go to state 250
    conditional.expression     go to state 338
    assignment.expression      go to state 339
    expression                 go to state 340
    expression.opt             go to state 773
    constant                   go to state 253
    string.literal.list        go to state 254


state 749

  149 expression: expression . ',' assignment.expression
  395 iteration.statement: DO $@21 statement WHILE '(' expression . ')' ';'

    ')'  shift, and go to state 774
    ','  shift, and go to state 508


state 750

  389 selection.statement: IF '(' expression ')' costream.composite.statement ELSE . costream.composite.statement

    error              shift, and go to state 321
    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    '{'                shift, and go to state 322
    BREAK              shift, and go to state 324
    SWITCH             shift, and go to state 325
    CASE               shift, and go to state 326
    RETURN             shift, and go to state 327
    CONTINUE           shift, and go to state 328
    FOR                shift, and go to state 329
    DEFAULT            shift, and go to state 330
    GOTO               shift, and go to state 331
    SIZEOF             shift, and go to state 223
    DO                 shift, and go to state 332
    IF                 shift, and go to state 333
    WHILE              shift, and go to state 334
    ADD                shift, and go to state 449
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    FILEWRITER         shift, and go to state 450
    IDENTIFIER         shift, and go to state 335
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    TYPEDEFname        shift, and go to state 517
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    ';'  reduce using rule 151 (expression.opt)

    composite.body.operator       go to state 452
    operator.file.writer          go to state 453
    operator.add                  go to state 454
    primary.expression            go to state 236
    postfix.expression            go to state 237
    unary.expression              go to state 337
    unary.operator                go to state 239
    cast.expression               go to state 240
    multiplicative.expression     go to state 241
    additive.expression           go to state 242
    shift.expression              go to state 243
    relational.expression         go to state 244
    equality.expression           go to state 245
    AND.expression                go to state 246
    exclusive.OR.expression       go to state 247
    inclusive.OR.expression       go to state 248
    logical.AND.expression        go to state 249
    logical.OR.expression         go to state 250
    conditional.expression        go to state 338
    assignment.expression         go to state 339
    expression                    go to state 340
    expression.opt                go to state 341
    costream.composite.statement  go to state 775
    statement                     go to state 456
    labeled.statement             go to state 343
    compound.statement            go to state 344
    lblock                        go to state 345
    expression.statement          go to state 348
    selection.statement           go to state 349
    iteration.statement           go to state 350
    jump.statement                go to state 351
    constant                      go to state 253
    string.literal.list           go to state 254


state 751

  393 iteration.statement: WHILE $@20 '(' expression ')' statement .

    $default  reduce using rule 393 (iteration.statement)


state 752

   39 splitjoinPipeline.statement.list: splitjoinPipeline.statement.list . statement
   40                                 | splitjoinPipeline.statement.list . operator.add
   77 postfix.expression: SPLITJOIN '(' IDENTIFIER ')' lblock split.statement splitjoinPipeline.statement.list . join.statement rblock

    error              shift, and go to state 321
    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    '{'                shift, and go to state 322
    BREAK              shift, and go to state 324
    SWITCH             shift, and go to state 325
    CASE               shift, and go to state 326
    RETURN             shift, and go to state 327
    CONTINUE           shift, and go to state 328
    FOR                shift, and go to state 329
    DEFAULT            shift, and go to state 330
    GOTO               shift, and go to state 331
    SIZEOF             shift, and go to state 223
    DO                 shift, and go to state 332
    IF                 shift, and go to state 333
    WHILE              shift, and go to state 334
    ADD                shift, and go to state 449
    SPLITJOIN          shift, and go to state 224
    JOIN               shift, and go to state 763
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 335
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    TYPEDEFname        shift, and go to state 517
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    ';'  reduce using rule 151 (expression.opt)

    operator.add               go to state 736
    join.statement             go to state 776
    primary.expression         go to state 236
    postfix.expression         go to state 237
    unary.expression           go to state 337
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 241
    additive.expression        go to state 242
    shift.expression           go to state 243
    relational.expression      go to state 244
    equality.expression        go to state 245
    AND.expression             go to state 246
    exclusive.OR.expression    go to state 247
    inclusive.OR.expression    go to state 248
    logical.AND.expression     go to state 249
    logical.OR.expression      go to state 250
    conditional.expression     go to state 338
    assignment.expression      go to state 339
    expression                 go to state 340
    expression.opt             go to state 341
    statement                  go to state 737
    labeled.statement          go to state 343
    compound.statement         go to state 344
    lblock                     go to state 345
    expression.statement       go to state 348
    selection.statement        go to state 349
    iteration.statement        go to state 350
    jump.statement             go to state 351
    constant                   go to state 253
    string.literal.list        go to state 254


state 753

   78 postfix.expression: SPLITJOIN '(' IDENTIFIER ')' lblock declaration.list split.statement . splitjoinPipeline.statement.list join.statement rblock

    error              shift, and go to state 321
    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    '{'                shift, and go to state 322
    BREAK              shift, and go to state 324
    SWITCH             shift, and go to state 325
    CASE               shift, and go to state 326
    RETURN             shift, and go to state 327
    CONTINUE           shift, and go to state 328
    FOR                shift, and go to state 329
    DEFAULT            shift, and go to state 330
    GOTO               shift, and go to state 331
    SIZEOF             shift, and go to state 223
    DO                 shift, and go to state 332
    IF                 shift, and go to state 333
    WHILE              shift, and go to state 334
    ADD                shift, and go to state 449
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 335
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    TYPEDEFname        shift, and go to state 517
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    ';'  reduce using rule 151 (expression.opt)

    operator.add                      go to state 699
    splitjoinPipeline.statement.list  go to state 777
    primary.expression                go to state 236
    postfix.expression                go to state 237
    unary.expression                  go to state 337
    unary.operator                    go to state 239
    cast.expression                   go to state 240
    multiplicative.expression         go to state 241
    additive.expression               go to state 242
    shift.expression                  go to state 243
    relational.expression             go to state 244
    equality.expression               go to state 245
    AND.expression                    go to state 246
    exclusive.OR.expression           go to state 247
    inclusive.OR.expression           go to state 248
    logical.AND.expression            go to state 249
    logical.OR.expression             go to state 250
    conditional.expression            go to state 338
    assignment.expression             go to state 339
    expression                        go to state 340
    expression.opt                    go to state 341
    statement                         go to state 701
    labeled.statement                 go to state 343
    compound.statement                go to state 344
    lblock                            go to state 345
    expression.statement              go to state 348
    selection.statement               go to state 349
    iteration.statement               go to state 350
    jump.statement                    go to state 351
    constant                          go to state 253
    string.literal.list               go to state 254


state 754

   79 postfix.expression: SPLITJOIN '(' IDENTIFIER ')' lblock declaration.list statement.list . split.statement splitjoinPipeline.statement.list join.statement rblock
  386 statement.list: statement.list . statement

    error              shift, and go to state 321
    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    '{'                shift, and go to state 322
    BREAK              shift, and go to state 324
    SWITCH             shift, and go to state 325
    CASE               shift, and go to state 326
    RETURN             shift, and go to state 327
    CONTINUE           shift, and go to state 328
    FOR                shift, and go to state 329
    DEFAULT            shift, and go to state 330
    GOTO               shift, and go to state 331
    SIZEOF             shift, and go to state 223
    DO                 shift, and go to state 332
    IF                 shift, and go to state 333
    WHILE              shift, and go to state 334
    SPLITJOIN          shift, and go to state 224
    SPLIT              shift, and go to state 696
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 335
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    TYPEDEFname        shift, and go to state 517
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    ';'  reduce using rule 151 (expression.opt)

    split.statement            go to state 778
    primary.expression         go to state 236
    postfix.expression         go to state 237
    unary.expression           go to state 337
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 241
    additive.expression        go to state 242
    shift.expression           go to state 243
    relational.expression      go to state 244
    equality.expression        go to state 245
    AND.expression             go to state 246
    exclusive.OR.expression    go to state 247
    inclusive.OR.expression    go to state 248
    logical.AND.expression     go to state 249
    logical.OR.expression      go to state 250
    conditional.expression     go to state 338
    assignment.expression      go to state 339
    expression                 go to state 340
    expression.opt             go to state 341
    statement                  go to state 518
    labeled.statement          go to state 343
    compound.statement         go to state 344
    lblock                     go to state 345
    expression.statement       go to state 348
    selection.statement        go to state 349
    iteration.statement        go to state 350
    jump.statement             go to state 351
    constant                   go to state 253
    string.literal.list        go to state 254


state 755

   80 postfix.expression: PIPELINE '(' IDENTIFIER ')' lblock splitjoinPipeline.statement.list rblock .

    $default  reduce using rule 80 (postfix.expression)


state 756

   39 splitjoinPipeline.statement.list: splitjoinPipeline.statement.list . statement
   40                                 | splitjoinPipeline.statement.list . operator.add
   81 postfix.expression: PIPELINE '(' IDENTIFIER ')' lblock declaration.list splitjoinPipeline.statement.list . rblock

    error              shift, and go to state 321
    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    '{'                shift, and go to state 322
    '}'                shift, and go to state 510
    BREAK              shift, and go to state 324
    SWITCH             shift, and go to state 325
    CASE               shift, and go to state 326
    RETURN             shift, and go to state 327
    CONTINUE           shift, and go to state 328
    FOR                shift, and go to state 329
    DEFAULT            shift, and go to state 330
    GOTO               shift, and go to state 331
    SIZEOF             shift, and go to state 223
    DO                 shift, and go to state 332
    IF                 shift, and go to state 333
    WHILE              shift, and go to state 334
    ADD                shift, and go to state 449
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 335
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    TYPEDEFname        shift, and go to state 517
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    ';'  reduce using rule 151 (expression.opt)

    operator.add               go to state 736
    primary.expression         go to state 236
    postfix.expression         go to state 237
    unary.expression           go to state 337
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 241
    additive.expression        go to state 242
    shift.expression           go to state 243
    relational.expression      go to state 244
    equality.expression        go to state 245
    AND.expression             go to state 246
    exclusive.OR.expression    go to state 247
    inclusive.OR.expression    go to state 248
    logical.AND.expression     go to state 249
    logical.OR.expression      go to state 250
    conditional.expression     go to state 338
    assignment.expression      go to state 339
    expression                 go to state 340
    expression.opt             go to state 341
    statement                  go to state 737
    labeled.statement          go to state 343
    compound.statement         go to state 344
    lblock                     go to state 345
    rblock                     go to state 779
    expression.statement       go to state 348
    selection.statement        go to state 349
    iteration.statement        go to state 350
    jump.statement             go to state 351
    constant                   go to state 253
    string.literal.list        go to state 254


state 757

   53 operator.selfdefine.body.work: WORK compound.statement .

    $default  reduce using rule 53 (operator.selfdefine.body.work)


state 758

   55 operator.selfdefine.body.window.list.opt: WINDOW . '{' operator.selfdefine.window.list '}'

    '{'  shift, and go to state 780


state 759

   49 operator.selfdefine.body: lblock operator.selfdefine.body.init.opt operator.selfdefine.body.work operator.selfdefine.body.window.list.opt . rblock

    '}'  shift, and go to state 510

    rblock  go to state 781


state 760

   50 operator.selfdefine.body: lblock declaration.list operator.selfdefine.body.init.opt operator.selfdefine.body.work . operator.selfdefine.body.window.list.opt rblock

    WINDOW  shift, and go to state 758

    $default  reduce using rule 54 (operator.selfdefine.body.window.list.opt)

    operator.selfdefine.body.window.list.opt  go to state 782


state 761

   44 duplicate.statement: DUPLICATE '(' . ')' ';'
   45                    | DUPLICATE '(' . assignment.expression ')' ';'

    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    ')'                shift, and go to state 783
    SIZEOF             shift, and go to state 223
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 227
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    primary.expression         go to state 236
    postfix.expression         go to state 237
    unary.expression           go to state 337
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 241
    additive.expression        go to state 242
    shift.expression           go to state 243
    relational.expression      go to state 244
    equality.expression        go to state 245
    AND.expression             go to state 246
    exclusive.OR.expression    go to state 247
    inclusive.OR.expression    go to state 248
    logical.AND.expression     go to state 249
    logical.OR.expression      go to state 250
    conditional.expression     go to state 338
    assignment.expression      go to state 784
    constant                   go to state 253
    string.literal.list        go to state 254


state 762

   42 roundrobin.statement: ROUNDROBIN '(' . ')' ';'
   43                     | ROUNDROBIN '(' . argument.expression.list ')' ';'

    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    ')'                shift, and go to state 785
    SIZEOF             shift, and go to state 223
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 227
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    primary.expression         go to state 236
    postfix.expression         go to state 237
    argument.expression.list   go to state 786
    unary.expression           go to state 337
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 241
    additive.expression        go to state 242
    shift.expression           go to state 243
    relational.expression      go to state 244
    equality.expression        go to state 245
    AND.expression             go to state 246
    exclusive.OR.expression    go to state 247
    inclusive.OR.expression    go to state 248
    logical.AND.expression     go to state 249
    logical.OR.expression      go to state 250
    conditional.expression     go to state 338
    assignment.expression      go to state 546
    constant                   go to state 253
    string.literal.list        go to state 254


state 763

   41 join.statement: JOIN . roundrobin.statement

    ROUNDROBIN  shift, and go to state 730

    roundrobin.statement  go to state 787


state 764

   32 operator.splitjoin: SPLITJOIN lblock split.statement splitjoinPipeline.statement.list join.statement . rblock

    '}'  shift, and go to state 510

    rblock  go to state 788


state 765

   33 operator.splitjoin: SPLITJOIN lblock declaration.list split.statement splitjoinPipeline.statement.list . join.statement rblock
   39 splitjoinPipeline.statement.list: splitjoinPipeline.statement.list . statement
   40                                 | splitjoinPipeline.statement.list . operator.add

    error              shift, and go to state 321
    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    '{'                shift, and go to state 322
    BREAK              shift, and go to state 324
    SWITCH             shift, and go to state 325
    CASE               shift, and go to state 326
    RETURN             shift, and go to state 327
    CONTINUE           shift, and go to state 328
    FOR                shift, and go to state 329
    DEFAULT            shift, and go to state 330
    GOTO               shift, and go to state 331
    SIZEOF             shift, and go to state 223
    DO                 shift, and go to state 332
    IF                 shift, and go to state 333
    WHILE              shift, and go to state 334
    ADD                shift, and go to state 449
    SPLITJOIN          shift, and go to state 224
    JOIN               shift, and go to state 763
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 335
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    TYPEDEFname        shift, and go to state 517
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    ';'  reduce using rule 151 (expression.opt)

    operator.add               go to state 736
    join.statement             go to state 789
    primary.expression         go to state 236
    postfix.expression         go to state 237
    unary.expression           go to state 337
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 241
    additive.expression        go to state 242
    shift.expression           go to state 243
    relational.expression      go to state 244
    equality.expression        go to state 245
    AND.expression             go to state 246
    exclusive.OR.expression    go to state 247
    inclusive.OR.expression    go to state 248
    logical.AND.expression     go to state 249
    logical.OR.expression      go to state 250
    conditional.expression     go to state 338
    assignment.expression      go to state 339
    expression                 go to state 340
    expression.opt             go to state 341
    statement                  go to state 737
    labeled.statement          go to state 343
    compound.statement         go to state 344
    lblock                     go to state 345
    expression.statement       go to state 348
    selection.statement        go to state 349
    iteration.statement        go to state 350
    jump.statement             go to state 351
    constant                   go to state 253
    string.literal.list        go to state 254


state 766

   34 operator.splitjoin: SPLITJOIN lblock declaration.list statement.list split.statement . splitjoinPipeline.statement.list join.statement rblock

    error              shift, and go to state 321
    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    '{'                shift, and go to state 322
    BREAK              shift, and go to state 324
    SWITCH             shift, and go to state 325
    CASE               shift, and go to state 326
    RETURN             shift, and go to state 327
    CONTINUE           shift, and go to state 328
    FOR                shift, and go to state 329
    DEFAULT            shift, and go to state 330
    GOTO               shift, and go to state 331
    SIZEOF             shift, and go to state 223
    DO                 shift, and go to state 332
    IF                 shift, and go to state 333
    WHILE              shift, and go to state 334
    ADD                shift, and go to state 449
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 335
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    TYPEDEFname        shift, and go to state 517
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    ';'  reduce using rule 151 (expression.opt)

    operator.add                      go to state 699
    splitjoinPipeline.statement.list  go to state 790
    primary.expression                go to state 236
    postfix.expression                go to state 237
    unary.expression                  go to state 337
    unary.operator                    go to state 239
    cast.expression                   go to state 240
    multiplicative.expression         go to state 241
    additive.expression               go to state 242
    shift.expression                  go to state 243
    relational.expression             go to state 244
    equality.expression               go to state 245
    AND.expression                    go to state 246
    exclusive.OR.expression           go to state 247
    inclusive.OR.expression           go to state 248
    logical.AND.expression            go to state 249
    logical.OR.expression             go to state 250
    conditional.expression            go to state 338
    assignment.expression             go to state 339
    expression                        go to state 340
    expression.opt                    go to state 341
    statement                         go to state 701
    labeled.statement                 go to state 343
    compound.statement                go to state 344
    lblock                            go to state 345
    expression.statement              go to state 348
    selection.statement               go to state 349
    iteration.statement               go to state 350
    jump.statement                    go to state 351
    constant                          go to state 253
    string.literal.list               go to state 254


state 767

   31 operator.pipeline: PIPELINE lblock declaration.list splitjoinPipeline.statement.list rblock .

    $default  reduce using rule 31 (operator.pipeline)


state 768

   26 operator.file.writer: FILEWRITER '(' IDENTIFIER ')' operator.arguments ';' .

    $default  reduce using rule 26 (operator.file.writer)


state 769

  292 attrib: any.word '(' expression ')' .

    $default  reduce using rule 292 (attrib)


state 770

  399 iteration.statement: FOR '(' error ';' expression.opt ';' expression.opt . ')' $@23 costream.composite.statement

    ')'  shift, and go to state 791


state 771

  403 iteration.statement: FOR '(' expression.opt ';' error ';' expression.opt . ')' $@25 costream.composite.statement

    ')'  shift, and go to state 792


state 772

  401 iteration.statement: FOR '(' expression.opt ';' expression.opt ';' error . ')' $@24 costream.composite.statement

    ')'  shift, and go to state 793


state 773

  397 iteration.statement: FOR '(' expression.opt ';' expression.opt ';' expression.opt . ')' $@22 costream.composite.statement

    ')'  shift, and go to state 794


state 774

  395 iteration.statement: DO $@21 statement WHILE '(' expression ')' . ';'

    ';'  shift, and go to state 795


state 775

  389 selection.statement: IF '(' expression ')' costream.composite.statement ELSE costream.composite.statement .

    $default  reduce using rule 389 (selection.statement)


state 776

   77 postfix.expression: SPLITJOIN '(' IDENTIFIER ')' lblock split.statement splitjoinPipeline.statement.list join.statement . rblock

    '}'  shift, and go to state 510

    rblock  go to state 796


state 777

   39 splitjoinPipeline.statement.list: splitjoinPipeline.statement.list . statement
   40                                 | splitjoinPipeline.statement.list . operator.add
   78 postfix.expression: SPLITJOIN '(' IDENTIFIER ')' lblock declaration.list split.statement splitjoinPipeline.statement.list . join.statement rblock

    error              shift, and go to state 321
    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    '{'                shift, and go to state 322
    BREAK              shift, and go to state 324
    SWITCH             shift, and go to state 325
    CASE               shift, and go to state 326
    RETURN             shift, and go to state 327
    CONTINUE           shift, and go to state 328
    FOR                shift, and go to state 329
    DEFAULT            shift, and go to state 330
    GOTO               shift, and go to state 331
    SIZEOF             shift, and go to state 223
    DO                 shift, and go to state 332
    IF                 shift, and go to state 333
    WHILE              shift, and go to state 334
    ADD                shift, and go to state 449
    SPLITJOIN          shift, and go to state 224
    JOIN               shift, and go to state 763
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 335
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    TYPEDEFname        shift, and go to state 517
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    ';'  reduce using rule 151 (expression.opt)

    operator.add               go to state 736
    join.statement             go to state 797
    primary.expression         go to state 236
    postfix.expression         go to state 237
    unary.expression           go to state 337
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 241
    additive.expression        go to state 242
    shift.expression           go to state 243
    relational.expression      go to state 244
    equality.expression        go to state 245
    AND.expression             go to state 246
    exclusive.OR.expression    go to state 247
    inclusive.OR.expression    go to state 248
    logical.AND.expression     go to state 249
    logical.OR.expression      go to state 250
    conditional.expression     go to state 338
    assignment.expression      go to state 339
    expression                 go to state 340
    expression.opt             go to state 341
    statement                  go to state 737
    labeled.statement          go to state 343
    compound.statement         go to state 344
    lblock                     go to state 345
    expression.statement       go to state 348
    selection.statement        go to state 349
    iteration.statement        go to state 350
    jump.statement             go to state 351
    constant                   go to state 253
    string.literal.list        go to state 254


state 778

   79 postfix.expression: SPLITJOIN '(' IDENTIFIER ')' lblock declaration.list statement.list split.statement . splitjoinPipeline.statement.list join.statement rblock

    error              shift, and go to state 321
    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    '{'                shift, and go to state 322
    BREAK              shift, and go to state 324
    SWITCH             shift, and go to state 325
    CASE               shift, and go to state 326
    RETURN             shift, and go to state 327
    CONTINUE           shift, and go to state 328
    FOR                shift, and go to state 329
    DEFAULT            shift, and go to state 330
    GOTO               shift, and go to state 331
    SIZEOF             shift, and go to state 223
    DO                 shift, and go to state 332
    IF                 shift, and go to state 333
    WHILE              shift, and go to state 334
    ADD                shift, and go to state 449
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 335
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    TYPEDEFname        shift, and go to state 517
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    ';'  reduce using rule 151 (expression.opt)

    operator.add                      go to state 699
    splitjoinPipeline.statement.list  go to state 798
    primary.expression                go to state 236
    postfix.expression                go to state 237
    unary.expression                  go to state 337
    unary.operator                    go to state 239
    cast.expression                   go to state 240
    multiplicative.expression         go to state 241
    additive.expression               go to state 242
    shift.expression                  go to state 243
    relational.expression             go to state 244
    equality.expression               go to state 245
    AND.expression                    go to state 246
    exclusive.OR.expression           go to state 247
    inclusive.OR.expression           go to state 248
    logical.AND.expression            go to state 249
    logical.OR.expression             go to state 250
    conditional.expression            go to state 338
    assignment.expression             go to state 339
    expression                        go to state 340
    expression.opt                    go to state 341
    statement                         go to state 701
    labeled.statement                 go to state 343
    compound.statement                go to state 344
    lblock                            go to state 345
    expression.statement              go to state 348
    selection.statement               go to state 349
    iteration.statement               go to state 350
    jump.statement                    go to state 351
    constant                          go to state 253
    string.literal.list               go to state 254


state 779

   81 postfix.expression: PIPELINE '(' IDENTIFIER ')' lblock declaration.list splitjoinPipeline.statement.list rblock .

    $default  reduce using rule 81 (postfix.expression)


state 780

   55 operator.selfdefine.body.window.list.opt: WINDOW '{' . operator.selfdefine.window.list '}'

    IDENTIFIER  shift, and go to state 799

    operator.selfdefine.window.list  go to state 800
    operator.selfdefine.window       go to state 801


state 781

   49 operator.selfdefine.body: lblock operator.selfdefine.body.init.opt operator.selfdefine.body.work operator.selfdefine.body.window.list.opt rblock .

    $default  reduce using rule 49 (operator.selfdefine.body)


state 782

   50 operator.selfdefine.body: lblock declaration.list operator.selfdefine.body.init.opt operator.selfdefine.body.work operator.selfdefine.body.window.list.opt . rblock

    '}'  shift, and go to state 510

    rblock  go to state 802


state 783

   44 duplicate.statement: DUPLICATE '(' ')' . ';'

    ';'  shift, and go to state 803


state 784

   45 duplicate.statement: DUPLICATE '(' assignment.expression . ')' ';'

    ')'  shift, and go to state 804


state 785

   42 roundrobin.statement: ROUNDROBIN '(' ')' . ';'

    ';'  shift, and go to state 805


state 786

   43 roundrobin.statement: ROUNDROBIN '(' argument.expression.list . ')' ';'
   90 argument.expression.list: argument.expression.list . ',' assignment.expression

    ')'  shift, and go to state 806
    ','  shift, and go to state 646


state 787

   41 join.statement: JOIN roundrobin.statement .

    $default  reduce using rule 41 (join.statement)


state 788

   32 operator.splitjoin: SPLITJOIN lblock split.statement splitjoinPipeline.statement.list join.statement rblock .

    $default  reduce using rule 32 (operator.splitjoin)


state 789

   33 operator.splitjoin: SPLITJOIN lblock declaration.list split.statement splitjoinPipeline.statement.list join.statement . rblock

    '}'  shift, and go to state 510

    rblock  go to state 807


state 790

   34 operator.splitjoin: SPLITJOIN lblock declaration.list statement.list split.statement splitjoinPipeline.statement.list . join.statement rblock
   39 splitjoinPipeline.statement.list: splitjoinPipeline.statement.list . statement
   40                                 | splitjoinPipeline.statement.list . operator.add

    error              shift, and go to state 321
    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    '{'                shift, and go to state 322
    BREAK              shift, and go to state 324
    SWITCH             shift, and go to state 325
    CASE               shift, and go to state 326
    RETURN             shift, and go to state 327
    CONTINUE           shift, and go to state 328
    FOR                shift, and go to state 329
    DEFAULT            shift, and go to state 330
    GOTO               shift, and go to state 331
    SIZEOF             shift, and go to state 223
    DO                 shift, and go to state 332
    IF                 shift, and go to state 333
    WHILE              shift, and go to state 334
    ADD                shift, and go to state 449
    SPLITJOIN          shift, and go to state 224
    JOIN               shift, and go to state 763
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 335
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    TYPEDEFname        shift, and go to state 517
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    ';'  reduce using rule 151 (expression.opt)

    operator.add               go to state 736
    join.statement             go to state 808
    primary.expression         go to state 236
    postfix.expression         go to state 237
    unary.expression           go to state 337
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 241
    additive.expression        go to state 242
    shift.expression           go to state 243
    relational.expression      go to state 244
    equality.expression        go to state 245
    AND.expression             go to state 246
    exclusive.OR.expression    go to state 247
    inclusive.OR.expression    go to state 248
    logical.AND.expression     go to state 249
    logical.OR.expression      go to state 250
    conditional.expression     go to state 338
    assignment.expression      go to state 339
    expression                 go to state 340
    expression.opt             go to state 341
    statement                  go to state 737
    labeled.statement          go to state 343
    compound.statement         go to state 344
    lblock                     go to state 345
    expression.statement       go to state 348
    selection.statement        go to state 349
    iteration.statement        go to state 350
    jump.statement             go to state 351
    constant                   go to state 253
    string.literal.list        go to state 254


state 791

  399 iteration.statement: FOR '(' error ';' expression.opt ';' expression.opt ')' . $@23 costream.composite.statement

    $default  reduce using rule 398 ($@23)

    $@23  go to state 809


state 792

  403 iteration.statement: FOR '(' expression.opt ';' error ';' expression.opt ')' . $@25 costream.composite.statement

    $default  reduce using rule 402 ($@25)

    $@25  go to state 810


state 793

  401 iteration.statement: FOR '(' expression.opt ';' expression.opt ';' error ')' . $@24 costream.composite.statement

    $default  reduce using rule 400 ($@24)

    $@24  go to state 811


state 794

  397 iteration.statement: FOR '(' expression.opt ';' expression.opt ';' expression.opt ')' . $@22 costream.composite.statement

    $default  reduce using rule 396 ($@22)

    $@22  go to state 812


state 795

  395 iteration.statement: DO $@21 statement WHILE '(' expression ')' ';' .

    $default  reduce using rule 395 (iteration.statement)


state 796

   77 postfix.expression: SPLITJOIN '(' IDENTIFIER ')' lblock split.statement splitjoinPipeline.statement.list join.statement rblock .

    $default  reduce using rule 77 (postfix.expression)


state 797

   78 postfix.expression: SPLITJOIN '(' IDENTIFIER ')' lblock declaration.list split.statement splitjoinPipeline.statement.list join.statement . rblock

    '}'  shift, and go to state 510

    rblock  go to state 813


state 798

   39 splitjoinPipeline.statement.list: splitjoinPipeline.statement.list . statement
   40                                 | splitjoinPipeline.statement.list . operator.add
   79 postfix.expression: SPLITJOIN '(' IDENTIFIER ')' lblock declaration.list statement.list split.statement splitjoinPipeline.statement.list . join.statement rblock

    error              shift, and go to state 321
    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    '{'                shift, and go to state 322
    BREAK              shift, and go to state 324
    SWITCH             shift, and go to state 325
    CASE               shift, and go to state 326
    RETURN             shift, and go to state 327
    CONTINUE           shift, and go to state 328
    FOR                shift, and go to state 329
    DEFAULT            shift, and go to state 330
    GOTO               shift, and go to state 331
    SIZEOF             shift, and go to state 223
    DO                 shift, and go to state 332
    IF                 shift, and go to state 333
    WHILE              shift, and go to state 334
    ADD                shift, and go to state 449
    SPLITJOIN          shift, and go to state 224
    JOIN               shift, and go to state 763
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 335
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    TYPEDEFname        shift, and go to state 517
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    ';'  reduce using rule 151 (expression.opt)

    operator.add               go to state 736
    join.statement             go to state 814
    primary.expression         go to state 236
    postfix.expression         go to state 237
    unary.expression           go to state 337
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 241
    additive.expression        go to state 242
    shift.expression           go to state 243
    relational.expression      go to state 244
    equality.expression        go to state 245
    AND.expression             go to state 246
    exclusive.OR.expression    go to state 247
    inclusive.OR.expression    go to state 248
    logical.AND.expression     go to state 249
    logical.OR.expression      go to state 250
    conditional.expression     go to state 338
    assignment.expression      go to state 339
    expression                 go to state 340
    expression.opt             go to state 341
    statement                  go to state 737
    labeled.statement          go to state 343
    compound.statement         go to state 344
    lblock                     go to state 345
    expression.statement       go to state 348
    selection.statement        go to state 349
    iteration.statement        go to state 350
    jump.statement             go to state 351
    constant                   go to state 253
    string.literal.list        go to state 254


state 799

   58 operator.selfdefine.window: IDENTIFIER . window.type ';'

    TUMBLING  shift, and go to state 815
    SLIDING   shift, and go to state 816

    window.type  go to state 817


state 800

   55 operator.selfdefine.body.window.list.opt: WINDOW '{' operator.selfdefine.window.list . '}'
   57 operator.selfdefine.window.list: operator.selfdefine.window.list . operator.selfdefine.window

    '}'         shift, and go to state 818
    IDENTIFIER  shift, and go to state 799

    operator.selfdefine.window  go to state 819


state 801

   56 operator.selfdefine.window.list: operator.selfdefine.window .

    $default  reduce using rule 56 (operator.selfdefine.window.list)


state 802

   50 operator.selfdefine.body: lblock declaration.list operator.selfdefine.body.init.opt operator.selfdefine.body.work operator.selfdefine.body.window.list.opt rblock .

    $default  reduce using rule 50 (operator.selfdefine.body)


state 803

   44 duplicate.statement: DUPLICATE '(' ')' ';' .

    $default  reduce using rule 44 (duplicate.statement)


state 804

   45 duplicate.statement: DUPLICATE '(' assignment.expression ')' . ';'

    ';'  shift, and go to state 820


state 805

   42 roundrobin.statement: ROUNDROBIN '(' ')' ';' .

    $default  reduce using rule 42 (roundrobin.statement)


state 806

   43 roundrobin.statement: ROUNDROBIN '(' argument.expression.list ')' . ';'

    ';'  shift, and go to state 821


state 807

   33 operator.splitjoin: SPLITJOIN lblock declaration.list split.statement splitjoinPipeline.statement.list join.statement rblock .

    $default  reduce using rule 33 (operator.splitjoin)


state 808

   34 operator.splitjoin: SPLITJOIN lblock declaration.list statement.list split.statement splitjoinPipeline.statement.list join.statement . rblock

    '}'  shift, and go to state 510

    rblock  go to state 822


state 809

  399 iteration.statement: FOR '(' error ';' expression.opt ';' expression.opt ')' $@23 . costream.composite.statement

    error              shift, and go to state 321
    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    '{'                shift, and go to state 322
    BREAK              shift, and go to state 324
    SWITCH             shift, and go to state 325
    CASE               shift, and go to state 326
    RETURN             shift, and go to state 327
    CONTINUE           shift, and go to state 328
    FOR                shift, and go to state 329
    DEFAULT            shift, and go to state 330
    GOTO               shift, and go to state 331
    SIZEOF             shift, and go to state 223
    DO                 shift, and go to state 332
    IF                 shift, and go to state 333
    WHILE              shift, and go to state 334
    ADD                shift, and go to state 449
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    FILEWRITER         shift, and go to state 450
    IDENTIFIER         shift, and go to state 335
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    TYPEDEFname        shift, and go to state 517
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    ';'  reduce using rule 151 (expression.opt)

    composite.body.operator       go to state 452
    operator.file.writer          go to state 453
    operator.add                  go to state 454
    primary.expression            go to state 236
    postfix.expression            go to state 237
    unary.expression              go to state 337
    unary.operator                go to state 239
    cast.expression               go to state 240
    multiplicative.expression     go to state 241
    additive.expression           go to state 242
    shift.expression              go to state 243
    relational.expression         go to state 244
    equality.expression           go to state 245
    AND.expression                go to state 246
    exclusive.OR.expression       go to state 247
    inclusive.OR.expression       go to state 248
    logical.AND.expression        go to state 249
    logical.OR.expression         go to state 250
    conditional.expression        go to state 338
    assignment.expression         go to state 339
    expression                    go to state 340
    expression.opt                go to state 341
    costream.composite.statement  go to state 823
    statement                     go to state 456
    labeled.statement             go to state 343
    compound.statement            go to state 344
    lblock                        go to state 345
    expression.statement          go to state 348
    selection.statement           go to state 349
    iteration.statement           go to state 350
    jump.statement                go to state 351
    constant                      go to state 253
    string.literal.list           go to state 254


state 810

  403 iteration.statement: FOR '(' expression.opt ';' error ';' expression.opt ')' $@25 . costream.composite.statement

    error              shift, and go to state 321
    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    '{'                shift, and go to state 322
    BREAK              shift, and go to state 324
    SWITCH             shift, and go to state 325
    CASE               shift, and go to state 326
    RETURN             shift, and go to state 327
    CONTINUE           shift, and go to state 328
    FOR                shift, and go to state 329
    DEFAULT            shift, and go to state 330
    GOTO               shift, and go to state 331
    SIZEOF             shift, and go to state 223
    DO                 shift, and go to state 332
    IF                 shift, and go to state 333
    WHILE              shift, and go to state 334
    ADD                shift, and go to state 449
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    FILEWRITER         shift, and go to state 450
    IDENTIFIER         shift, and go to state 335
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    TYPEDEFname        shift, and go to state 517
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    ';'  reduce using rule 151 (expression.opt)

    composite.body.operator       go to state 452
    operator.file.writer          go to state 453
    operator.add                  go to state 454
    primary.expression            go to state 236
    postfix.expression            go to state 237
    unary.expression              go to state 337
    unary.operator                go to state 239
    cast.expression               go to state 240
    multiplicative.expression     go to state 241
    additive.expression           go to state 242
    shift.expression              go to state 243
    relational.expression         go to state 244
    equality.expression           go to state 245
    AND.expression                go to state 246
    exclusive.OR.expression       go to state 247
    inclusive.OR.expression       go to state 248
    logical.AND.expression        go to state 249
    logical.OR.expression         go to state 250
    conditional.expression        go to state 338
    assignment.expression         go to state 339
    expression                    go to state 340
    expression.opt                go to state 341
    costream.composite.statement  go to state 824
    statement                     go to state 456
    labeled.statement             go to state 343
    compound.statement            go to state 344
    lblock                        go to state 345
    expression.statement          go to state 348
    selection.statement           go to state 349
    iteration.statement           go to state 350
    jump.statement                go to state 351
    constant                      go to state 253
    string.literal.list           go to state 254


state 811

  401 iteration.statement: FOR '(' expression.opt ';' expression.opt ';' error ')' $@24 . costream.composite.statement

    error              shift, and go to state 321
    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    '{'                shift, and go to state 322
    BREAK              shift, and go to state 324
    SWITCH             shift, and go to state 325
    CASE               shift, and go to state 326
    RETURN             shift, and go to state 327
    CONTINUE           shift, and go to state 328
    FOR                shift, and go to state 329
    DEFAULT            shift, and go to state 330
    GOTO               shift, and go to state 331
    SIZEOF             shift, and go to state 223
    DO                 shift, and go to state 332
    IF                 shift, and go to state 333
    WHILE              shift, and go to state 334
    ADD                shift, and go to state 449
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    FILEWRITER         shift, and go to state 450
    IDENTIFIER         shift, and go to state 335
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    TYPEDEFname        shift, and go to state 517
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    ';'  reduce using rule 151 (expression.opt)

    composite.body.operator       go to state 452
    operator.file.writer          go to state 453
    operator.add                  go to state 454
    primary.expression            go to state 236
    postfix.expression            go to state 237
    unary.expression              go to state 337
    unary.operator                go to state 239
    cast.expression               go to state 240
    multiplicative.expression     go to state 241
    additive.expression           go to state 242
    shift.expression              go to state 243
    relational.expression         go to state 244
    equality.expression           go to state 245
    AND.expression                go to state 246
    exclusive.OR.expression       go to state 247
    inclusive.OR.expression       go to state 248
    logical.AND.expression        go to state 249
    logical.OR.expression         go to state 250
    conditional.expression        go to state 338
    assignment.expression         go to state 339
    expression                    go to state 340
    expression.opt                go to state 341
    costream.composite.statement  go to state 825
    statement                     go to state 456
    labeled.statement             go to state 343
    compound.statement            go to state 344
    lblock                        go to state 345
    expression.statement          go to state 348
    selection.statement           go to state 349
    iteration.statement           go to state 350
    jump.statement                go to state 351
    constant                      go to state 253
    string.literal.list           go to state 254


state 812

  397 iteration.statement: FOR '(' expression.opt ';' expression.opt ';' expression.opt ')' $@22 . costream.composite.statement

    error              shift, and go to state 321
    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    '{'                shift, and go to state 322
    BREAK              shift, and go to state 324
    SWITCH             shift, and go to state 325
    CASE               shift, and go to state 326
    RETURN             shift, and go to state 327
    CONTINUE           shift, and go to state 328
    FOR                shift, and go to state 329
    DEFAULT            shift, and go to state 330
    GOTO               shift, and go to state 331
    SIZEOF             shift, and go to state 223
    DO                 shift, and go to state 332
    IF                 shift, and go to state 333
    WHILE              shift, and go to state 334
    ADD                shift, and go to state 449
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    FILEWRITER         shift, and go to state 450
    IDENTIFIER         shift, and go to state 335
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    TYPEDEFname        shift, and go to state 517
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    ';'  reduce using rule 151 (expression.opt)

    composite.body.operator       go to state 452
    operator.file.writer          go to state 453
    operator.add                  go to state 454
    primary.expression            go to state 236
    postfix.expression            go to state 237
    unary.expression              go to state 337
    unary.operator                go to state 239
    cast.expression               go to state 240
    multiplicative.expression     go to state 241
    additive.expression           go to state 242
    shift.expression              go to state 243
    relational.expression         go to state 244
    equality.expression           go to state 245
    AND.expression                go to state 246
    exclusive.OR.expression       go to state 247
    inclusive.OR.expression       go to state 248
    logical.AND.expression        go to state 249
    logical.OR.expression         go to state 250
    conditional.expression        go to state 338
    assignment.expression         go to state 339
    expression                    go to state 340
    expression.opt                go to state 341
    costream.composite.statement  go to state 826
    statement                     go to state 456
    labeled.statement             go to state 343
    compound.statement            go to state 344
    lblock                        go to state 345
    expression.statement          go to state 348
    selection.statement           go to state 349
    iteration.statement           go to state 350
    jump.statement                go to state 351
    constant                      go to state 253
    string.literal.list           go to state 254


state 813

   78 postfix.expression: SPLITJOIN '(' IDENTIFIER ')' lblock declaration.list split.statement splitjoinPipeline.statement.list join.statement rblock .

    $default  reduce using rule 78 (postfix.expression)


state 814

   79 postfix.expression: SPLITJOIN '(' IDENTIFIER ')' lblock declaration.list statement.list split.statement splitjoinPipeline.statement.list join.statement . rblock

    '}'  shift, and go to state 510

    rblock  go to state 827


state 815

   60 window.type: TUMBLING . '(' ')'
   62            | TUMBLING . '(' expression ')'

    '('  shift, and go to state 828


state 816

   59 window.type: SLIDING . '(' ')'
   61            | SLIDING . '(' expression ')'

    '('  shift, and go to state 829


state 817

   58 operator.selfdefine.window: IDENTIFIER window.type . ';'

    ';'  shift, and go to state 830


state 818

   55 operator.selfdefine.body.window.list.opt: WINDOW '{' operator.selfdefine.window.list '}' .

    $default  reduce using rule 55 (operator.selfdefine.body.window.list.opt)


state 819

   57 operator.selfdefine.window.list: operator.selfdefine.window.list operator.selfdefine.window .

    $default  reduce using rule 57 (operator.selfdefine.window.list)


state 820

   45 duplicate.statement: DUPLICATE '(' assignment.expression ')' ';' .

    $default  reduce using rule 45 (duplicate.statement)


state 821

   43 roundrobin.statement: ROUNDROBIN '(' argument.expression.list ')' ';' .

    $default  reduce using rule 43 (roundrobin.statement)


state 822

   34 operator.splitjoin: SPLITJOIN lblock declaration.list statement.list split.statement splitjoinPipeline.statement.list join.statement rblock .

    $default  reduce using rule 34 (operator.splitjoin)


state 823

  399 iteration.statement: FOR '(' error ';' expression.opt ';' expression.opt ')' $@23 costream.composite.statement .

    $default  reduce using rule 399 (iteration.statement)


state 824

  403 iteration.statement: FOR '(' expression.opt ';' error ';' expression.opt ')' $@25 costream.composite.statement .

    $default  reduce using rule 403 (iteration.statement)


state 825

  401 iteration.statement: FOR '(' expression.opt ';' expression.opt ';' error ')' $@24 costream.composite.statement .

    $default  reduce using rule 401 (iteration.statement)


state 826

  397 iteration.statement: FOR '(' expression.opt ';' expression.opt ';' expression.opt ')' $@22 costream.composite.statement .

    $default  reduce using rule 397 (iteration.statement)


state 827

   79 postfix.expression: SPLITJOIN '(' IDENTIFIER ')' lblock declaration.list statement.list split.statement splitjoinPipeline.statement.list join.statement rblock .

    $default  reduce using rule 79 (postfix.expression)


state 828

   60 window.type: TUMBLING '(' . ')'
   62            | TUMBLING '(' . expression ')'

    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    ')'                shift, and go to state 831
    SIZEOF             shift, and go to state 223
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 227
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    primary.expression         go to state 236
    postfix.expression         go to state 237
    unary.expression           go to state 337
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 241
    additive.expression        go to state 242
    shift.expression           go to state 243
    relational.expression      go to state 244
    equality.expression        go to state 245
    AND.expression             go to state 246
    exclusive.OR.expression    go to state 247
    inclusive.OR.expression    go to state 248
    logical.AND.expression     go to state 249
    logical.OR.expression      go to state 250
    conditional.expression     go to state 338
    assignment.expression      go to state 339
    expression                 go to state 832
    constant                   go to state 253
    string.literal.list        go to state 254


state 829

   59 window.type: SLIDING '(' . ')'
   61            | SLIDING '(' . expression ')'

    '&'                shift, and go to state 215
    '*'                shift, and go to state 216
    '+'                shift, and go to state 217
    '-'                shift, and go to state 218
    '~'                shift, and go to state 219
    '!'                shift, and go to state 220
    '('                shift, and go to state 221
    ')'                shift, and go to state 833
    SIZEOF             shift, and go to state 223
    SPLITJOIN          shift, and go to state 224
    PIPELINE           shift, and go to state 225
    FILEREADER         shift, and go to state 226
    IDENTIFIER         shift, and go to state 227
    STRINGliteral      shift, and go to state 228
    FLOATINGconstant   shift, and go to state 229
    INTEGERconstant    shift, and go to state 230
    OCTALconstant      shift, and go to state 231
    HEXconstant        shift, and go to state 232
    CHARACTERconstant  shift, and go to state 233
    ICR                shift, and go to state 234
    DECR               shift, and go to state 235

    primary.expression         go to state 236
    postfix.expression         go to state 237
    unary.expression           go to state 337
    unary.operator             go to state 239
    cast.expression            go to state 240
    multiplicative.expression  go to state 241
    additive.expression        go to state 242
    shift.expression           go to state 243
    relational.expression      go to state 244
    equality.expression        go to state 245
    AND.expression             go to state 246
    exclusive.OR.expression    go to state 247
    inclusive.OR.expression    go to state 248
    logical.AND.expression     go to state 249
    logical.OR.expression      go to state 250
    conditional.expression     go to state 338
    assignment.expression      go to state 339
    expression                 go to state 834
    constant                   go to state 253
    string.literal.list        go to state 254


state 830

   58 operator.selfdefine.window: IDENTIFIER window.type ';' .

    $default  reduce using rule 58 (operator.selfdefine.window)


state 831

   60 window.type: TUMBLING '(' ')' .

    $default  reduce using rule 60 (window.type)


state 832

   62 window.type: TUMBLING '(' expression . ')'
  149 expression: expression . ',' assignment.expression

    ')'  shift, and go to state 835
    ','  shift, and go to state 508


state 833

   59 window.type: SLIDING '(' ')' .

    $default  reduce using rule 59 (window.type)


state 834

   61 window.type: SLIDING '(' expression . ')'
  149 expression: expression . ',' assignment.expression

    ')'  shift, and go to state 836
    ','  shift, and go to state 508


state 835

   62 window.type: TUMBLING '(' expression ')' .

    $default  reduce using rule 62 (window.type)


state 836

   61 window.type: SLIDING '(' expression ')' .

    $default  reduce using rule 61 (window.type)
