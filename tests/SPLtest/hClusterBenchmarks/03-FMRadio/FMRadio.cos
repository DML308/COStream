//–¬Œƒ∑®≥ı…Û÷’∏Â...
composite LowPassFilter(output stream<float x>Out, input stream<float x>In)
{
	param 
		float rate, float cutoff, int taps, int decimation;
				  
	Out = LowPassFilterX(In)
	{

		static float pi = 3.1415926535897931; 
		float coeff[taps];
		float m = taps - 1;
		float w = 2 * pi * cutoff / rate;
			
		init
		{	
			int i;
			for (i = 0; i < taps; i++)
			{
				if (i - m/2 == 0)
					coeff[i] = w/pi;
				else
					coeff[i] = sin(w*(i-m/2))/ pi / (i-m/2) * (0.54 - 0.46 * cos(2*pi*i/m));
			}
			
		}
		work
		{
			int i;
			float sum = 0;
			for (i = 0; i < taps; i++)
				sum += (In[i].x * coeff[i]);
			Out[0].x = sum;
		}
		window{
			In sliding(taps,1+decimation);
			Out tumbling(1);
		} 
	};
}


composite FMDemodulator(output stream<float x>Out, input stream<float x>In)
{
	param 
		float sampRate, float max, float bandwidth;
				
	Out = FMDemodulatorX(In)
	{
		float mGain;
		init
		{
			float pi = 3.1415926535897931;
			mGain = max*(sampRate/(bandwidth*pi));
		}
		work
		{
			float temp = 0;

			temp = (float)(In[0].x * In[1].x);

			temp = (float)(mGain * atan(temp));
			
			Out[0].x = temp;
		}
		window{
			In sliding(2,1); //peek(2),pop(1)
			Out tumbling(1);
		} 
	};
	
}


composite BPFCore(output stream<float x>Out, input stream<float x>In)
{
	param 
		float rate, float low, float high, int taps;
		
	Out = splitjoin(In)
	{
		split duplicate();
		add LowPassFilter(rate, low, taps, 0);
		add LowPassFilter(rate, high, taps, 0);
		join roundrobin();
	};
} 


composite BandPassFilter(output stream<float x>Out, input stream<float x>In)
{
	param 
		float rate, float low, float high, int taps;
	
	stream<float x>Band;
	
	Band = BPFCore(In)(rate,low ,high,taps);
		
	Out = Subtracter(Band)
	{
		work
		{
			Out[0].x = Band[1].x - Band[0].x;
		}
		window {
			Band sliding(2,2); //peek(2),pop(2)
		} 
	};
}

composite Amplify(output stream<float x>Out, input stream<float x>In)
{
	param 
		float k;
				
	Out = AmplifyX(In)
	{
		work
		{
			Out[0].x = k * In[0].x;
		}
	};
}

composite EqSplit(output stream<float x>Out, input stream<float x>In)
{
	param 
		float rate, int bands, float cutoffs[bands], float gains[bands], int taps;

	Out = splitjoin(In)
	{
		int i;
		split duplicate();
		for(i=1;i<bands;i++)
		{
			add pipeline {
				add BandPassFilter(rate,cutoffs[i-1] ,cutoffs[i],taps);
				add Amplify(gains[i]);
			}
		}	
		join roundrobin();
	};

}

composite Annoy(output stream<float x>Out, input stream<float x>In)
{
	param 
		int bands;
		
	Out = AnnoyX(In)
	{
		work
		{
			float sum = 0;
			int i;
			for (i = 0; i < bands-1; i++)
				sum += In[i].x;
			Out[0].x = sum;
		}
		window{
			In sliding(bands-1,bands-1);
		} 
	};
}

composite Equalizer(output stream<float x>Out,input stream<float x> In)
{
	param 
		float rate, int bands, float cutoffs[bands], float gains[bands], int taps;
				
	Out = pipeline(In)
	{
		add EqSplit(rate,bands,cutoffs,gains,taps);
		
		add Annoy(bands); 
	};

}


composite FMRadioCore(output stream<float x>Out, input stream<float x>In)
{

	float samplingRate = 250000000; // 250 MHz sampling rate is sensible
	float cutoffFrequency = 108000000; //guess... doesn't FM freq max at 108 Mhz? 
	int numberOfTaps = 64;
	float maxAmplitude = 27000;
	float bandwidth = 10000;
	int i=0;

	// determine where equalizer cuts.  Note that <eqBands> is the
	// number of CUTS; there are <eqBands>-1 bands, with parameters
	// held in slots 1..<eqBands> of associated arrays.
	int eqBands = 11;
	float eqCutoff[eqBands];
	float eqGain[eqBands];
	float low = 55.000004;
	float high = 1760.0001;

	for (i=0; i<eqBands; i++) 
	{
		// have exponentially spaced cutoffs
		eqCutoff[i] = (float)exp(i*(log(high)-log(low))/(eqBands-1) + log(low));
	}

	// first gain doesn't really correspond to a band
	eqGain[0] = 0;
	for (i=1; i<eqBands; i++)
	{
		// the gain grows linearly towards the center bands
		float val = (((float)(i-1))-(((float)(eqBands-2))/2.0)) / 5.0;
		eqGain[i] = val > 0 ? (2.0-val) : (2.0+val);
	}
		
	Out = pipeline(In){
		add LowPassFilter(samplingRate, cutoffFrequency, numberOfTaps, 4); 
		add FMDemodulator(samplingRate, maxAmplitude, bandwidth); 
		add Equalizer(samplingRate, eqBands, eqCutoff, eqGain, numberOfTaps); 		
	};
}

composite Main()
{
	stream<float x> FloatOneSource,FMR;
	FloatOneSource = Source()
	{
		float x = 0;
		work
		{
			FloatOneSource[0].x = x;
			x += 1.0;
		}
	};
	
	FMR = FMRadioCore(FloatOneSource)(); 
		
	Sink(FMR)
	{
		work
		{
			//println(FMR[0].x);
		}
	};
}

