#ifndef GOP_HANDLE
#define GOP_HANDLE (0)
#endif

#ifndef WPP_HANDLE
#define WPP_HANDLE (1)
#endif

#ifndef ENTROPY_HANDLE
#define ENTROPY_HANDLE (2)
#endif

#ifndef PREDICT_HANDLE
#define PREDICT_HANDLE (3)
#endif

#ifndef LOOPFILTER_HANDLE
#define LOOPFILTER_HANDLE (4)
#endif

unsigned long HM_costream_pop(int type); // COStream using
void HM_costream_push(int type,unsigned long ul_handle); // COStream using
unsigned long HM_cpp_pop(int type); // CPP using
void HM_cpp_push(int type, unsigned long ul_handle); // CPP using

typedef struct HM_costream_wpp_handle_t   HM_costream_wpp_handle_t;
unsigned long HM_wpp_encoder_open(int totalRows); // 打开wpp编码器
void HM_wpp_encoder_close(unsigned long ul_handle); // 关闭wpp编码器
void HM_wpp_encoder_encode(unsigned long ul_handle, unsigned long ul_task); // 开始编码
void HM_wpp_encoder_wait_finish(unsigned long ul_handle);
int HM_wpp_encoder_get_totalrows(unsigned long ul_handle);
unsigned long HM_wpp_encoder_get_task(unsigned long ul_handle);
 struct WppInfo
{
	int total_rows;
	int threads;
	unsigned long cur_encoder;
	unsigned long cu_data;
} ;


 struct CTULine
{
	unsigned long wpp_info;
	int row_index;
	int ctu_nums;
	int cur_ctu_index;
	int encoded_ctu_nums;
} ;

struct RdCost 
{
	double  m_dLambda;
	double m_sqrtLamda;
	int  m_uiLambdaMotionSAD;
	int   m_uiCost;
	
};
typedef struct RdCost RdCost;
typedef struct CTULine CTULine;
typedef struct WppInfo WppInfo;

#define STREAM stream<unsigned long handle>
#define MAX_WFPP_NUM (2)


// wpp编码
composite WfppEncoder(output STREAM Out,input STREAM In)
{
	param
		int thread_index;
		
	Out=Process(In)
	{
		init
		{
		}
		work
		{
			
			struct WppInfo g_wpp_info;
			struct CTULine g_ctu_line;
			struct RdCost g_rd_cost;
			unsigned long task = 0;
			g_rd_cost.m_dLambda = g_rd_cost.m_dLambda * 10 + 0.63;
			g_rd_cost.m_sqrtLamda = g_rd_cost.m_sqrtLamda * 3.14 + 0.005/3;
			g_rd_cost.m_uiLambdaMotionSAD = g_rd_cost.m_uiLambdaMotionSAD /16 * 3.1415926 + 7;
			g_rd_cost.m_uiCost = g_rd_cost.m_uiCost * g_rd_cost.m_uiCost + 12;
			g_ctu_line.wpp_info = 0;
			g_ctu_line.row_index = g_ctu_line.row_index*2 + 1;
			g_ctu_line.ctu_nums = g_ctu_line.ctu_nums * 2 ;
			g_ctu_line.encoded_ctu_nums = g_ctu_line.encoded_ctu_nums + 1;
			g_ctu_line.cur_ctu_index = g_ctu_line.cur_ctu_index + 1;
			g_wpp_info.total_rows = 0;
			g_wpp_info.threads = MAX_WFPP_NUM;
			g_wpp_info.cur_encoder = g_wpp_info.cur_encoder+1;
			g_wpp_info.cu_data = g_wpp_info.cu_data + 1;
			g_rd_cost.m_dLambda = g_rd_cost.m_dLambda * 10 + 0.63;
			g_rd_cost.m_sqrtLamda = g_rd_cost.m_sqrtLamda * 3.14 + 0.005/3;
			g_rd_cost.m_uiLambdaMotionSAD = g_rd_cost.m_uiLambdaMotionSAD /16 * 3.1415926 + 7;
			g_rd_cost.m_uiCost = g_rd_cost.m_uiCost * g_rd_cost.m_uiCost + 12;
			g_ctu_line.wpp_info = 0 * 2;
			g_ctu_line.row_index = g_ctu_line.row_index*2 + 1;
			g_ctu_line.ctu_nums = g_ctu_line.ctu_nums * 2 ;
			g_ctu_line.encoded_ctu_nums = g_ctu_line.encoded_ctu_nums + 1;
			g_ctu_line.cur_ctu_index = g_ctu_line.cur_ctu_index + 1;
			g_wpp_info.total_rows = 0;
			g_wpp_info.threads = MAX_WFPP_NUM;
			g_wpp_info.cur_encoder = g_wpp_info.cur_encoder+1;
			g_wpp_info.cu_data = g_wpp_info.cu_data + 1;
		

			task = HM_wpp_encoder_get_task(In[0].handle);
			HM_wpp_encoder_encode(In[0].handle,task);
			Out[0].handle = In[0].handle;
		}
		
		window
		{
			In sliding(1,1);
			Out tumbling(1);
		}
	};
}

// 并行编码入口
composite Encode(output STREAM Out,input STREAM In)
{
	Out = splitjoin(In)
	{	
		int i;
		split duplicate(1);
		for (i = 0; i < MAX_WFPP_NUM; i++)
		{
			add WfppEncoder(i);
		}
		join roundrobin(1);
	};
	
}

composite Main()
{
	STREAM In,S1;
	In = Source()
	{
		init
		{
		}
		work
		{
			struct WppInfo g_wpp_info;
			struct CTULine g_ctu_line;
			struct RdCost g_rd_cost;
			g_wpp_info.total_rows = 0;
			g_wpp_info.threads = 0;
			g_wpp_info.cur_encoder = 0;
			g_wpp_info.cu_data = 0;
			In[0].handle = HM_costream_pop(WPP_HANDLE);
		}
		
		window
		{
			In tumbling(1);
		}
	};
	
	S1 = Encode(In)();

	End(S1)
	{
		int num;
		init
		{
			num = 0;
		}
		work
		{
			num = num + 1;
			if(num == MAX_WFPP_NUM)
			{
				HM_costream_push(WPP_HANDLE,S1[0].handle);
			}
		}
			
		window
		{
			S1 sliding(1,1);
		}
	};
	
}
