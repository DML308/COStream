typedef struct HM_loopfilter_t HM_loopfilter_t; 
unsigned long HM_loopfilter_init(unsigned long loopfilter,unsigned long pic);
void HM_loopfilter_collect_ver(unsigned long ul_handle);
void HM_loopfilter_process_ver(unsigned long ul_handle);
void HM_loopfilter_collect_hor(unsigned long ul_handle);
void HM_loopfilter_process_hor(unsigned long ul_handle);
void HM_loopfilter_clean(unsigned long ul_handle); 
void HM_loopfilter_input_lock();
void HM_loopfilter_input_unlock();
#define STREAM stream<unsigned long handle>

unsigned long g_loopfilter_handle;

composite VerCollect(output STREAM Out,input STREAM In)
{
	Out=Process(In)
	{
		init
		{
			
		}
		work
		{
			HM_loopfilter_collect_ver(In[0].handle);
			Out[0].handle = In[0].handle;
		}
		
		window
		{
			In sliding(1,1);
			Out tumbling(1);
		}
	};
}

composite VerProcess(output STREAM Out,input STREAM In)
{
	Out=Process(In)
	{
		init
		{
			
		}
		work
		{
			HM_loopfilter_process_ver(In[0].handle);
			Out[0].handle = In[0].handle;
		}
		
		window
		{
			In sliding(1,1);
			Out tumbling(1);
		}
	};
}

composite HorCollect(output STREAM Out,input STREAM In)
{
	Out=Process(In)
	{
		init
		{
			
		}
		work
		{
			HM_loopfilter_collect_hor(In[0].handle);
			Out[0].handle = In[0].handle;
		}
		
		window
		{
			In sliding(1,1);
			Out tumbling(1);
		}
	};
}

composite HorProcess(output STREAM Out,input STREAM In)
{
	Out=Process(In)
	{
		init
		{
			
		}
		work
		{
			HM_loopfilter_process_hor(In[0].handle);
			Out[0].handle = In[0].handle;
		}
		
		window
		{
			In sliding(1,1);
			Out tumbling(1);
		}
	};
}

composite Encode(output STREAM Out,input STREAM In)
{
	param
		int size;
	Out = pipeline(In){
		add VerCollect();
		add VerProcess();
		add HorCollect();
		add HorProcess();		
	};
	
}


composite Main()
{

	stream<unsigned long handle> In,S1;
	
	In = Source()
	{
		init
		{
		}
		work
		{
			In[0].handle = g_loopfilter_handle;
			HM_loopfilter_input_unlock();
		}
		
		window
		{
			In tumbling(1);
		}
	};
	
	S1 = Encode(In)(0);

	Merge(S1)
	{
		int num;
		init
		{
			num = 0;
		}
		work
		{
			if(num == 0)
			{
			}
			++num;
		}
			
		window
		{
			S1 sliding(1,1);
		}
	};
	
}
