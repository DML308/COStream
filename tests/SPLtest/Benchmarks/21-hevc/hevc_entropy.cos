#ifndef GOP_HANDLE
#define GOP_HANDLE (0)
#endif

#ifndef WPP_HANDLE
#define WPP_HANDLE (1)
#endif

#ifndef ENTROPY_HANDLE
#define ENTROPY_HANDLE (2)
#endif

#ifndef PREDICT_HANDLE
#define PREDICT_HANDLE (3)
#endif

#ifndef LOOPFILTER_HANDLE
#define LOOPFILTER_HANDLE (4)
#endif

unsigned long HM_costream_pop(int type); // COStream using
void HM_costream_push(int type,unsigned long ul_handle); // COStream using
unsigned long HM_cpp_pop(int type); // CPP using
void HM_cpp_push(int type, unsigned long ul_handle); // CPP using

unsigned long HM_entropy_encoder_open(); // 创建一个熵编码器
void HM_entropy_encoder_init(unsigned long ul_handle, unsigned long enc_cu); // 熵编码器初始化
void HM_entropy_encoder_close(unsigned long ul_handle); // 关闭一个熵编码器

unsigned long allocEntropyParameter(unsigned long ul_handle, unsigned long pcDataCU, int uiDepth, int index);//(unsigned long ul_handle, void* pcDataCU, int uiDepth, int index, void* inputArray, void* retAbsPartIdxArray);
void encodeSplitFlag(unsigned long ul_param);
void encodeSub(unsigned long ul_param);
void encodeCUTransquantBypassFlag(unsigned long ul_param);
void encodeSkipFlag(unsigned long ul_param);
void encodeMergeIndex(unsigned long ul_param);
void encodePredMode(unsigned long ul_param);
void encodeIPCMInfo(unsigned long ul_param);
void encodePartSize(unsigned long ul_param);
void encodePredInfo(unsigned long ul_param);
void encodeCoeff(unsigned long ul_param);
void end_encode(unsigned long ul_param);
void freeEntropyParameter(unsigned long ul_param);
int getDepthFromCollectArray(unsigned long ul_array, int index);
int getIndexFromCollectArray(unsigned long ul_array,int index);
void xEncodeCU_depth_N(unsigned long ul_handle, unsigned long pcDataCU, int uiDepth, int index);

unsigned long g_pcDataCU ;
unsigned long g_entropy_encoder_handle;
unsigned long HM_entropy_encoder_get_cudata(unsigned long ul_handle);

void HM_entropy_encoder_notify_finish(unsigned long ul_handle);
void HM_entropy_encoder_wait_finish(unsigned long ul_handle);

#define STREAM_PARAM stream<unsigned long handle,unsigned long parameter,unsigned long pcDataCU,int uiDepth,int index>

#define COPY_STREAM() \
	Out[0].handle = In[0].handle;\
	Out[0].parameter = In[0].parameter;\
	Out[0].pcDataCU = In[0].pcDataCU;\
	Out[0].uiDepth = In[0].uiDepth;\
	Out[0].index = In[0].index


// 对单个CTU进行熵编码

composite PrepareEncode(output STREAM_PARAM Out,input STREAM_PARAM In)
{
	Out=internal(In)
	{
		work
		{
			In[0].parameter = allocEntropyParameter(In[0].handle, In[0].pcDataCU, In[0].uiDepth, In[0].index);
			COPY_STREAM();
			
		}
		
		window
		{
			In sliding(1,1);
			Out tumbling(1);
		}
	};
}

composite EncodeSplitFlag(output STREAM_PARAM Out,input STREAM_PARAM In)
{
	Out=internal(In)
	{
		work
		{
			encodeSplitFlag(In[0].parameter);
			COPY_STREAM();
		}
		
		window
		{
			In sliding(1,1);
			Out tumbling(1);
		}
	};
}

composite EncodeSub(output STREAM_PARAM Out,input STREAM_PARAM In)
{
	Out=internal(In)
	{
		work
		{
			encodeSub(In[0].parameter);
			COPY_STREAM();
		}
		
		window
		{
			In sliding(1,1);
			Out tumbling(1);
		}
	};
}

composite EncodeCUTransquantBypassFlag(output STREAM_PARAM Out,input STREAM_PARAM In)
{
	Out=internal(In)
	{
		work
		{
			encodeCUTransquantBypassFlag(In[0].parameter);
			COPY_STREAM();
		}
		
		window
		{
			In sliding(1,1);
			Out tumbling(1);
		}
	};
}

composite EncodeSkipFlag(output STREAM_PARAM Out,input STREAM_PARAM In)
{
	Out=internal(In)
	{
		work
		{
			encodeSkipFlag(In[0].parameter);
			COPY_STREAM();
		}
		
		window
		{
			In sliding(1,1);
			Out tumbling(1);
		}
	};
}

composite EncodeMergeIndex(output STREAM_PARAM Out,input STREAM_PARAM In)
{
	Out=internal(In)
	{
		work
		{
			encodeMergeIndex(In[0].parameter);
			COPY_STREAM();
		}
		
		window
		{
			In sliding(1,1);
			Out tumbling(1);
		}
	};
}

composite EncodePredMode(output STREAM_PARAM Out,input STREAM_PARAM In)
{
	Out=internal(In)
	{
		work
		{
			encodePredMode(In[0].parameter);
			COPY_STREAM();
		}
		
		window
		{
			In sliding(1,1);
			Out tumbling(1);
		}
	};
}

composite EncodeIPCMInfo(output STREAM_PARAM Out,input STREAM_PARAM In)
{
	Out=internal(In)
	{
		work
		{
			encodeIPCMInfo(In[0].parameter);
			COPY_STREAM();
		}
		
		window
		{
			In sliding(1,1);
			Out tumbling(1);
		}
	};
}

composite EncodeCoeff(output STREAM_PARAM Out,input STREAM_PARAM In)
{
	Out=internal(In)
	{
		work
		{
			encodeCoeff(In[0].parameter);
			COPY_STREAM();
		}
		
		window
		{
			In sliding(1,1);
			Out tumbling(1);
		}
	};
}

composite EndEncode(output STREAM_PARAM Out,input STREAM_PARAM In)
{
	Out=internal(In)
	{
		work
		{
			end_encode(In[0].parameter);
			freeEntropyParameter(In[0].parameter);
			In[0].parameter = 0;
			COPY_STREAM();
		}
		
		window
		{
			In sliding(1,1);
			Out tumbling(1);
		}
	};
}


composite EncodeCU(output STREAM_PARAM Out,input STREAM_PARAM In)
{
	Out = pipeline(In){
		add PrepareEncode();
		add EncodeSplitFlag();
		add EncodeSub();
		add EncodeCUTransquantBypassFlag();
		add EncodeSkipFlag();
		add EncodeMergeIndex();
		add EncodePredMode();
		add EncodeIPCMInfo();
		add EncodeCoeff();
		add EndEncode();	
	};
}



composite EntropyEncoder(output STREAM_PARAM Out,input STREAM_PARAM In)
{
	Out = pipeline(In){
		int i = 0;
		//for(i = 0; i < 256; ++i) // 85
		{
			add EncodeCU();
		}	
	};
}

composite Main()
{
	STREAM_PARAM In,S1;
	
	In = Source()
	{
		init
		{
		}
		work
		{
			int i = 0;
			
			for(i = 0; i < 1; ++i){
				In[i].handle = HM_costream_pop(ENTROPY_HANDLE);
				HM_costream_push(ENTROPY_HANDLE,In[i].handle);
				In[i].pcDataCU = HM_entropy_encoder_get_cudata(In[i].handle);
				In[i].index = i;
				In[i].uiDepth = 0;
				In[i].parameter = 0;
			}
		}
		
		window
		{
			In tumbling(1);
		}
	};
	
	S1 = EntropyEncoder(In)();
	
	Sink(S1)
	{
		work
		{
			HM_entropy_encoder_notify_finish(S1[0].handle);
		}
		
		window
		{
			S1 tumbling(1);
		}
	};
	
}
