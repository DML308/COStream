double pi=3.141592654;
composite DFTFilter(output stream<double x>Out, input stream<double x>In)
{
	param
		int DFTLen, double range;
	Out = DFTFilter(In)
	{
		double deter; 
		//since the previous complex value is multiplied by the deter each
		//time, by the time the last time sample is windowed out it's
		//effect will have been multiplied by deter DFTLen times, hence it
		//needs to be multiplied by deter^DFTLen before being subtracted
		double detern;
		double prevR, prevI;
		
		double wR, wI; //represents w^(-k)
			
		init
		{
			deter = 0.999999;
			detern = 1.0;
			wR = cos(range);
			wI = -sin(range);
			prevR = 0; prevI = 0;				
		
		}
		work
		{
			double nextR, nextI;
			double nextVal = In[DFTLen].x;
			double current = In[0].x;
			prevR = prevR * deter + (nextVal - (detern * current));
			prevI = prevI * deter;
			nextR = prevR * wR - prevI * wI;
			nextI = prevR * wI + prevI * wR;
			prevR = nextR; prevI = nextI;
			Out[0].x=prevR;
			Out[1].x=prevI;	
		
		}
		window{
			In sliding(DFTLen+1,1);
			Out tumbling(2);		
		}
	};
}

composite FilterBank(output stream<double x>Out, input stream<double x>In) 
{
	param
		int channels;
	Out = splitjoin(In)
	{
		int k;
		split duplicate();
		for(k=0; k<= channels/2; k++)
		{
			add DFTFilter(channels,2*pi*k/channels);
		}	
		join roundrobin(2);
	};
}

composite Identity(output stream<double x>Out, input stream<double x>In)
{
	Out = Identity(In)
	{ 
		work
		{
			Out[0].x = In[0].x;
		}
	};
}

composite FIRSmoothingFilter(output stream<double x>Out, input stream<double x>In)
{
	param
		int DFTLen;
	int cosWinLength = 15;//zww:20120321
		
	Out = FIRSmoothingFilter(In)
	{
		double cosWin[15] = {0.1951, 0.3827, 0.5556, 0.7071, 0.8315, 0.9239, 0.9808, 1.1234, 0.9808, 0.9239, 0.8315, 0.7071, 0.5556, 0.3827, 0.1951 };
		int offset = 7;
		work
		{
			double y = 0;
			int i,k,n;
			cosWin[7] = 1.0;
			for(n=0; n < DFTLen; n++)
			{
				y = 0;
				for(k = 0; k < cosWinLength; k++)
				{
					i = k - offset; //so that when i = 0, k will be at the center
					if (((n - i) >= 0) && ((n - i) < DFTLen))
						y += In[n-i].x * cosWin[k];
				}
				Out[n].x = y;
			}
		}
		window{
			In sliding(cosWinLength,DFTLen); // lxx
			Out tumbling(DFTLen); // lxx
		}
	};
}

composite Duplicator(output stream<double x>Out, input stream<double x>In)
{
	param
		int oldLen, int newLen;		
	Out = Duplicator(In)
	{
		work
		{
			int i;
			if (newLen <= oldLen) 
			{
				for(i=0; i < newLen; i++)
					Out[i].x=In[i].x;
			} 
			else 
			{
				double orig[oldLen] ;
				for( i=0; i < oldLen; i++)
				{
					orig[i] = In[i].x;
				}
				for( i=0; i < newLen; i++)
				{
					Out[i].x = orig[i % oldLen];
					//print("Duplicator := ");println(Out[i].x);
				}		
			}
		}				
		window 
		{
			Out tumbling(newLen);
			In sliding(oldLen,oldLen);
		}
	};
}

composite LinearInterpolator(output stream<double x>Out, input stream<double x>In)
{
	param
		int interp;
	Out = LinearInterpolator(In)
	{
		work
		{
			double base = In[0].x;
			double diff = In[1].x - base;
			double interp_f = (double)interp;
			double i_f;
			int i;
			Out[0].x=base;
			//already pushed 1, so just push another (interp - 1) floats
			for(i= 1; i < interp; i++)
			{
				i_f = (double)i;
				Out[i].x=(base + (i_f/interp_f) * diff);
			}
		}
		window
		{
			Out tumbling(interp);
			In sliding(2,1);	
		}
	};
}

composite Decimator(output stream<double x>Out, input stream<double x>In)
{
	param
		int decim;
	Out = Decimator(In)
	{
		work
		{
			Out[0].x = In[0].x;			
		}
		window
		{
			In sliding(decim,decim);	
		}
	};
}

composite Remapper(output stream<double x>Out, input stream<double x>In)
{
	param
		int oldLen, int newLen;
	Out = pipeline(In)
	{
		add LinearInterpolator(newLen);		
		add Decimator(oldLen);
	};
}

composite FIRSJ_Dec_DepRemSJ(output stream<double x>Out, input stream<double x>In) 
{
	param
		int DFTLen_red, int newLen_red, int DFTLen, int newLen;
	stream<double x>OutX,OutY,DEC;	
	OutX = splitjoin(In)
	{
		split duplicate();
		add FIRSmoothingFilter_23_Fission(2,DFTLen);
		add Identity();
		join roundrobin();			
	};
	
	DEC = Deconvolve(OutX)
	{
		work
		{
			double den, num;
			den = OutX[0].x;
			num = OutX[1].x;
			DEC[0].x = den;
			if (den == 0.0)
				DEC[1].x = 0.0;
			else
				DEC[1].x = (num / den);
		}
		window 
		{	
			DEC  tumbling(2);
			OutX sliding(2,2);
		}
	};
	
	OutY = splitjoin(DEC)
	{
		split roundrobin(1,1);
		add Duplicator(DFTLen_red, newLen_red);
		add Remapper(DFTLen_red, newLen_red);
		join roundrobin();		
	};
	
	Out = Multiplier(OutY)
	{
		work
		{
			Out[0].x = OutY[0].x * OutY[1].x;
		}
		window{
			OutY sliding(2,2);
		} 
	};
}

composite MagnitudeStuff(output stream<double x>Out, input stream<double x>In) 
{
	param
		int DFTLen_red, int newLen_red, int n_len, int m_len, int DFTLen, int newLen, double speed;

	Out = pipeline(In)
	{
		add FIRSJ_Dec_DepRemSJ(DFTLen_red, newLen_red, DFTLen, newLen);
		add Identity();
	};		
}

composite PhaseUnwrapper(output stream<double x>Out, input stream<double x>In)
{
	Out = PhaseUnwrapper(In)
	{
		double estimate, previous;
		init
		{
			estimate = 0.0;
			previous = 0.0;			
		}
		work
		{
			double unwrapped = In[0].x;
			double delta = unwrapped - previous;
			//print("unwrapped := ");print(unwrapped);
			//print(" || estimate := ");print(estimate);
			//print(" || previous := ");print(previous);
			while (delta > ((2 * pi * 11.0) / 16.0) )
			{
				unwrapped -= 2 * pi;
				delta -= 2 * pi;
				estimate -= 2 * pi;
			}
			while (delta < (-(2 * pi * 11.0) / 16.0) )
			{
				unwrapped += 2 * pi;
				delta += 2 * pi;
				estimate += 2 * pi;
			}
			previous = unwrapped;
			Out[0].x = unwrapped;	
			//print(" || result := ");println(Out[0].x);				
		}	
	};
}

composite FirstDifference(output stream<double x>Out, input stream<double x>In)
{
	Out = FirstDifference(In)
	{
		double prev;
		init
		{
			prev = 0.0;		
		}
		work
		{
			Out[0].x = In[0].x - prev;
			prev = In[0].x;		
		}	
	};
}

composite Accumulator(output stream<double x>Out, input stream<double x>In)
{
	Out = Accumulator(In)
	{
		double valx;
		init
		{
			valx = 0.0;		
		}
		work
		{
			valx += In[0].x;
			Out[0].x = valx;		
		}	
	};
}

composite ConstMultiplier(output stream<double x>Out, input stream<double x>In)
{
	param
		double mult;

	Out=ConstMultiplier(In)
	{
		work
		{
			Out[0].x=In[0].x*mult;
		}	
	};
}

composite InnerPhaseStuff(output stream<double x>Out, input stream<double x>In)
{
	param
		int n_len, int m_len, double c, double speed;
	Out = pipeline(In)
	{
		add PhaseUnwrapper();
		add FirstDifference();
		if(c != 1.0)
			add ConstMultiplier(c);
		if(speed != 1.0)
			add Remapper(n_len, m_len);
		add Accumulator();	
	};
}

composite PhaseStuff(output stream<double x>Out, input stream<double x>In)
{
	param 
		int n_len, int m_len, int DFTLen_red, int newLen_red, int DFTLen, int newLen, double c, double speed;
	
	Out = pipeline(In)
	{
		add splitjoin
		{
			int i;
			split roundrobin(1);
			for(i=0;i<DFTLen;i++)
				add InnerPhaseStuff(n_len,m_len,c,speed);
			join roundrobin();
		};
		if(newLen != DFTLen)
			add Duplicator(DFTLen_red, newLen_red);
		else 
			add Identity();
	};
}

composite Doubler(output stream<double x>Out, input stream<double x>In)
{
	Out = Doubler(In)
	{
		work
		{
			Out[0].x = In[0].x+In[0].x;
		}		
	};
}

composite Adder(output stream<double x>Out, input stream<double x>In)
{
	param
		int length;
	Out = Adder(In)
	{
		work
		{
			double valx = 0.0;
			int i;
			for(i=0; i<length; i++)
				valx += In[i].x;
			Out[0].x=valx;	// lxx		
		}
		window
		{
			In sliding(10,10);					
		}
	};
}


composite Subtractor(output stream<double x>Out, input stream<double x>In)
{
	Out = Subtractor(In)
	{
		work
		{
			Out[0].x = In[0].x-In[1].x;
		}
		window {
			In sliding(2,2);		
		}
	};
}

composite SumRealsRealHandler(output stream<double x>Out, input stream<double x>In)
{
	param
		int DFTLen;
	Out = pipeline(In)
	{
		add splitjoin {
			split roundrobin(1,DFTLen-2,1);
			add Identity();
			add Doubler();
			add Identity();
			join roundrobin(1,DFTLen-2,1);
		};
		add splitjoin {
			split roundrobin(1,1);
			add	Adder((DFTLen+1)/2);
			add	Adder((DFTLen+1)/2);
			join roundrobin();
		};
		
		add Subtractor();
		add ConstMultiplier(1.0/((DFTLen-1)*2));	
	};
}

composite FloatVoid(output stream<float x>Out, input stream<float x>In)
{
	Out = FloatVoid(In)
	{
		work
		{//是空		
		
		}
		window
		{
			In sliding(1,1);
			Out tumbling(0);
		}
	};
}

composite SumReals(output stream<float x>Out, input stream<float x>In)
{
	param
		int DFTLen;
	Out = splitjoin (In)
	{	
		split roundrobin(1,1);
		add SumRealsRealHandler(DFTLen);
		add FloatVoid();
		join roundrobin(1,0);//Roundrobin中有一个参数为0，即push=0的情况
	};
}

composite InvDelay(output stream<float x>Out, input stream<float x>In)
{
	param
		int N;
	Out = InvDelay(In)
	{
		work
		{
			Out[0].x = In[N].x;	// lxx		
		}
		window
		{
			In sliding(N+1,1);
			Out tumbling(1);
		}			
	};
}

composite FIRSmoothingFilter_23_Fission(output stream<int x>Out, input stream<int x>In)
{
param
	int size,int FIRSmoothingFilter_param1;
		Out = splitjoin(In)
		{
			int i;
			split roundrobin(15);
			for (i = 0; i < size; i++)
			{
				add FIRSmoothingFilter(FIRSmoothingFilter_param1);
			}
			join roundrobin(15);
	};
}

composite Main() 
{
	int DFT_LENGTH_NOM = 28;
	int DFT_LENGTH = DFT_LENGTH_NOM/2 + 1;
	
	double FREQUENCY_FACTOR = 0.6;
	
	double GLOTTAL_EXPANSION = 1/1.2;
	int NEW_LENGTH = (int)(DFT_LENGTH * GLOTTAL_EXPANSION / FREQUENCY_FACTOR);
	
	int DFT_LENGTH_REDUCED = 3;
	
	int NEW_LENGTH_REDUCED = 4;
	
	double SPEED_FACTOR = 1.0;
	
	int n_LENGTH = 1;
	
	int m_LENGTH = 1;
		
	stream<double x> Source,FloatSource,DEL,FB,RTP;
	stream<double x> SJ2,PTR,SR,IVD;
	stream<int x> FTS;
	Source = StepSource()
	{
		int x,up;
		int length = 100;
		init
		{
			up = 1;
			x = 0;
		}
		work
		{
			Source[0].x = x;
			if (x == length)  
				up = 0; 
			else if (x == 0)  
				up = 1; 

			if (up == 1) 
				x += 1;
			else 
				x -= 1;
		}
	};
	
	FloatSource = IntToFloat(Source)
	{
		work
		{
			FloatSource[0].x = Source[0].x ;
		}
	};
	
	DEL = Delay(FloatSource)
	{
		double delay[DFT_LENGTH_NOM];
		init
		{
			int i;
			for( i=0; i<DFT_LENGTH_NOM; i++)
				delay[i] = 0.0;
		}
		work
		{
			int i;
			DEL[0].x = delay[0];
				
			for(i=0; i<DFT_LENGTH_NOM-1; i++)
				delay[i] = delay[i+1];
			delay[DFT_LENGTH_NOM-1] = FloatSource[0].x;
		}
	};

	FB = FilterBank(DEL)(DFT_LENGTH_NOM);
	
	RTP = RectangularToPolar(FB)
	{
		double a,y;
		double r,theta;
		init
		{
			a = 0.0;
			y = 0.0;
			theta = 0.0;
			r = 0.0;			
		}
			
		work
		{
			a = FB[0].x; 
			y = FB[1].x;
				
			r = sqrt(a * a + y * y);
			theta = atan2(y, a);
			   
			RTP[0].x = r;
			RTP[1].x = theta;
		}
		window {
			FB  sliding(2,2);
			RTP tumbling(2);
		} 
	};
	

	SJ2 = splitjoin(RTP)
	{
		split roundrobin(); // lxx
		add MagnitudeStuff(DFT_LENGTH_REDUCED,NEW_LENGTH_REDUCED,m_LENGTH,n_LENGTH,DFT_LENGTH,NEW_LENGTH,SPEED_FACTOR);
		add PhaseStuff(n_LENGTH, m_LENGTH, DFT_LENGTH_REDUCED,NEW_LENGTH_REDUCED, DFT_LENGTH,NEW_LENGTH, FREQUENCY_FACTOR,SPEED_FACTOR);
		join roundrobin();			
	};
	
	PTR = PolarToRectangular(SJ2)
	{
		work
		{
			double r, theta;
			r = SJ2[0].x;
			theta = SJ2[1].x;
			PTR[0].x = r * cos(theta);
			PTR[1].x = r * sin(theta);
		}
		window {
			SJ2 sliding(2,2);
			PTR tumbling(2);	
		}	
	};
	
	SR = SumReals(PTR)(NEW_LENGTH);

	IVD = InvDelay(SR)((DFT_LENGTH - 2) * m_LENGTH / n_LENGTH);
		
	FTS = FloatToShort(IVD)
	{
		work
		{
			int s;
			double fs = IVD[0].x + 0.5;
			fs = (fs > 32767.0 ? 32767.0 : (fs < -32767.0 ? -32767.0 : fs));
			s = (int)fs;
			FTS[0].x=s;			
		}		
	};		
	
	IntSink(FTS)
	{
		work
		{
			println(FTS[0].x);
			//ss<<FTS[0].x;
		}
	};
}
