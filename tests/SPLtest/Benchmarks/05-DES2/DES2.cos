	// used for printing descriptor in output
	int PRINTINFO  = 0;
	int PLAINTEXT      = 0;
    int USERKEY        = 1;
    int CIPHERTEXT     = 2;

    // algorithm has 16 total rounds
    int MAXROUNDS      = 64;

    // sample user keys
    int USERKEYS[34][2] = {{0x00000000, 0x00000000},  // 0x0000000000000000
                           {0xFFFFFFFF, 0xFFFFFFFF},  // 0xFFFFFFFFFFFFFFFF
                           {0x30000000, 0x00000000},  // 0x3000000000000000
                           {0x11111111, 0x11111111},  // 0x1111111111111111
                           {0x01234567, 0x89ABCDEF},  // 0x0123456789ABCDEF
                           {0x11111111, 0x11111111},  // 0x1111111111111111
                           {0x00000000, 0x00000000},  // 0x0000000000000000
                           {0xFEDCBA98, 0x76543210},  // 0xFEDCBA9876543210
                           {0x7CA11045, 0x4A1A6E57},  // 0x7CA110454A1A6E57
                           {0x0131D961, 0x9DC1376E},  // 0x0131D9619DC1376E
                           {0x07A1133E, 0x4A0B2686},  // 0x07A1133E4A0B2686
                           {0x3849674C, 0x2602319E},  // 0x3849674C2602319E
                           {0x04B915BA, 0x43FEB5B6},  // 0x04B915BA43FEB5B6
                           {0x0113B970, 0xFD34F2CE},  // 0x0113B970FD34F2CE
                           {0x0170F175, 0x468FB5E6},  // 0x0170F175468FB5E6
                           {0x43297FAD, 0x38E373FE},  // 0x43297FAD38E373FE
                           {0x07A71370, 0x45DA2A16},  // 0x07A7137045DA2A16
                           {0x04689104, 0xC2FD3B2F},  // 0x04689104C2FD3B2F
                           {0x37D06BB5, 0x16CB7546},  // 0x37D06BB516CB7546
                           {0x1F08260D, 0x1AC2465E},  // 0x1F08260D1AC2465E
                           {0x58402364, 0x1ABA6176},  // 0x584023641ABA6176
                           {0x02581616, 0x4629B007},  // 0x025816164629B007
                           {0x49793EBC, 0x79B3258F},  // 0x49793EBC79B3258F
                           {0x4FB05E15, 0x15AB73A7},  // 0x4FB05E1515AB73A7
                           {0x49E95D6D, 0x4CA229BF},  // 0x49E95D6D4CA229BF
                           {0x018310DC, 0x409B26D6},  // 0x018310DC409B26D6
                           {0x1C587F1C, 0x13924FEF},  // 0x1C587F1C13924FEF
                           {0x01010101, 0x01010101},  // 0x0101010101010101
                           {0x1F1F1F1F, 0x0E0E0E0E},  // 0x1F1F1F1F0E0E0E0E
                           {0xE0FEE0FE, 0xF1FEF1FE},  // 0xE0FEE0FEF1FEF1FE
                           {0x00000000, 0x00000000},  // 0x0000000000000000
                           {0xFFFFFFFF, 0xFFFFFFFF},  // 0xFFFFFFFFFFFFFFFF
                           {0x01234567, 0x89ABCDEF},  // 0x0123456789ABCDEF
                           {0xFEDCBA98, 0x76543210}}; // 0xFEDCBA9876543210

    // PC1 permutation for key schedule
    int PC1[56] = {57, 49, 41, 33, 25, 17,  9,
                    1, 58, 50, 42, 34, 26, 18,
                   10,  2, 59, 51, 43, 35, 27,
                   19, 11,  3, 60, 52, 44, 36,
                   63, 55, 47, 39, 31, 23, 15,
                    7, 62, 54, 46, 38, 30, 22,
                   14,  6, 61, 53, 45, 37, 29,
                   21, 13,  5, 28, 20, 12,  4};
    
    // PC2 permutation for key schedule
    int PC2[48] = {14, 17, 11, 24,  1,  5,
                    3, 28, 15,  6, 21, 10,
                   23, 19, 12,  4, 26,  8,
                   16,  7, 27, 20, 13,  2,
                   41, 52, 31, 37, 47, 55,
                   30, 40, 51, 45, 33, 48,
                   44, 49, 39, 56, 34, 53,
                   46, 42, 50, 36, 29, 32};
    
    // key rotation table for key schedule
    int RT[16] = {1, 1, 2, 2, 
                  2, 2, 2, 2, 
                  1, 2, 2, 2, 
                  2, 2, 2, 1};
    
    // initial permuation
    int IP[64] = {58, 50, 42, 34, 26, 18, 10, 2,
                  60, 52, 44, 36, 28, 20, 12, 4,
                  62, 54, 46, 38, 30, 22, 14, 6,
                  64, 56, 48, 40, 32, 24, 16, 8,
                  57, 49, 41, 33, 25, 17,  9, 1,
                  59, 51, 43, 35, 27, 19, 11, 3,
                  61, 53, 45, 37, 29, 21, 13, 5,
                  63, 55, 47, 39, 31, 23, 15, 7};

    // expansion permutation (bit selection)
    int E[48] = {32,  1,  2,  3,  4,  5,
                  4,  5,  6,  7,  8,  9,
                  8,  9, 10, 11, 12, 13,
                 12, 13, 14, 15, 16, 17,
                 16, 17, 18, 19, 20, 21,
                 20, 21, 22, 23, 24, 25,
                 24, 25, 26, 27, 28, 29,
                 28, 29, 30, 31, 32,  1};
    
    // P permutation of sbox output
    int P[32] = {16,  7, 20, 21,
                 29, 12, 28, 17,
                  1, 15, 23, 26,
                  5, 18, 31, 10,
                  2,  8, 24, 14,
                 32, 27,  3,  9,
                 19, 13, 30,  6,
                 22, 11,  4, 25};
    
    // inverse intial permuation
    int IPm1[64] = {40, 8, 48, 16, 56, 24, 64, 32,
                    39, 7, 47, 15, 55, 23, 63, 31,
                    38, 6, 46, 14, 54, 22, 62, 30,
                    37, 5, 45, 13, 53, 21, 61, 29,
                    36, 4, 44, 12, 52, 20, 60, 28,
                    35, 3, 43, 11, 51, 19, 59, 27,
                    34, 2, 42, 10, 50, 18, 58, 26,
                    33, 1, 41,  9, 49, 17, 57, 25};
    
    // provides sbox permutations for DES encryption
    int S1[4][16] = {{14,  4, 13,  1,  2, 15, 11,  8,  3, 10,  6, 12,  5,  9,  0,  7},
                     { 0, 15,  7,  4, 14,  2, 13,  1, 10,  6, 12, 11,  9,  5,  3,  8},
                     { 4,  1, 14,  8, 13,  6,  2, 11, 15, 12,  9,  7,  3, 10,  5,  0},
                     {15, 12,  8,  2,  4,  9,  1,  7,  5, 11,  3, 14, 10,  0,  6, 13}};
    
    int S2[4][16] = {{15,  1,  8, 14,  6, 11,  3,  4,  9,  7,  2, 13, 12,  0,  5, 10},
                     { 3, 13,  4,  7, 15,  2,  8, 14, 12,  0,  1, 10,  6,  9, 11,  5},
                     { 0, 14,  7, 11, 10,  4, 13,  1,  5,  8, 12,  6,  9,  3,  2, 15},
                     {13,  8, 10,  1,  3, 15,  4,  2, 11,  6,  7, 12,  0,  5, 14, 9}};
    
    int S3[4][16] = {{10,  0,  9, 14,  6,  3, 15,  5,  1, 13, 12,  7, 11,  4,  2,  8},
                     {13 , 7,  0,  9,  3,  4,  6, 10,  2,  8,  5, 14, 12, 11, 15,  1},
                     {13 , 6,  4,  9,  8, 15,  3,  0, 11,  1,  2, 12,  5, 10, 14,  7},
                     { 1, 10, 13,  0,  6,  9,  8,  7,  4, 15, 14,  3, 11,  5,  2, 12}};
    
    int S4[4][16] = {{ 7, 13, 14,  3,  0,  6,  9, 10,  1,  2,  8,  5, 11, 12,  4, 15},
                     {13,  8, 11,  5,  6, 15,  0,  3,  4,  7,  2, 12,  1, 10, 14,  9},
                     {10,  6,  9,  0, 12, 11,  7, 13, 15,  1,  3, 14,  5,  2,  8,  4},
                     { 3, 15,  0,  6, 10,  1, 13,  8,  9,  4,  5, 11, 12,  7,  2, 14}};
    
    int S5[4][16] = {{ 2, 12,  4,  1,  7, 10, 11,  6,  8,  5,  3, 15, 13,  0, 14,  9},
                     {14, 11,  2, 12,  4,  7, 13,  1,  5,  0, 15, 10,  3,  9,  8,  6},
                     { 4,  2,  1, 11, 10, 13,  7,  8, 15,  9, 12,  5,  6,  3,  0, 14},
                     {11,  8, 12,  7,  1, 14,  2, 13,  6, 15,  0,  9, 10,  4,  5,  3}}; 
    
    int S6[4][16] = {{12,  1, 10, 15,  9,  2,  6,  8,  0, 13,  3,  4, 14,  7,  5, 11},
                     {10, 15,  4,  2,  7, 12,  9,  5,  6,  1, 13, 14,  0, 11,  3,  8},
                     { 9, 14, 15,  5,  2,  8, 12,  3,  7,  0,  4, 10,  1, 13, 11,  6},
                     { 4,  3,  2, 12,  9,  5, 15, 10, 11, 14,  1,  7,  6,  0,  8, 13}};
    
    int S7[4][16] = {{ 4, 11,  2, 14, 15,  0,  8, 13,  3, 12,  9,  7,  5, 10,  6,  1},
                     {13,  0, 11,  7,  4,  9,  1, 10, 14,  3,  5, 12,  2, 15,  8,  6},
                     { 1,  4, 11, 13, 12,  3,  7, 14, 10, 15,  6,  8,  0,  5,  9,  2},
                     { 6, 11, 13,  8,  1,  4, 10,  7,  9,  5,  0, 15, 14,  2,  3, 12}};
    
    int S8[4][16] = {{13,  2,  8,  4,  6, 15, 11,  1, 10,  9,  3, 14,  5,  0, 12,  7},
                     { 1, 15, 13,  8, 10,  3,  7,  4, 12,  5,  6, 11,  0, 14,  9,  2},
                     { 7, 11,  4,  1,  9, 12, 14,  2,  0,  6, 10, 13, 15,  3,  5,  8},
                     { 2,  1, 14,  7,  4, 10,  8, 13, 15, 12,  9,  0,  3,  5,  6, 11}};
    
composite CrissCross(output stream<int x>Out,input stream<int x>In)
{
	Out=CrissCross(In)
	{
		work
		{
			int i;
			for (i = 0; i < 32; i++) 
			{
				Out[i].x=In[32+i].x;
			}
			for (i = 0; i < 32; i++) 
			{
				Out[i+32].x=In[i].x;  // lxx
			}
			for (i = 0; i < 64; i++) 
			{
				//print("CrissCross := ");
				//println(Out[i].x);
			}
				
		}
		window{
			Out tumbling(64);
			In  sliding(64,64);
		} 
	};
}

composite doIPm1(output stream<int x>Out,input stream<int x>In)
{
	Out=doIPm1(In)
	{
		work
		{
			int i;
			for (i = 0; i < 64; i++)
			{
				Out[i].x=In[IPm1[i]-1].x;
			}
		}
		window{
			Out tumbling(64);
			In  sliding(64,64);
		} 
	};
}

composite HexPrinter_Filter(input stream<int x>In)//没有输出如何改写
{
	param
		int descriptor,int n;

	HexPrinter_Filter(In)	
	{
		int bits  = n;
		int bytes = bits / 4;
		work
		{
			int i;
			if (PRINTINFO != 0) 
			{
				if (descriptor == PLAINTEXT) 
					print("P: ");
				else if (descriptor == USERKEY)
					print("K: ");
				else if (descriptor == CIPHERTEXT)
					print("C: ");
			}

			for (i = bytes - 1; i >= 0; i--)
			{
				int v =In[i].x;
				if (v < 10) print(v);
				else if (v == 10) print("A");
				else if (v == 11) print("B");
				else if (v == 12) print("C");
				else if (v == 13) print("D");
				else if (v == 14) print("E");
				else if (v == 15) print("F");
				else {
					print("ERROR: "); 
					println(v);
				}
			}
			println(""); 
		}
		
		window	{
			In sliding(16,16);
		}
	};
}

composite BitstoInts(output stream<int x>Out,input stream<int x>In)
{
	param
		int n;
	Out=BitstoInts(In)
	{	
		work
		{
			int i, v = 0;
			for (i = 0; i < n; i++)
			{
				v = v | (In[i].x << i);
			}
			Out[0].x=v;
		}
		window {
			Out tumbling(1);
			In  sliding(n,n);
		}
	};
}

composite HexPrinter(input stream<int x>In)//没有输出如何改写
{
	param
		int descriptor,int n;
	stream<int x>Out_1;
	Out_1 = BitstoInts(In)(4);
	HexPrinter_Filter(Out_1)(descriptor,n);
}

composite KeySchedule(output stream<int x>Out,input stream<int x>In)
{
	param
		int vector,int round;

	Out=KeySchedule(In)
	{
		int keys[MAXROUNDS][48] ;	  
		init
		{
			int k64[64], k56[56], bits[56];
			int w, r, i;	   
			for ( w = 1; w >= 0; w--) 
			{
				int v = USERKEYS[vector][w]; // LSW first then MSW
				int m = 1;
				for (i = 0; i < 32; i++) 
				{
					if (((v & m) >> i) != 0)
						k64[((1 - w) * 32) + i] = 1;
					else
						k64[((1 - w) * 32) + i] = 0;
					m = m << 1;
				}
			}
			// apply PC1
			for (i = 0; i < 56; i++) 
			{
				k56[i] = k64[64 - PC1[i]];
				//print("k56[i] := ");
				//println(k56[i]);
			}

			for (r = 0; r < MAXROUNDS; r++)
			{
				// rotate left and right 28-bit bits chunks
				// according to round number
				//int bits[56] ;
				for (i =  0; i < 28; i++) 
					bits[i] = k56[(i + RT[r]) % 28];
				for (i = 28; i < 56; i++) 
					bits[i] = k56[28 + ((i + RT[r]) % 28)];
				for (i =  0; i < 56; i++) 
					k56[i] = bits[i];
				
				// apply PC2 and store resultant key
				for (i = 47; i >= 0; i--) 
				{
					keys[r][47 - i] = k56[PC2[i] - 1];
				}
			}
		}
		work
		{
			int i;
			for (i = 0; i < 48; i++) 
			{
				Out[2*i].x = keys[round][i]; // lxx
				Out[2*i+1].x = In[i].x;
				//print("KeySchedule := ");
				//println(Out[2*i].x);
			}
		}
		window {
			Out tumbling(96);
			In  sliding(48,48);
		}
	};
}

composite IntoBits(output stream<int x>Out,input stream<int x>In)
{

	Out = IntoBits(In)
	{
		work
		{
			int i;
			int v = In[0].x;
			int m = 1;
			for (i = 0; i < 32; i++)
			{
				if (((v & m) >> i) != 0)
					Out[i].x = 1;
				else
					Out[i].x = 0;
				m = m << 1;
			}
		}
		window{
			Out tumbling(32);
		} 
	};
}

composite doE(output stream<int x>Out,input stream<int x>In)
{
	Out=doE(In)
	{
		work
		{
			int i;
			for (i = 0; i < 48; i++)
			{
				Out[i].x=In[E[i]-1].x;
				//print("doE := ");
				//println(Out[i].x);
			}
		}
		window {
			Out tumbling(48);
			In  sliding(32,32);
		}
	};
}

composite Xor(output stream<int x>Out,input stream<int x>In)
{
	param
		int n;
	Out=Xor(In)
	{
		work
		{
			int x =In[0].x;
			int i;
			for (i = 1; i < n; i++) 
			{
				int y = In[i].x;
				x = x ^ y;
			}
			Out[0].x=x;
		}
		
		window {
			Out tumbling(1);
			In  sliding(n,n);
		}
	};
}

composite doP(output stream<int x>Out,input stream<int x>In)
{
	Out=doP(In)
	{
		work
		{
			int i;
			for (i = 31; i >= 0; i--)
			{
				Out[31-i].x = In[32-P[i]].x; // lxx
			}
		}
		window {
			Out tumbling(32);
			In  sliding(32,32);
		}
	};
}

composite Sboxes(output stream<int x>Out,input stream<int x>In)
{
	Out=Sboxes(In)
	{
		work
		{
			int i,r,c,out,tmp;
			for (i = 1; i <= 8; i++) 
			{
				r = In[6*(i-1)+0].x; // r = first and last bit
				c = In[6*(i-1)+1].x; // c = middle four bits
				c = (In[6*(i-1)+2].x << 1) | c;
				c = (In[6*(i-1)+3].x << 2) | c;
				c = (In[6*(i-1)+4].x << 3) | c;
				r = (In[6*(i-1)+5].x << 1) | r;
				
				out = 0;
				if (i == 1) out = S8[r][c]; // lower 8 bits
				else if (i == 2) out = S7[r][c]; // next  8 bits
				else if (i == 3) out = S6[r][c]; // ...
				else if (i == 4) out = S5[r][c];
				else if (i == 5) out = S4[r][c];
				else if (i == 6) out = S3[r][c];
				else if (i == 7) out = S2[r][c];
				else if (i == 8) out = S1[r][c]; // last (upper) 8 bits
				
				tmp = ((int)((out & 0x1) >> 0));
				Out[4*(i-1)+0].x = tmp;
				tmp = ((int)((out & 0x2) >> 1));
				Out[4*(i-1)+1].x = tmp;
				tmp = ((int)((out & 0x4) >> 2));
				Out[4*(i-1)+2].x = tmp;
				tmp = ((int)((out & 0x8) >> 3));
				Out[4*(i-1)+3].x = tmp;
			}
		}
		window {
			Out tumbling(32);
			In sliding(48,48);
		}
	};
}

composite nextL(output stream<int x>Out,input stream<int x>In)
{
	Out=nextL(In)
	{
		work
		{
			int i;
			for (i = 0; i < 32; i++)
			{
				Out[i].x=In[i].x;
			}
		}
		window {
			Out tumbling(32);
			In  sliding(64,64);
		}
	};
}

composite f(output stream<int x>Out,input stream<int x>In)
{
	param
		int vector,int round;
		
	Out=pipeline(In)
	{
		add doE();
		add KeySchedule(vector, round);
		add Xor(2);
		add Sboxes();
		add doP();
	};
}

composite Identity(output stream<int x>Out,input stream<int x>In)
{
	Out=Identity(In)
	{
		work
		{
			Out[0].x = In[0].x;
		}
	};
}

composite nextR(output stream<int x>Out,input stream<int x>In)
{
	param
		int vector,int round;
	
	Out = pipeline(In){
		add splitjoin {
			split roundrobin(32, 32);
			add f(vector, round);
			add Identity();//*************************//
			join roundrobin();
		};
		add Xor(2);
	};
}

composite doIP(output stream<int x>Out,input stream<int x>In)
{
	Out = doIP(In)
	{
		work
		{
			int i,tmp;
			for (i = 0; i < 64; i++)
			{
				tmp = IP[i]-1;
				Out[i].x = In[tmp].x;
			}
		}
		window {
			Out tumbling(64);
			In  sliding(64,64);
		}
	};
}

composite PlainTextSource(output stream<int x>Out)
{
	param
		int vector;
	
	stream<int x> OutT;
	OutT = Annoy()
	{
		int TEXT[34][2] = {{0x00000000, 0x00000000},  // 0x0000000000000000
			   {0xFFFFFFFF, 0xFFFFFFFF},  // 0xFFFFFFFFFFFFFFFF
			   {0x10000000, 0x00000001},  // 0x1000000000000001
			   {0x11111111, 0x11111111},  // 0x1111111111111111
			   {0x11111111, 0x11111111},  // 0x1111111111111111
			   {0x01234567, 0x89ABCDEF},  // 0x0123456789ABCDEF
			   {0x00000000, 0x00000000},  // 0x0000000000000000
			   {0x01234567, 0x89ABCDEF},  // 0x0123456789ABCDEF
			   {0x01A1D6D0, 0x39776742},  // 0x01A1D6D039776742
			   {0x5CD54CA8, 0x3DEF57DA},  // 0x5CD54CA83DEF57DA
			   {0x0248D438, 0x06F67172},  // 0x0248D43806F67172
			   {0x51454B58, 0x2DDF440A},  // 0x51454B582DDF440A
			   {0x42FD4430, 0x59577FA2},  // 0x42FD443059577FA2
			   {0x059B5E08, 0x51CF143A},  // 0x059B5E0851CF143A
			   {0x0756D8E0, 0x774761D2},  // 0x0756D8E0774761D2
			   {0x762514B8, 0x29BF486A},  // 0x762514B829BF486A
			   {0x3BDD1190, 0x49372802},  // 0x3BDD119049372802
			   {0x26955F68, 0x35AF609A},  // 0x26955F6835AF609A
			   {0x164D5E40, 0x4F275232},  // 0x164D5E404F275232
			   {0x6B056E18, 0x759F5CCA},  // 0x6B056E18759F5CCA
			   {0x004BD6EF, 0x09176062},  // 0x004BD6EF09176062
			   {0x480D3900, 0x6EE762F2},  // 0x480D39006EE762F2
			   {0x437540C8, 0x698F3CFA},  // 0x437540C8698F3CFA
			   {0x072D43A0, 0x77075292},  // 0x072D43A077075292
			   {0x02FE5577, 0x8117F12A},  // 0x02FE55778117F12A
			   {0x1D9D5C50, 0x18F728C2},  // 0x1D9D5C5018F728C2
			   {0x30553228, 0x6D6F295A},  // 0x305532286D6F295A
			   {0x01234567, 0x89ABCDEF},  // 0x0123456789ABCDEF
			   {0x01234567, 0x89ABCDEF},  // 0x0123456789ABCDEF
			   {0x01234567, 0x89ABCDEF},  // 0x0123456789ABCDEF
			   {0xFFFFFFFF, 0xFFFFFFFF},  // 0xFFFFFFFFFFFFFFFF
			   {0x00000000, 0x00000000},  // 0x0000000000000000
			   {0x00000000, 0x00000000},  // 0x0000000000000000
			   {0xFFFFFFFF, 0xFFFFFFFF}}; // 0xFFFFFFFFFFFFFFFF
		work
		{
			OutT[0].x = TEXT[vector][1];
			OutT[1].x = TEXT[vector][0];
		}
		window {
			OutT tumbling(2);
		}
	};
	
	Out = IntoBits(OutT)();
}

composite Main ()
{
	int testvector = 7;
	stream<int x> Source,IPm;
	
	Source = PlainTextSource()(testvector);
	IPm = pipeline(Source){
		int i;
		add doIP();
		for(i = 0; i < MAXROUNDS; i++){
			add splitjoin {
				split duplicate();
				add nextR(testvector, i);
				add nextL();
				join roundrobin(32,32);
			};
		}
		add CrissCross();
		add doIPm1();
	};
	HexPrinter(IPm)(CIPHERTEXT, 64);
}
