//2016-6-24 wl
//本程序实现DCT变换
//编译命令 COStreamC -x86 -nCpucore 8 dct.cos -o ./dct/
int From[64] = {
			11,16,21,25,27,27,27,27,
			16,23,25,28,31,28,28,28,
			22,27,32,35,30,28,28,28,
			31,33,34,32,32,31,31,31,
			31,32,33,34,34,27,27,27,
			33,33,33,33,32,29,29,29,
			34,34,33,35,34,29,29,29,
			34,34,33,33,35,30,30,30
};

double pi = 3.14159265358979323846;

composite IntSource(output stream<double x> Out)
{
	Out = IntSource()
	{
		int i;
		init{
			i = 0;
		}
		work
		{
			//Out[0].x = From[i++];
			float x = pow(3, i++);
			int   y = (int) x;
			Out[0].x = y%75;
		}
		window{
			Out tumbling(1);
		}
	};
}

composite DCT_Result(output stream<double x> Out,input stream<double x> In)
{
	Out = DCT_Result(In)
	{
		int i;
		init{
			i = 0;
		}
		work
		{
			int t;
			t = (int)floor(In[0].x+0.499999);
			Out[0].x = t;
			//println(Out[0].x);
		}
		window{
			In sliding(1,1);
			Out tumbling(1);
		}
	};
}


composite DCT_1D(output stream<double x>Out,input stream<double x>In)
{
	param
		int size;
	Out = DCT_1D(In)
	{
		double coeff[size][size];
		int xi,u;
		double Cu;
		init
		{
			for (xi = 0; xi < size; xi++) 
			{
				Cu = 0.5;
				if (xi == 0)Cu = sqrt(0.125);
				for (u = 0; u < size; u++) 
				{
					coeff[xi][u]= Cu * cos((pi/8.0)*xi*(u+0.5));
				}
			}
		}
		work
		{
			int xi, u;
			double tmp;
			for (xi = 0; xi < size; xi++) 
			{
				tmp = 0.0;
				for (u = 0; u < size; u++) 
				{
					tmp += (coeff[xi][u] * In[u].x);
				}
			   Out[xi].x = tmp;
			   
			}
			//revised by wangliang
		}

		window{
			Out tumbling(size);
			In  sliding(size,size);
		}
	};
}

composite DCT_2D_X(output stream<double x>Out,input stream<double x>In)
{
	param
		int size;

	Out=splitjoin(In)
	{
		int i;
		split roundrobin(size);
		for (i = 0; i < size; i++)
		{
			add DCT_1D(size); 
		}
		join roundrobin(size);
	};
}

composite DCT_2D_Y(output stream<double x>Out,input stream<double x>In)
{
	param
		int size;
	Out = splitjoin(In)
	{	
		int i;
		split roundrobin(1);
		for (i = 0; i < size; i++)
		{
			add DCT_1D(size); 
		}
		join roundrobin(1);
	};
}





composite Sink(input stream<int x> In)
{
	Sink(In)
	{
		work
		{
			int i;
			for(i = 0;i<8;i++){
				print(In[i].x);
				print(" ");
			}
			println("");
			
		}
		window{
			In sliding(8,8);
		}
	};
}

//COStreamC -x86 -nCpucore 8 dct.cos -o ./dct/
composite Main ()
{
	stream<double x> Source,S1,S2,S3;
	int size = 8;
	
	Source = IntSource()();
	
	S1 = DCT_2D_Y(Source)(size);
	
	S2 = DCT_2D_X(S1)(size);
	
	S3 = DCT_Result(S2)();
	
	Sink(S3)();
	
}
