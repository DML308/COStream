int From[256] = {
	544,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	528,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	544,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	536,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1
};

double  pi = 3.141592654;

composite iDCT_1D_reference_fine(output stream<double x>Out,input stream<double x>In)
{
	param
		int size;

	Out = iDCT_1D_reference_fine(In)
	{
		double coeff[size][size] ;	
		init
		{
			int xi,u;
			double Cu,tmp, s;
			s=sqrt(2.0);
			 for (xi = 0; xi < size; xi++) 
			{
				for (u = 0; u < size; u++) 
				{
					Cu = 1;
					if (u == 0)
					Cu = 1/s;
					tmp = u * pi * (2.0 * xi + 1)/(2.0 * size);
					coeff[xi][u]= 0.5 * Cu * cos(tmp);
				}
			}
		}
		work
		{
			int xi, u;
			double tmp;
			for (xi = 0; xi < size; xi++) 
			{
				tmp = 0;
				for (u = 0; u < size; u++) 
				{
					tmp += (coeff[xi][u] * In[u].x);
				}
			   Out[xi].x = (int)tmp;
			}
			//added by mgordon
		}

		window{
			Out tumbling(size);
			In  sliding(size,size);
		}
	};
}

composite iDCT_1D_X_reference_fine(output stream<double x>Out,input stream<double x>In)
{
	param
		int size;

	Out=splitjoin(In)
	{
		int i;
		split roundrobin(size);
		for (i = 0; i < size; i++)
		{
			add iDCT_1D_reference_fine(size); 
		}
		join roundrobin(size);
	};
}

composite iDCT_1D_Y_reference_fine(output stream<double x>Out,input stream<double x>In)
{
	param
		int size;
	Out = splitjoin(In)
	{	
		int i;
		split roundrobin(1);
		for (i = 0; i < size; i++)
		{
			add iDCT_1D_reference_fine(size); 
		}
		join roundrobin(1);
	};
}

composite iDCT_2D_reference_fine_1(output stream<int x>Out,input stream<double x>In)
{
	Out = iDCT_2D_reference_fine_1(In)
	{
		work
		{
			Out[0].x = In[0].x;
		}
		window {
			Out tumbling(1);
			In  sliding(1,1);	
		}
	};
}

composite iDCT_2D_reference_fine_2(output stream<double x>Out,input stream<int x>In)
{
	Out = iDCT_2D_reference_fine_2(In)
	{
		work
		{
			Out[0].x=(int)(floor(In[0].x+0.5));
		}

		window {
			Out tumbling(1);
			In  sliding(1,1);		
		}
	};
}

composite iDCT_2D_reference_fine(output stream<int x>Out,input stream<int x>In)
{
	param
		int size;
	Out=pipeline(In)
	{
		add iDCT_2D_reference_fine_1();
		add iDCT_1D_Y_reference_fine(size);
		add iDCT_1D_X_reference_fine(size);
		add iDCT_2D_reference_fine_2();
	};
}

composite Main ()
{
	stream<int x> Source,iDCT_1D_X_Out;
	Source = IntSource()
	{
		int i=0;
		work
		{
			Source[0].x = From[(i++)%256];
		}
	};
	
	iDCT_1D_X_Out=iDCT_2D_reference_fine(Source)(16);
	
	IntSink(iDCT_1D_X_Out)
	{
		work
		{
			println(iDCT_1D_X_Out[0].x);
		}
	};
}
